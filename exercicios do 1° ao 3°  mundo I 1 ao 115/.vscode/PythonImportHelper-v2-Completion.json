[
    {
        "label": "uteis",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uteis",
        "description": "uteis",
        "detail": "uteis",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "moeda",
        "description": "moeda",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "resumo",
        "importPath": "moeda",
        "description": "moeda",
        "isExtraImport": true,
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "dado",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dado",
        "description": "dado",
        "detail": "dado",
        "documentation": {}
    },
    {
        "label": "lib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib",
        "description": "lib",
        "detail": "lib",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "lib",
        "description": "lib",
        "isExtraImport": true,
        "detail": "lib",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "arquivo",
        "description": "arquivo",
        "isExtraImport": true,
        "detail": "arquivo",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "trunc",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "radians",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "tan",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "factorial",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "shuffle",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "presence_of_element_located",
        "importPath": "selenium.webdriver.support.expected_conditions",
        "description": "selenium.webdriver.support.expected_conditions",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.expected_conditions",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Aula 22 – Módulos e Pacotes.numeros",
        "description": "Aula 22 – Módulos e Pacotes.numeros",
        "peekOfCode": "num = int(input(\"Digite um valor: \"))\nfat = uteis.fatorial(num)\nprint(f'O fatorial de {num} é {fat}')\nprint(f'O dobro de {num} e {uteis.dobro(num)}')\n#print(f'O dobro de {num} e {uteis.triplo(num)}')",
        "detail": "Aula 22 – Módulos e Pacotes.numeros",
        "documentation": {}
    },
    {
        "label": "fat",
        "kind": 5,
        "importPath": "Aula 22 – Módulos e Pacotes.numeros",
        "description": "Aula 22 – Módulos e Pacotes.numeros",
        "peekOfCode": "fat = uteis.fatorial(num)\nprint(f'O fatorial de {num} é {fat}')\nprint(f'O dobro de {num} e {uteis.dobro(num)}')\n#print(f'O dobro de {num} e {uteis.triplo(num)}')",
        "detail": "Aula 22 – Módulos e Pacotes.numeros",
        "documentation": {}
    },
    {
        "label": "fatorial",
        "kind": 2,
        "importPath": "Aula 22 – Módulos e Pacotes.uteis",
        "description": "Aula 22 – Módulos e Pacotes.uteis",
        "peekOfCode": "def fatorial(n): # from uteis import dobro, fatorial \n    f = 1\n    for c in range(1, n+1): # ver pq precisa do +1\n        f *= c\n    return f\ndef dobro(n):\n    return n * 2\ndef triplo(n):\n    return n * 3",
        "detail": "Aula 22 – Módulos e Pacotes.uteis",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "Aula 22 – Módulos e Pacotes.uteis",
        "description": "Aula 22 – Módulos e Pacotes.uteis",
        "peekOfCode": "def dobro(n):\n    return n * 2\ndef triplo(n):\n    return n * 3",
        "detail": "Aula 22 – Módulos e Pacotes.uteis",
        "documentation": {}
    },
    {
        "label": "triplo",
        "kind": 2,
        "importPath": "Aula 22 – Módulos e Pacotes.uteis",
        "description": "Aula 22 – Módulos e Pacotes.uteis",
        "peekOfCode": "def triplo(n):\n    return n * 3",
        "detail": "Aula 22 – Módulos e Pacotes.uteis",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "exe107.moeda",
        "description": "exe107.moeda",
        "peekOfCode": "def aumentar(preço, taxa):\n    res = preço + (preço * taxa / 100)\n    return res\ndef diminuir(preço, taxa):\n    res = preço - (preço * taxa / 100)\n    return res\ndef dobro(preço):\n    res = preço * 2\n    return res\ndef metade(preço):",
        "detail": "exe107.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "exe107.moeda",
        "description": "exe107.moeda",
        "peekOfCode": "def diminuir(preço, taxa):\n    res = preço - (preço * taxa / 100)\n    return res\ndef dobro(preço):\n    res = preço * 2\n    return res\ndef metade(preço):\n    res = preço / 2\n    return res",
        "detail": "exe107.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "exe107.moeda",
        "description": "exe107.moeda",
        "peekOfCode": "def dobro(preço):\n    res = preço * 2\n    return res\ndef metade(preço):\n    res = preço / 2\n    return res",
        "detail": "exe107.moeda",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "exe107.moeda",
        "description": "exe107.moeda",
        "peekOfCode": "def metade(preço):\n    res = preço / 2\n    return res",
        "detail": "exe107.moeda",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "exe107.teste",
        "description": "exe107.teste",
        "peekOfCode": "p = float(input(\"Digite o preço R$: \"))\nprint(f'A metade de {p} e {moeda.metade(p)}')\nprint(f'O drobro  de {p} e {moeda.dobro(p)}')\nprint(f'Aumentando 10% temos {moeda.aumentar(p, 10)}')",
        "detail": "exe107.teste",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "exe108.moeda",
        "description": "exe108.moeda",
        "peekOfCode": "def aumentar(preço = 0, taxa = 0):\n    res = preço + (preço * taxa / 100)\n    return res\ndef diminuir(preço = 0, taxa = 0):\n    res = preço - (preço * taxa / 100)\n    return res\ndef dobro(preço = 0):\n    res = preço * 2\n    return res\ndef metade(preço = 0):",
        "detail": "exe108.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "exe108.moeda",
        "description": "exe108.moeda",
        "peekOfCode": "def diminuir(preço = 0, taxa = 0):\n    res = preço - (preço * taxa / 100)\n    return res\ndef dobro(preço = 0):\n    res = preço * 2\n    return res\ndef metade(preço = 0):\n    res = preço / 2\n    return res\ndef moeda(preço = 0, moeda = \"R$:\"):",
        "detail": "exe108.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "exe108.moeda",
        "description": "exe108.moeda",
        "peekOfCode": "def dobro(preço = 0):\n    res = preço * 2\n    return res\ndef metade(preço = 0):\n    res = preço / 2\n    return res\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula",
        "detail": "exe108.moeda",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "exe108.moeda",
        "description": "exe108.moeda",
        "peekOfCode": "def metade(preço = 0):\n    res = preço / 2\n    return res\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula",
        "detail": "exe108.moeda",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 2,
        "importPath": "exe108.moeda",
        "description": "exe108.moeda",
        "peekOfCode": "def moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula",
        "detail": "exe108.moeda",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "exe108.teste",
        "description": "exe108.teste",
        "peekOfCode": "p = float(input(\"Digite o preço R$: \"))\nprint(f'A metade de {moeda.moeda(p)} e {moeda.moeda(moeda.metade(p))}')#moeda -> pacote \\ moeda -> modulo\nprint(f'O drobro  de {moeda.moeda(p)} e {moeda.moeda(moeda.dobro(p))}')#moeda -> pacote \\ moeda -> modulo\nprint(f'Aumentando 10% temos {moeda.moeda(moeda.aumentar(p, 10))}') #moeda -> pacote \\ moeda -> modulo",
        "detail": "exe108.teste",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "exe109.moeda",
        "description": "exe109.moeda",
        "peekOfCode": "def aumentar(preço = 0, taxa = 0, formato=False):\n    res = preço + (preço * taxa / 100)\n    return res if formato is False else moeda(res)# is caso seja falso \n# se format nao for falso ele sera True e vai chamar a funçao moeda()\ndef diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)",
        "detail": "exe109.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "exe109.moeda",
        "description": "exe109.moeda",
        "peekOfCode": "def diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):",
        "detail": "exe109.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "exe109.moeda",
        "description": "exe109.moeda",
        "peekOfCode": "def dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula",
        "detail": "exe109.moeda",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "exe109.moeda",
        "description": "exe109.moeda",
        "peekOfCode": "def metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula",
        "detail": "exe109.moeda",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 2,
        "importPath": "exe109.moeda",
        "description": "exe109.moeda",
        "peekOfCode": "def moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula",
        "detail": "exe109.moeda",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "exe109.teste",
        "description": "exe109.teste",
        "peekOfCode": "p = float(input(\"Digite o preço R$: \"))\nprint(f'A metade de {(p)} e {moeda.metade(p, True)}')#moeda -> pacote \\ moeda -> modulo\nprint(f'O drobro  de {(p)} e {moeda.dobro(p,True)}')#moeda -> pacote \\ moeda -> modulo\nprint(f'Aumentando 10% temos {moeda.aumentar(p, 10, True)}') #moeda -> pacote \\ moeda -> modulo\nprint(f'Reduzindo 13%, temos {moeda.diminuir(p, 13, True)}')",
        "detail": "exe109.teste",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "exe110.moeda",
        "description": "exe110.moeda",
        "peekOfCode": "def aumentar(preço = 0, taxa = 0, formato=False):\n    res = preço + (preço * taxa / 100)\n    return res if formato is False else moeda(res)# is caso seja falso \n# se format nao for falso ele sera True e vai chamar a funçao moeda()\ndef diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)",
        "detail": "exe110.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "exe110.moeda",
        "description": "exe110.moeda",
        "peekOfCode": "def diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):",
        "detail": "exe110.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "exe110.moeda",
        "description": "exe110.moeda",
        "peekOfCode": "def dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) ",
        "detail": "exe110.moeda",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "exe110.moeda",
        "description": "exe110.moeda",
        "peekOfCode": "def metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t",
        "detail": "exe110.moeda",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 2,
        "importPath": "exe110.moeda",
        "description": "exe110.moeda",
        "peekOfCode": "def moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t\n    print(f'Dobro do preço: \\t {dobro(preço, True)}')\n    print(f'Metade do preço: \\t {metade(preço, True)}')\n    print(f'{taxaa}% tanto de aumento: \\t {aumentar(preço, taxaa, True)}')",
        "detail": "exe110.moeda",
        "documentation": {}
    },
    {
        "label": "resumo",
        "kind": 2,
        "importPath": "exe110.moeda",
        "description": "exe110.moeda",
        "peekOfCode": "def resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t\n    print(f'Dobro do preço: \\t {dobro(preço, True)}')\n    print(f'Metade do preço: \\t {metade(preço, True)}')\n    print(f'{taxaa}% tanto de aumento: \\t {aumentar(preço, taxaa, True)}')\n    print(f'{taxar}% tanto de rezução: \\t {diminuir(preço, taxar, True)}')\n    print('-'* 30 )",
        "detail": "exe110.moeda",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "exe110.teste",
        "description": "exe110.teste",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nmoeda.resumo(preço, 90, 35) # 80 parametro da funçao aumentar()\n                     #35 parametro da funçao diminuir()\n#=========Como O professor fez =====================",
        "detail": "exe110.teste",
        "documentation": {}
    },
    {
        "label": "leiadinheiro",
        "kind": 2,
        "importPath": "exe111.dado",
        "description": "exe111.dado",
        "peekOfCode": "def leiadinheiro(msg):\n    valido = False # ok começa como false = Falso\n    while not valido:\n        entrada = str(input(msg))\n        if entrada.isalpha(msg): # .isalpha para verificar se e alfanumeico | caso nao seja numerico  \n            print(f'\\\"{Entrada}\\\" é um preço invalido!!') # \\\" para forçar a chamada da chave \n        else:\n            valido = True\n            return float(entrada)",
        "detail": "exe111.dado",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "exe111.moeda",
        "description": "exe111.moeda",
        "peekOfCode": "def aumentar(preço = 0, taxa = 0, formato=False):\n    res = preço + (preço * taxa / 100)\n    return res if formato is False else moeda(res)# is caso seja falso \n# se format nao for falso ele sera True e vai chamar a funçao moeda()\ndef diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)",
        "detail": "exe111.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "exe111.moeda",
        "description": "exe111.moeda",
        "peekOfCode": "def diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):",
        "detail": "exe111.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "exe111.moeda",
        "description": "exe111.moeda",
        "peekOfCode": "def dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) ",
        "detail": "exe111.moeda",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "exe111.moeda",
        "description": "exe111.moeda",
        "peekOfCode": "def metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t",
        "detail": "exe111.moeda",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 2,
        "importPath": "exe111.moeda",
        "description": "exe111.moeda",
        "peekOfCode": "def moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t\n    print(f'Dobro do preço: \\t {dobro(preço, True)}')\n    print(f'Metade do preço: \\t {metade(preço, True)}')\n    print(f'{taxaa}% tanto de aumento: \\t {aumentar(preço, taxaa, True)}')",
        "detail": "exe111.moeda",
        "documentation": {}
    },
    {
        "label": "resumo",
        "kind": 2,
        "importPath": "exe111.moeda",
        "description": "exe111.moeda",
        "peekOfCode": "def resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t\n    print(f'Dobro do preço: \\t {dobro(preço, True)}')\n    print(f'Metade do preço: \\t {metade(preço, True)}')\n    print(f'{taxaa}% tanto de aumento: \\t {aumentar(preço, taxaa, True)}')\n    print(f'{taxar}% tanto de rezução: \\t {diminuir(preço, taxar, True)}')\n    print('-'* 30 )",
        "detail": "exe111.moeda",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "exe111.teste",
        "description": "exe111.teste",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nmoeda.resumo(preço, 90, 35) # 80 parametro da funçao aumentar()\n                     #35 parametro da funçao diminuir()\n#=========Como O professor fez =====================",
        "detail": "exe111.teste",
        "documentation": {}
    },
    {
        "label": "leiadinheiro",
        "kind": 2,
        "importPath": "exe112.dado",
        "description": "exe112.dado",
        "peekOfCode": "def leiadinheiro(msg):\n    valido = False # ok começa como false = Falso\n    while not valido:\n        entrada = str(input(msg)).replace(',' , ' .').strip() # replace para substituir todos os . por ,\n        if entrada.isalpha() or entrada == '': # strip para tirar os espaços # .isalpha para verificar se e alfanumeico | caso nao seja numerico  \n            print(f'\\\"{entrada}\\\" \\033[31mé um preço invalido!!\\033[m') # \\\" para forçar a chamada da chave \n        else:\n            valido = True\n            return float(entrada)",
        "detail": "exe112.dado",
        "documentation": {}
    },
    {
        "label": "aumentar",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def aumentar(preço = 0, taxa = 0, formato=False):\n    res = preço + (preço * taxa / 100)\n    return res if formato is False else moeda(res)# is caso seja falso \n# se format nao for falso ele sera True e vai chamar a funçao moeda()\ndef diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def diminuir(preço = 0, taxa = 0, formato=False):\n    res = preço - (preço * taxa / 100)\n    return res if formato is False else moeda(res)\ndef dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def dobro(preço = 0, formato=False):\n    res = preço * 2\n    return res if formato is False else moeda(res)\ndef metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) ",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def metade(preço = 0, formato=False):\n    res = preço / 2\n    return res if not formato else moeda(res)\ndef moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def moeda(preço = 0, moeda = \"R$:\"):\n    return f'{moeda}{preço:>.2f}'.replace('.', ',')  # .replac() ele troca o '.' ponto pela ',' virgula\ndef resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t\n    print(f'Dobro do preço: \\t {dobro(preço, True)}')\n    print(f'Metade do preço: \\t {metade(preço, True)}')\n    print(f'{taxaa}% tanto de aumento: \\t {aumentar(preço, taxaa, True)}')",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "resumo",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def resumo(preço=0, taxaa=10, taxar=5):\n    print('-'* 30) \n    print(f'resumo do valor'.center(30))  # .center para centralizar o str\n    print('-'* 30 )\n    print(f'Preço Analizando: \\t {moeda(preço)}') # \\t para criar uma tabulaçao das informaçoes  caso uma nao seja suficiente tem que por duas \\t\\t\n    print(f'Dobro do preço: \\t {dobro(preço, True)}')\n    print(f'Metade do preço: \\t {metade(preço, True)}')\n    print(f'{taxaa}% tanto de aumento: \\t {aumentar(preço, taxaa, True)}')\n    print(f'{taxar}% tanto de rezução: \\t {diminuir(preço, taxar, True)}')\n    print('-'* 30 )",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "leiadinheiro",
        "kind": 2,
        "importPath": "exe112.moeda",
        "description": "exe112.moeda",
        "peekOfCode": "def leiadinheiro(msg):\n    valido = False # ok começa como false = Falso\n    while not valido:\n        entrada = str(input(msg)).replace(',' , ' .') # replace para substituir todos os . por ,\n        if entrada.isalpha(msg) or entrada.strip() == ' ': # strip para tirar os espaços # .isalpha para verificar se e alfanumeico | caso nao seja numerico  \n            print(f'\\\"{Entrada}\\\" é um preço invalido!!') # \\\" para forçar a chamada da chave \n        else:\n            valido = True\n            return float(entrada)",
        "detail": "exe112.moeda",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "exe112.teste",
        "description": "exe112.teste",
        "peekOfCode": "preço = dado.leiadinheiro(\"Digite o preço R$: \")\nmoeda.resumo(preço, 90, 35) # 80 parametro da funçao aumentar()\n                            #35 parametro da funçao diminuir()\n#=========Como O professor fez =====================",
        "detail": "exe112.teste",
        "documentation": {}
    },
    {
        "label": "arquivoExiste",
        "kind": 2,
        "importPath": "exe115.arquivo",
        "description": "exe115.arquivo",
        "peekOfCode": "def arquivoExiste(nome):\n    try:\n        a = open(nome, 'rt') # o nome recebe o nome do arquivo.txt e o 'rt' e para fazer a leitura do aquivo\n        a.close() # close para fechar \n    except FileNotFoundError:  # FileNotFoundError se o arquivo nao for encontrado\n        return False\n    else:\n        return True\ndef criarArquivo(nome):\n    try:",
        "detail": "exe115.arquivo",
        "documentation": {}
    },
    {
        "label": "criarArquivo",
        "kind": 2,
        "importPath": "exe115.arquivo",
        "description": "exe115.arquivo",
        "peekOfCode": "def criarArquivo(nome):\n    try:\n        a = open(nome, 'wt+') # wt ->  escreva um aquivo de texto o + e para criar um arquivo caso ele nao existra\n        a.close() # para fechar \n    except:\n        Print('Houve um ERRO na criaçao do arquivo')\n    else:\n        print(f'Arquivo {nome} Criado com sucesso!!')\ndef lerArquivo(nome):\n    try:",
        "detail": "exe115.arquivo",
        "documentation": {}
    },
    {
        "label": "lerArquivo",
        "kind": 2,
        "importPath": "exe115.arquivo",
        "description": "exe115.arquivo",
        "peekOfCode": "def lerArquivo(nome):\n    try:\n        a = open(nome, 'rt') # 'rt' para leitura de TXT\n    except:\n        print('ERRO ao ler o arquivo!!')\n    else:\n        cabeçario('PESSOAS CADASTRADAS')\n        for linha in a:\n            dado =linha.split(';') # split para soltar todas as paavras \n            dado[1] = dado[1].replace('\\n', ' ') # .replace para trocar o \\n por nada",
        "detail": "exe115.arquivo",
        "documentation": {}
    },
    {
        "label": "cadastrar",
        "kind": 2,
        "importPath": "exe115.arquivo",
        "description": "exe115.arquivo",
        "peekOfCode": "def cadastrar(arq, nome = 'Desaconhecido', idade = 0):\n    try:\n        a = open(arq, 'at') # a -> de append | t -> texto\n    except:\n        print('Houve um ERRO na abertura do arquivo!')\n    else:\n        try:\n            a.write(f'{nome};{idade}\\n')# write para escrever dentro do arquivo txt\n        except:\n            print(\"Houve um ERRO na hora de escrever os dados!\")",
        "detail": "exe115.arquivo",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "exe115.lib",
        "description": "exe115.lib",
        "peekOfCode": "def leiaint(msg):\n    while True:\n        try: # tente fazer\n        \tn = int(input(msg))\n        except (ValueError, TypeError):\n            print('\\033[31mERRO! Por favor digite um numero interito valido!!\\033[m')\n            continue # para voltar para o While\n        else:\n            return n # se tudo nao der certo e pq e um numero inteiro\ndef linha(tam = 42):",
        "detail": "exe115.lib",
        "documentation": {}
    },
    {
        "label": "linha",
        "kind": 2,
        "importPath": "exe115.lib",
        "description": "exe115.lib",
        "peekOfCode": "def linha(tam = 42):\n    return '-' * tam\ndef cabeçario(txt):\n    print(linha())\n    print(f'{txt:^42}')\n    print(linha())\ndef menu(lista):\n    cabeçario(\"MENU PRINCIPAL\")\n    c = 1 \n    for item in lista:",
        "detail": "exe115.lib",
        "documentation": {}
    },
    {
        "label": "cabeçario",
        "kind": 2,
        "importPath": "exe115.lib",
        "description": "exe115.lib",
        "peekOfCode": "def cabeçario(txt):\n    print(linha())\n    print(f'{txt:^42}')\n    print(linha())\ndef menu(lista):\n    cabeçario(\"MENU PRINCIPAL\")\n    c = 1 \n    for item in lista:\n        print(f'\\033[33m{c}\\033[m - \\033[34m{item}\\033[m')\n        c += 1",
        "detail": "exe115.lib",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "exe115.lib",
        "description": "exe115.lib",
        "peekOfCode": "def menu(lista):\n    cabeçario(\"MENU PRINCIPAL\")\n    c = 1 \n    for item in lista:\n        print(f'\\033[33m{c}\\033[m - \\033[34m{item}\\033[m')\n        c += 1\n    print(linha())\n    opc = leiaint(\"\\033[32mSua opçao:\\033[33m\")\n    return opc",
        "detail": "exe115.lib",
        "documentation": {}
    },
    {
        "label": "arq",
        "kind": 5,
        "importPath": "exe115.sistema",
        "description": "exe115.sistema",
        "peekOfCode": "arq = 'cursoemvideo.txt'\nif not arquivoExiste(arq): # se nao exite o arquivo\n    criarArquivo(arq) # caso nao tenha o arquivo ele vai criar com essa funçao\n#lib.cabeçario(\"SISTEMA ARQUIVO VERSAO V1.0\")\nwhile True:\n    respota = lib.menu(['Ver Pessoas Cadastradas', 'Cadastra nova Pessoas ','Sair do sistema'])\n    if respota == 1:  # opçao de listar o conteudo de um arquivo txt\n        lerArquivo(arq)\n    elif respota == 2:\n        lib.cabeçario('NOVO CADASTRO')",
        "detail": "exe115.sistema",
        "documentation": {}
    },
    {
        "label": "msg",
        "kind": 5,
        "importPath": "001",
        "description": "001",
        "peekOfCode": "msg = ('Ola mundo!')\nprint (msg)",
        "detail": "001",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h = bool(input('digite um valor: '))   #verdadeiro ou falso (bool)\nprint (h)\nh = input('dugite algo: ')\nprint(h .isnumeric())  # para mostrar que o campo e numeros True/False (.isnumeric)\nh = input('dugite algo: ')\nprint(h .isalpha())  # para mostrar que o campo e letras True/False (.isalpha)\nh = input('dugite algo: ')\nprint(h .isalnum())  # para mostrar que o campo e letras e numeros True/False (.isalnum)\nh = input('dugite algo: ')\nprint(h .isupper())  # para mostrar que o campo e letras MAIUSCULAS True/False (.isupper)",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h = input('dugite algo: ')\nprint(h .isnumeric())  # para mostrar que o campo e numeros True/False (.isnumeric)\nh = input('dugite algo: ')\nprint(h .isalpha())  # para mostrar que o campo e letras True/False (.isalpha)\nh = input('dugite algo: ')\nprint(h .isalnum())  # para mostrar que o campo e letras e numeros True/False (.isalnum)\nh = input('dugite algo: ')\nprint(h .isupper())  # para mostrar que o campo e letras MAIUSCULAS True/False (.isupper)\n#--------------------como eu fiz--------------------@\nh =input('digite algo: ')",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h = input('dugite algo: ')\nprint(h .isalpha())  # para mostrar que o campo e letras True/False (.isalpha)\nh = input('dugite algo: ')\nprint(h .isalnum())  # para mostrar que o campo e letras e numeros True/False (.isalnum)\nh = input('dugite algo: ')\nprint(h .isupper())  # para mostrar que o campo e letras MAIUSCULAS True/False (.isupper)\n#--------------------como eu fiz--------------------@\nh =input('digite algo: ')\nh1 = h .isspace()  \nh2 = h .isnumeric()",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h = input('dugite algo: ')\nprint(h .isalnum())  # para mostrar que o campo e letras e numeros True/False (.isalnum)\nh = input('dugite algo: ')\nprint(h .isupper())  # para mostrar que o campo e letras MAIUSCULAS True/False (.isupper)\n#--------------------como eu fiz--------------------@\nh =input('digite algo: ')\nh1 = h .isspace()  \nh2 = h .isnumeric()\nh3 = h .isalpha()\nh4 = h .isalnum()",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h = input('dugite algo: ')\nprint(h .isupper())  # para mostrar que o campo e letras MAIUSCULAS True/False (.isupper)\n#--------------------como eu fiz--------------------@\nh =input('digite algo: ')\nh1 = h .isspace()  \nh2 = h .isnumeric()\nh3 = h .isalpha()\nh4 = h .isalnum()\nh5 = h .isupper()\nh6 = h .islower()",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h1 = h .isspace()  \nh2 = h .isnumeric()\nh3 = h .isalpha()\nh4 = h .isalnum()\nh5 = h .isupper()\nh6 = h .islower()\nh7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h2 = h .isnumeric()\nh3 = h .isalpha()\nh4 = h .isalnum()\nh5 = h .isupper()\nh6 = h .islower()\nh7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))\nprint('É alfabetico? {} '.format(h3))",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h3 = h .isalpha()\nh4 = h .isalnum()\nh5 = h .isupper()\nh6 = h .islower()\nh7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))\nprint('É alfabetico? {} '.format(h3))\nprint('È alfanumerico ? {} '.format(h4))",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h4 = h .isalnum()\nh5 = h .isupper()\nh6 = h .islower()\nh7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))\nprint('É alfabetico? {} '.format(h3))\nprint('È alfanumerico ? {} '.format(h4))\nprint('Esta em maiusculas ? {} '.format(h5))",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h5",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h5 = h .isupper()\nh6 = h .islower()\nh7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))\nprint('É alfabetico? {} '.format(h3))\nprint('È alfanumerico ? {} '.format(h4))\nprint('Esta em maiusculas ? {} '.format(h5))\nprint('Esta em minusculas ? {} '.format(h6))",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h6",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h6 = h .islower()\nh7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))\nprint('É alfabetico? {} '.format(h3))\nprint('È alfanumerico ? {} '.format(h4))\nprint('Esta em maiusculas ? {} '.format(h5))\nprint('Esta em minusculas ? {} '.format(h6))\nprint('Esta capitalizado ? {} '.format(h7))",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h7",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h7 = h .istitle()\nprint('O tipo primitivo desse valor é {}' .format(type(h)))\nprint('Só tem espaço? {} '.format(h1))\nprint('E numerico? {} '.format(h2))\nprint('É alfabetico? {} '.format(h3))\nprint('È alfanumerico ? {} '.format(h4))\nprint('Esta em maiusculas ? {} '.format(h5))\nprint('Esta em minusculas ? {} '.format(h6))\nprint('Esta capitalizado ? {} '.format(h7))\n#-----------------------como o professor fez-----------------------@",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "004",
        "description": "004",
        "peekOfCode": "h = input('digite algo:')\nprint('O tipo primitivo desse valor e: ',type(h))\nprint('Só tem espaço?', h.isspace())\nprint('E numerico?', h.isnumeric())\nprint('E alfabetico? ', h.isalpha())\nprint('E alfanumerico? ', h.isalnum())\nprint('esta em maiusculo? ', h.isupper())\nprint('esta em minuscula? ', h.islower())\nprint('esta capitalizado? ', h.istitle())",
        "detail": "004",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "005",
        "description": "005",
        "peekOfCode": "h = int(input('difite um numero: '))\nh1 = h + +1\nh2 = h + -1\nprint('o valor sucesor do lumero {} e {} e o antecesor e {} ' .format(h , h1 , h2))",
        "detail": "005",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "005",
        "description": "005",
        "peekOfCode": "h1 = h + +1\nh2 = h + -1\nprint('o valor sucesor do lumero {} e {} e o antecesor e {} ' .format(h , h1 , h2))",
        "detail": "005",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "005",
        "description": "005",
        "peekOfCode": "h2 = h + -1\nprint('o valor sucesor do lumero {} e {} e o antecesor e {} ' .format(h , h1 , h2))",
        "detail": "005",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h = int(input('difite um numero: '))\nh1 = (h) + (h)\nh2 = (h) + (h) + (h)\nh3 = (h) ** (h)    #nao consegui resolver\nprint('O dobro de {} e {} ' .format(h , h1))\nprint('O triblo de {} e {} ' .format(h , h2))\nprint('A raiz quadrada de {} e {}'.format(h , h3))\n#-------------------------------como o professor fez ------------------------------------#\nh = int(input('digite um numero: '))\nh1 = h *2",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h1 = (h) + (h)\nh2 = (h) + (h) + (h)\nh3 = (h) ** (h)    #nao consegui resolver\nprint('O dobro de {} e {} ' .format(h , h1))\nprint('O triblo de {} e {} ' .format(h , h2))\nprint('A raiz quadrada de {} e {}'.format(h , h3))\n#-------------------------------como o professor fez ------------------------------------#\nh = int(input('digite um numero: '))\nh1 = h *2\nh2 = h *3",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h2 = (h) + (h) + (h)\nh3 = (h) ** (h)    #nao consegui resolver\nprint('O dobro de {} e {} ' .format(h , h1))\nprint('O triblo de {} e {} ' .format(h , h2))\nprint('A raiz quadrada de {} e {}'.format(h , h3))\n#-------------------------------como o professor fez ------------------------------------#\nh = int(input('digite um numero: '))\nh1 = h *2\nh2 = h *3\nh3 = h**(1/2)",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h3 = (h) ** (h)    #nao consegui resolver\nprint('O dobro de {} e {} ' .format(h , h1))\nprint('O triblo de {} e {} ' .format(h , h2))\nprint('A raiz quadrada de {} e {}'.format(h , h3))\n#-------------------------------como o professor fez ------------------------------------#\nh = int(input('digite um numero: '))\nh1 = h *2\nh2 = h *3\nh3 = h**(1/2)\nprint('O dobro de {} vale {} '. format(h , h1))",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h = int(input('digite um numero: '))\nh1 = h *2\nh2 = h *3\nh3 = h**(1/2)\nprint('O dobro de {} vale {} '. format(h , h1))\nprint ('O trilho de {} vale {}. A raiz quadrada de {} e igual {:.2f} '.format(h, h2 , h ,h3))\n#-------------------------------outrp jeito de fazer ------------------------------------#\nh = int(input('digite um numero: '))\nprint('O dobro de {} vale {} '. format(h ,(h*2)))\nprint ('O trilho de {} vale {}. \\nA raiz quadrada de {} e igual {:.2f} '.format(h, (h*3) , h, (h**(1/2))))",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h1 = h *2\nh2 = h *3\nh3 = h**(1/2)\nprint('O dobro de {} vale {} '. format(h , h1))\nprint ('O trilho de {} vale {}. A raiz quadrada de {} e igual {:.2f} '.format(h, h2 , h ,h3))\n#-------------------------------outrp jeito de fazer ------------------------------------#\nh = int(input('digite um numero: '))\nprint('O dobro de {} vale {} '. format(h ,(h*2)))\nprint ('O trilho de {} vale {}. \\nA raiz quadrada de {} e igual {:.2f} '.format(h, (h*3) , h, (h**(1/2))))",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h2 = h *3\nh3 = h**(1/2)\nprint('O dobro de {} vale {} '. format(h , h1))\nprint ('O trilho de {} vale {}. A raiz quadrada de {} e igual {:.2f} '.format(h, h2 , h ,h3))\n#-------------------------------outrp jeito de fazer ------------------------------------#\nh = int(input('digite um numero: '))\nprint('O dobro de {} vale {} '. format(h ,(h*2)))\nprint ('O trilho de {} vale {}. \\nA raiz quadrada de {} e igual {:.2f} '.format(h, (h*3) , h, (h**(1/2))))",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h3 = h**(1/2)\nprint('O dobro de {} vale {} '. format(h , h1))\nprint ('O trilho de {} vale {}. A raiz quadrada de {} e igual {:.2f} '.format(h, h2 , h ,h3))\n#-------------------------------outrp jeito de fazer ------------------------------------#\nh = int(input('digite um numero: '))\nprint('O dobro de {} vale {} '. format(h ,(h*2)))\nprint ('O trilho de {} vale {}. \\nA raiz quadrada de {} e igual {:.2f} '.format(h, (h*3) , h, (h**(1/2))))",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "006",
        "description": "006",
        "peekOfCode": "h = int(input('digite um numero: '))\nprint('O dobro de {} vale {} '. format(h ,(h*2)))\nprint ('O trilho de {} vale {}. \\nA raiz quadrada de {} e igual {:.2f} '.format(h, (h*3) , h, (h**(1/2))))",
        "detail": "006",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "007",
        "description": "007",
        "peekOfCode": "h = float(input('Digite a primeira nota  nota do aluno: '))\nh1 = float(input('Digite a segunda nota do aluno: '))\nh2 = h + h1\nprint('a media entre o valor {} mais o valor {} da {}'.format(h, h1 ,(h2/2)))\n#-------------------- como o professor fez--------------------------\nh = float(input('Digite a primeira nota  nota do aluno: '))\nh1 = float(input('Digite a segunda nota do aluno: '))\nh2 = (h + h1) / 2\nprint('A media entre {} mais o valor {} e igual {} '.format(h, h1, h2))",
        "detail": "007",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "007",
        "description": "007",
        "peekOfCode": "h1 = float(input('Digite a segunda nota do aluno: '))\nh2 = h + h1\nprint('a media entre o valor {} mais o valor {} da {}'.format(h, h1 ,(h2/2)))\n#-------------------- como o professor fez--------------------------\nh = float(input('Digite a primeira nota  nota do aluno: '))\nh1 = float(input('Digite a segunda nota do aluno: '))\nh2 = (h + h1) / 2\nprint('A media entre {} mais o valor {} e igual {} '.format(h, h1, h2))",
        "detail": "007",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "007",
        "description": "007",
        "peekOfCode": "h2 = h + h1\nprint('a media entre o valor {} mais o valor {} da {}'.format(h, h1 ,(h2/2)))\n#-------------------- como o professor fez--------------------------\nh = float(input('Digite a primeira nota  nota do aluno: '))\nh1 = float(input('Digite a segunda nota do aluno: '))\nh2 = (h + h1) / 2\nprint('A media entre {} mais o valor {} e igual {} '.format(h, h1, h2))",
        "detail": "007",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "007",
        "description": "007",
        "peekOfCode": "h = float(input('Digite a primeira nota  nota do aluno: '))\nh1 = float(input('Digite a segunda nota do aluno: '))\nh2 = (h + h1) / 2\nprint('A media entre {} mais o valor {} e igual {} '.format(h, h1, h2))",
        "detail": "007",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "007",
        "description": "007",
        "peekOfCode": "h1 = float(input('Digite a segunda nota do aluno: '))\nh2 = (h + h1) / 2\nprint('A media entre {} mais o valor {} e igual {} '.format(h, h1, h2))",
        "detail": "007",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "007",
        "description": "007",
        "peekOfCode": "h2 = (h + h1) / 2\nprint('A media entre {} mais o valor {} e igual {} '.format(h, h1, h2))",
        "detail": "007",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "008",
        "description": "008",
        "peekOfCode": "h = float(input('digite uma distancia em metros: '))\nh1 = h *100\nh2 = h1 *1000\nprint('{} Metro(os) \\n{} centimetros \\n{} milimitros '.format(h, h1, h2))\n#------------------------como o professor fez ---------------------------------------------\nmedia = float(input(' digite uma distancia: '))\ncm = media *100\nmm = media *1000\nprint('A media de {}M e corresponte a {}cm e {}mm '.format (media, cm, mm))",
        "detail": "008",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "008",
        "description": "008",
        "peekOfCode": "h1 = h *100\nh2 = h1 *1000\nprint('{} Metro(os) \\n{} centimetros \\n{} milimitros '.format(h, h1, h2))\n#------------------------como o professor fez ---------------------------------------------\nmedia = float(input(' digite uma distancia: '))\ncm = media *100\nmm = media *1000\nprint('A media de {}M e corresponte a {}cm e {}mm '.format (media, cm, mm))",
        "detail": "008",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "008",
        "description": "008",
        "peekOfCode": "h2 = h1 *1000\nprint('{} Metro(os) \\n{} centimetros \\n{} milimitros '.format(h, h1, h2))\n#------------------------como o professor fez ---------------------------------------------\nmedia = float(input(' digite uma distancia: '))\ncm = media *100\nmm = media *1000\nprint('A media de {}M e corresponte a {}cm e {}mm '.format (media, cm, mm))",
        "detail": "008",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "008",
        "description": "008",
        "peekOfCode": "media = float(input(' digite uma distancia: '))\ncm = media *100\nmm = media *1000\nprint('A media de {}M e corresponte a {}cm e {}mm '.format (media, cm, mm))",
        "detail": "008",
        "documentation": {}
    },
    {
        "label": "cm",
        "kind": 5,
        "importPath": "008",
        "description": "008",
        "peekOfCode": "cm = media *100\nmm = media *1000\nprint('A media de {}M e corresponte a {}cm e {}mm '.format (media, cm, mm))",
        "detail": "008",
        "documentation": {}
    },
    {
        "label": "mm",
        "kind": 5,
        "importPath": "008",
        "description": "008",
        "peekOfCode": "mm = media *1000\nprint('A media de {}M e corresponte a {}cm e {}mm '.format (media, cm, mm))",
        "detail": "008",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h = int(input('digite um valor pra ver a  taboada: '))\nh1 = h *1\nh2 = h *2\nh3 = h *3\nh4 = h *4\nh5 = h *5\nh6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h1 = h *1\nh2 = h *2\nh3 = h *3\nh4 = h *4\nh5 = h *5\nh6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h2 = h *2\nh3 = h *3\nh4 = h *4\nh5 = h *5\nh6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h3 = h *3\nh4 = h *4\nh5 = h *5\nh6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h4 = h *4\nh5 = h *5\nh6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h5",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h5 = h *5\nh6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))\nprint('{} x 3 = {} '.format(h,h3))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h6",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h6 = h *6\nh7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))\nprint('{} x 3 = {} '.format(h,h3))\nprint('{} x 4 = {} '.format(h,h4))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h7",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h7 = h *7\nh8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))\nprint('{} x 3 = {} '.format(h,h3))\nprint('{} x 4 = {} '.format(h,h4))\nprint('{} x 5 = {} '.format(h,h5))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h8",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h8 = h *8\nh9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))\nprint('{} x 3 = {} '.format(h,h3))\nprint('{} x 4 = {} '.format(h,h4))\nprint('{} x 5 = {} '.format(h,h5))\nprint('{} x 6 = {} '.format(h,h6))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h9",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h9 = h *9\nh10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))\nprint('{} x 3 = {} '.format(h,h3))\nprint('{} x 4 = {} '.format(h,h4))\nprint('{} x 5 = {} '.format(h,h5))\nprint('{} x 6 = {} '.format(h,h6))\nprint('{} x 7 = {} '.format(h,h7))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h10",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h10 = h *10\nprint('-----------------')\nprint('{} x 1 = {} '.format(h,h1))\nprint('{} x 2 = {} '.format(h,h2))\nprint('{} x 3 = {} '.format(h,h3))\nprint('{} x 4 = {} '.format(h,h4))\nprint('{} x 5 = {} '.format(h,h5))\nprint('{} x 6 = {} '.format(h,h6))\nprint('{} x 7 = {} '.format(h,h7))\nprint('{} x 8 = {} '.format(h,h8))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "009",
        "description": "009",
        "peekOfCode": "h = int(input('Digite um valor para ver sua taboada: '))\nprint('{} x {} = {}'.format(h, 1, h*1))\nprint('{} x {} = {}'.format(h, 2, h*2))\nprint('{} x {} = {}'.format(h, 3, h*3))\nprint('{} x {} = {}'.format(h, 4, h*4))\nprint('{} x {} = {}'.format(h, 5, h*5))\nprint('{} x {} = {}'.format(h, 6, h*6))\nprint('{} x {} = {}'.format(h, 7, h*7))\nprint('{} x {} = {}'.format(h, 8, h*8))\nprint('{} x {} = {}'.format(h, 9, h*9))",
        "detail": "009",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "010",
        "description": "010",
        "peekOfCode": "h = float(input('quanto vc tem na carteira? '))\nh1 = h *4.92\nprint('vc tem US:{:.2f} Dollares \\nVocê pode gastar RS::{} Reais '.format(h,h1))\n#---------------------------como o professor fez----------------------------",
        "detail": "010",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "010",
        "description": "010",
        "peekOfCode": "h1 = h *4.92\nprint('vc tem US:{:.2f} Dollares \\nVocê pode gastar RS::{} Reais '.format(h,h1))\n#---------------------------como o professor fez----------------------------",
        "detail": "010",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "h = float(input('Digite a largura da sua parede: '))\nh1 = float(input('Digite a altura da sua parede: '))\nh3 = (h*h1)/2\nprint('a medida da sua parede e :  {:.0f} Metros quadrados '.format(h*h1))\nprint('E nessesario : {:.0f} Litros de tinta'.format(h3*1))\nprint('A cada 2 Metros quadrados se usa 1L de tinta')\n#---------------------------como o professor fez----------------------------\nlarg = float(input('Largura da parede: '))\nalt = float(input('Altura da parede:'))\narea = larg*alt",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "h1 = float(input('Digite a altura da sua parede: '))\nh3 = (h*h1)/2\nprint('a medida da sua parede e :  {:.0f} Metros quadrados '.format(h*h1))\nprint('E nessesario : {:.0f} Litros de tinta'.format(h3*1))\nprint('A cada 2 Metros quadrados se usa 1L de tinta')\n#---------------------------como o professor fez----------------------------\nlarg = float(input('Largura da parede: '))\nalt = float(input('Altura da parede:'))\narea = larg*alt\nprint('Sua parede tem a dimenssao de {} x {} e sua area e de {} m2'.format(larg,alt,area))",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "h3 = (h*h1)/2\nprint('a medida da sua parede e :  {:.0f} Metros quadrados '.format(h*h1))\nprint('E nessesario : {:.0f} Litros de tinta'.format(h3*1))\nprint('A cada 2 Metros quadrados se usa 1L de tinta')\n#---------------------------como o professor fez----------------------------\nlarg = float(input('Largura da parede: '))\nalt = float(input('Altura da parede:'))\narea = larg*alt\nprint('Sua parede tem a dimenssao de {} x {} e sua area e de {} m2'.format(larg,alt,area))\ntinta = area /2",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "larg",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "larg = float(input('Largura da parede: '))\nalt = float(input('Altura da parede:'))\narea = larg*alt\nprint('Sua parede tem a dimenssao de {} x {} e sua area e de {} m2'.format(larg,alt,area))\ntinta = area /2\nprint('Para pintar essa parede, voce precisarar de {}L de tinta'.format(tinta))",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "alt",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "alt = float(input('Altura da parede:'))\narea = larg*alt\nprint('Sua parede tem a dimenssao de {} x {} e sua area e de {} m2'.format(larg,alt,area))\ntinta = area /2\nprint('Para pintar essa parede, voce precisarar de {}L de tinta'.format(tinta))",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "area = larg*alt\nprint('Sua parede tem a dimenssao de {} x {} e sua area e de {} m2'.format(larg,alt,area))\ntinta = area /2\nprint('Para pintar essa parede, voce precisarar de {}L de tinta'.format(tinta))",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "tinta",
        "kind": 5,
        "importPath": "011",
        "description": "011",
        "peekOfCode": "tinta = area /2\nprint('Para pintar essa parede, voce precisarar de {}L de tinta'.format(tinta))",
        "detail": "011",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "012",
        "description": "012",
        "peekOfCode": "h = float(input('Digite o valor do produto: '))\nh1 = h*5\nh2 = h1/100\nh3 = h-h2\nprint('Valor do produto R$:{:.2f} Reais' .format(h))\nprint('Com desconto de 5%  R$:{:.2f} Reais '.format(h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Qual e o preço do produto: '))\nnovo = preço -(preço *5 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "012",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "012",
        "description": "012",
        "peekOfCode": "h1 = h*5\nh2 = h1/100\nh3 = h-h2\nprint('Valor do produto R$:{:.2f} Reais' .format(h))\nprint('Com desconto de 5%  R$:{:.2f} Reais '.format(h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Qual e o preço do produto: '))\nnovo = preço -(preço *5 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "012",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "012",
        "description": "012",
        "peekOfCode": "h2 = h1/100\nh3 = h-h2\nprint('Valor do produto R$:{:.2f} Reais' .format(h))\nprint('Com desconto de 5%  R$:{:.2f} Reais '.format(h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Qual e o preço do produto: '))\nnovo = preço -(preço *5 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "012",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "012",
        "description": "012",
        "peekOfCode": "h3 = h-h2\nprint('Valor do produto R$:{:.2f} Reais' .format(h))\nprint('Com desconto de 5%  R$:{:.2f} Reais '.format(h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Qual e o preço do produto: '))\nnovo = preço -(preço *5 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "012",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "012",
        "description": "012",
        "peekOfCode": "preço = float(input('Qual e o preço do produto: '))\nnovo = preço -(preço *5 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "012",
        "documentation": {}
    },
    {
        "label": "novo",
        "kind": 5,
        "importPath": "012",
        "description": "012",
        "peekOfCode": "novo = preço -(preço *5 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "012",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "013",
        "description": "013",
        "peekOfCode": "h = float(input('Quanto e seu salrario? : '))\nh1 = h*15\nh2 = h1/100\nh3 = h+h2\nprint('Seu salario de R$:{:.3f} agora e R$: {:.3f} vc teve 15% de aumento'.format(h,h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Quanto e seu salario: '))\nnovo = preço +(preço *15 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "013",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "013",
        "description": "013",
        "peekOfCode": "h1 = h*15\nh2 = h1/100\nh3 = h+h2\nprint('Seu salario de R$:{:.3f} agora e R$: {:.3f} vc teve 15% de aumento'.format(h,h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Quanto e seu salario: '))\nnovo = preço +(preço *15 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "013",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "013",
        "description": "013",
        "peekOfCode": "h2 = h1/100\nh3 = h+h2\nprint('Seu salario de R$:{:.3f} agora e R$: {:.3f} vc teve 15% de aumento'.format(h,h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Quanto e seu salario: '))\nnovo = preço +(preço *15 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "013",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "013",
        "description": "013",
        "peekOfCode": "h3 = h+h2\nprint('Seu salario de R$:{:.3f} agora e R$: {:.3f} vc teve 15% de aumento'.format(h,h3))\n#-------------------Como o professor fez---------------------\npreço = float(input('Quanto e seu salario: '))\nnovo = preço +(preço *15 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "013",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "013",
        "description": "013",
        "peekOfCode": "preço = float(input('Quanto e seu salario: '))\nnovo = preço +(preço *15 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "013",
        "documentation": {}
    },
    {
        "label": "novo",
        "kind": 5,
        "importPath": "013",
        "description": "013",
        "peekOfCode": "novo = preço +(preço *15 /100)\nprint('O produto que custava R${}  na promoçao de 5% vai custar R${}'.format(preço,novo))",
        "detail": "013",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "014",
        "description": "014",
        "peekOfCode": "h = float(input('digite a temperatura ºC:'))\nh1 = (h*9/5)\nprint('a Temporatura em {}°C'.format(h))\nprint('Convertido para °F da {}°F'.format(h1+32))\n#-------------como o professor fez-------------------------\nc = float(input('digite a temperatura °C '))\nf = ((9 * c) / 5) + 32\nprint('A temperatura em {}°C e correspondente a {}°F'.format(c,f))",
        "detail": "014",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "014",
        "description": "014",
        "peekOfCode": "h1 = (h*9/5)\nprint('a Temporatura em {}°C'.format(h))\nprint('Convertido para °F da {}°F'.format(h1+32))\n#-------------como o professor fez-------------------------\nc = float(input('digite a temperatura °C '))\nf = ((9 * c) / 5) + 32\nprint('A temperatura em {}°C e correspondente a {}°F'.format(c,f))",
        "detail": "014",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "014",
        "description": "014",
        "peekOfCode": "c = float(input('digite a temperatura °C '))\nf = ((9 * c) / 5) + 32\nprint('A temperatura em {}°C e correspondente a {}°F'.format(c,f))",
        "detail": "014",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "014",
        "description": "014",
        "peekOfCode": "f = ((9 * c) / 5) + 32\nprint('A temperatura em {}°C e correspondente a {}°F'.format(c,f))",
        "detail": "014",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "015",
        "description": "015",
        "peekOfCode": "h = float(input('Quantos Km vc andou? '))\nh1 = int(input('Quantos dias vc ficou com o carro? '))\nh2 = h*0.15\nh3 = h1*60.00\nprint('vc ficou {} Dias R$:{:.2f}'.format(h1,h3))\nprint('vc andou {}Km R$:{:.2f}'.format(h,h2))\nprint('Seu custo foi de R$:{:.2f}'.format(h2+h3))\n#-------------como o professor fez-------------------------\ndias = int(input('quantos dias alugados? '))\nkm = float(input('quantos dias rodados? '))",
        "detail": "015",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "015",
        "description": "015",
        "peekOfCode": "h1 = int(input('Quantos dias vc ficou com o carro? '))\nh2 = h*0.15\nh3 = h1*60.00\nprint('vc ficou {} Dias R$:{:.2f}'.format(h1,h3))\nprint('vc andou {}Km R$:{:.2f}'.format(h,h2))\nprint('Seu custo foi de R$:{:.2f}'.format(h2+h3))\n#-------------como o professor fez-------------------------\ndias = int(input('quantos dias alugados? '))\nkm = float(input('quantos dias rodados? '))\npago =(dias *60) + (km *0.15)",
        "detail": "015",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "015",
        "description": "015",
        "peekOfCode": "h2 = h*0.15\nh3 = h1*60.00\nprint('vc ficou {} Dias R$:{:.2f}'.format(h1,h3))\nprint('vc andou {}Km R$:{:.2f}'.format(h,h2))\nprint('Seu custo foi de R$:{:.2f}'.format(h2+h3))\n#-------------como o professor fez-------------------------\ndias = int(input('quantos dias alugados? '))\nkm = float(input('quantos dias rodados? '))\npago =(dias *60) + (km *0.15)\nprint('O total a pagar e de {}'.format(pago))",
        "detail": "015",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "015",
        "description": "015",
        "peekOfCode": "h3 = h1*60.00\nprint('vc ficou {} Dias R$:{:.2f}'.format(h1,h3))\nprint('vc andou {}Km R$:{:.2f}'.format(h,h2))\nprint('Seu custo foi de R$:{:.2f}'.format(h2+h3))\n#-------------como o professor fez-------------------------\ndias = int(input('quantos dias alugados? '))\nkm = float(input('quantos dias rodados? '))\npago =(dias *60) + (km *0.15)\nprint('O total a pagar e de {}'.format(pago))",
        "detail": "015",
        "documentation": {}
    },
    {
        "label": "dias",
        "kind": 5,
        "importPath": "015",
        "description": "015",
        "peekOfCode": "dias = int(input('quantos dias alugados? '))\nkm = float(input('quantos dias rodados? '))\npago =(dias *60) + (km *0.15)\nprint('O total a pagar e de {}'.format(pago))",
        "detail": "015",
        "documentation": {}
    },
    {
        "label": "km",
        "kind": 5,
        "importPath": "015",
        "description": "015",
        "peekOfCode": "km = float(input('quantos dias rodados? '))\npago =(dias *60) + (km *0.15)\nprint('O total a pagar e de {}'.format(pago))",
        "detail": "015",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "016",
        "description": "016",
        "peekOfCode": "h = float(input('Digite um valor Real: '))\nh1 = trunc(h)\nprint('o valor real de  {:.3f}'.format(h))\nprint('O numero {} tem a parte inteira {} '.format(h,h1))\n#-------------como o professor fez-------------------------\nimport math\nnum = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,math.trunc(num)))\nnum = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,int(num)))",
        "detail": "016",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "016",
        "description": "016",
        "peekOfCode": "h1 = trunc(h)\nprint('o valor real de  {:.3f}'.format(h))\nprint('O numero {} tem a parte inteira {} '.format(h,h1))\n#-------------como o professor fez-------------------------\nimport math\nnum = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,math.trunc(num)))\nnum = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,int(num)))",
        "detail": "016",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "016",
        "description": "016",
        "peekOfCode": "num = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,math.trunc(num)))\nnum = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,int(num)))",
        "detail": "016",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "016",
        "description": "016",
        "peekOfCode": "num = float(input('Digite um valor: '))\nprint('O valor digitado e {} e sua parte inteira e {}'.format(num,int(num)))",
        "detail": "016",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "017",
        "description": "017",
        "peekOfCode": "h = float(input('Comprimento do cateto oposto: '))\nh1 = float(input('Comprimento cateto oposto: '))\nh2 = math.hypot(h, h1)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))\nh = float(input('Comprimento do cateto oposto: '))\nh1 = float(input('Comprimento cateto oposto: '))\nh2 = (h ** 2 + h1 ** 2) ** (1/2)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))",
        "detail": "017",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "017",
        "description": "017",
        "peekOfCode": "h1 = float(input('Comprimento cateto oposto: '))\nh2 = math.hypot(h, h1)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))\nh = float(input('Comprimento do cateto oposto: '))\nh1 = float(input('Comprimento cateto oposto: '))\nh2 = (h ** 2 + h1 ** 2) ** (1/2)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))",
        "detail": "017",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "017",
        "description": "017",
        "peekOfCode": "h2 = math.hypot(h, h1)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))\nh = float(input('Comprimento do cateto oposto: '))\nh1 = float(input('Comprimento cateto oposto: '))\nh2 = (h ** 2 + h1 ** 2) ** (1/2)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))",
        "detail": "017",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "017",
        "description": "017",
        "peekOfCode": "h = float(input('Comprimento do cateto oposto: '))\nh1 = float(input('Comprimento cateto oposto: '))\nh2 = (h ** 2 + h1 ** 2) ** (1/2)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))",
        "detail": "017",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "017",
        "description": "017",
        "peekOfCode": "h1 = float(input('Comprimento cateto oposto: '))\nh2 = (h ** 2 + h1 ** 2) ** (1/2)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))",
        "detail": "017",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "017",
        "description": "017",
        "peekOfCode": "h2 = (h ** 2 + h1 ** 2) ** (1/2)\nprint('A ipotenusa vai medir {:.2f}'.format(h2))",
        "detail": "017",
        "documentation": {}
    },
    {
        "label": "angulo",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "angulo = float(input('Digite um angulo: '))\nseno = math.sin(math.radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))\nconceno = math.cos(math.radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = math.tan(math.radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))\nfrom math import radians, sin, cos, tan\nangulo = float(input('Digite um angulo: '))\nseno = sin(radians(angulo))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "seno",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "seno = math.sin(math.radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))\nconceno = math.cos(math.radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = math.tan(math.radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))\nfrom math import radians, sin, cos, tan\nangulo = float(input('Digite um angulo: '))\nseno = sin(radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "conceno",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "conceno = math.cos(math.radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = math.tan(math.radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))\nfrom math import radians, sin, cos, tan\nangulo = float(input('Digite um angulo: '))\nseno = sin(radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))\nconceno = cos(radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "tangente",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "tangente = math.tan(math.radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))\nfrom math import radians, sin, cos, tan\nangulo = float(input('Digite um angulo: '))\nseno = sin(radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))\nconceno = cos(radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = tan(radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "angulo",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "angulo = float(input('Digite um angulo: '))\nseno = sin(radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))\nconceno = cos(radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = tan(radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "seno",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "seno = sin(radians(angulo))\nprint('O angulo e {} e o  seno e {:.2f}  '.format(angulo, seno))\nconceno = cos(radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = tan(radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "conceno",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "conceno = cos(radians(angulo))\nprint('O angulo e {} Conceno e {:.2f} '.format(angulo, conceno))\ntangente = tan(radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "tangente",
        "kind": 5,
        "importPath": "018",
        "description": "018",
        "peekOfCode": "tangente = tan(radians(angulo))\nprint('O angulo e {} A tangente e {:.2f} '.format(angulo, tangente))",
        "detail": "018",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h = input('digite o nome dos alunos: \\n1:')\nh1 = input('2:')\nh2 = input('3:')\nh3 = input('4:')\nh4 = (h,h1,h2,h3) #[usar esse nodo de [] todos dentro sera sorteados]\nh5 = random.choice(h4)\nprint('O aluno esconhido foi o {}'.format(h5))\n#-------------como o professor fez----------------\nfrom random import choice\nn1 = str(input('primeiro aluno: '))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h1 = input('2:')\nh2 = input('3:')\nh3 = input('4:')\nh4 = (h,h1,h2,h3) #[usar esse nodo de [] todos dentro sera sorteados]\nh5 = random.choice(h4)\nprint('O aluno esconhido foi o {}'.format(h5))\n#-------------como o professor fez----------------\nfrom random import choice\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h2 = input('3:')\nh3 = input('4:')\nh4 = (h,h1,h2,h3) #[usar esse nodo de [] todos dentro sera sorteados]\nh5 = random.choice(h4)\nprint('O aluno esconhido foi o {}'.format(h5))\n#-------------como o professor fez----------------\nfrom random import choice\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h3 = input('4:')\nh4 = (h,h1,h2,h3) #[usar esse nodo de [] todos dentro sera sorteados]\nh5 = random.choice(h4)\nprint('O aluno esconhido foi o {}'.format(h5))\n#-------------como o professor fez----------------\nfrom random import choice\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nh4 = str(input('quarto aluno'))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h4 = (h,h1,h2,h3) #[usar esse nodo de [] todos dentro sera sorteados]\nh5 = random.choice(h4)\nprint('O aluno esconhido foi o {}'.format(h5))\n#-------------como o professor fez----------------\nfrom random import choice\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nh4 = str(input('quarto aluno'))\nlista = [h1,h2,h3,h4]",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h5",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h5 = random.choice(h4)\nprint('O aluno esconhido foi o {}'.format(h5))\n#-------------como o professor fez----------------\nfrom random import choice\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nh4 = str(input('quarto aluno'))\nlista = [h1,h2,h3,h4]\nescolhido = choice(lista)",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "n1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nh4 = str(input('quarto aluno'))\nlista = [h1,h2,h3,h4]\nescolhido = choice(lista)\nprint('O valuno escolhidofoi {} '.format(escolhido))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "n2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nh4 = str(input('quarto aluno'))\nlista = [h1,h2,h3,h4]\nescolhido = choice(lista)\nprint('O valuno escolhidofoi {} '.format(escolhido))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "n3 = str(input('terceiro aluno: '))\nh4 = str(input('quarto aluno'))\nlista = [h1,h2,h3,h4]\nescolhido = choice(lista)\nprint('O valuno escolhidofoi {} '.format(escolhido))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "h4 = str(input('quarto aluno'))\nlista = [h1,h2,h3,h4]\nescolhido = choice(lista)\nprint('O valuno escolhidofoi {} '.format(escolhido))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "lista = [h1,h2,h3,h4]\nescolhido = choice(lista)\nprint('O valuno escolhidofoi {} '.format(escolhido))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "escolhido",
        "kind": 5,
        "importPath": "019",
        "description": "019",
        "peekOfCode": "escolhido = choice(lista)\nprint('O valuno escolhidofoi {} '.format(escolhido))",
        "detail": "019",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "h = str(input('Primeiro aluno: '))\nh1 = str(input('segundo aluno: '))\nh2 = str(input('terceiro aluno: '))\nh3 = str(input('quarto aluno: '))\nh4 = [h,h1,h2,h3]\nshuffle(h4)\nprint ('A orden de apresentaçao sera')\nprint(h4)\n#------------- como o professor fez----------------\nfrom random import shuffle",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "h1 = str(input('segundo aluno: '))\nh2 = str(input('terceiro aluno: '))\nh3 = str(input('quarto aluno: '))\nh4 = [h,h1,h2,h3]\nshuffle(h4)\nprint ('A orden de apresentaçao sera')\nprint(h4)\n#------------- como o professor fez----------------\nfrom random import shuffle\nn1 = str(input('primeiro aluno: '))",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "h2 = str(input('terceiro aluno: '))\nh3 = str(input('quarto aluno: '))\nh4 = [h,h1,h2,h3]\nshuffle(h4)\nprint ('A orden de apresentaçao sera')\nprint(h4)\n#------------- como o professor fez----------------\nfrom random import shuffle\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "h3 = str(input('quarto aluno: '))\nh4 = [h,h1,h2,h3]\nshuffle(h4)\nprint ('A orden de apresentaçao sera')\nprint(h4)\n#------------- como o professor fez----------------\nfrom random import shuffle\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "h4 = [h,h1,h2,h3]\nshuffle(h4)\nprint ('A orden de apresentaçao sera')\nprint(h4)\n#------------- como o professor fez----------------\nfrom random import shuffle\nn1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nn4 = str(input('quarto aluno: '))",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "n1 = str(input('primeiro aluno: '))\nn2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nn4 = str(input('quarto aluno: '))\nlista = [n1,n2,n3,n4]\nshuffle(lista)\nprint('A ordem de apresentaçao sera')\nprint(lista)",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "n2 = str(input('segundo aluno: '))\nn3 = str(input('terceiro aluno: '))\nn4 = str(input('quarto aluno: '))\nlista = [n1,n2,n3,n4]\nshuffle(lista)\nprint('A ordem de apresentaçao sera')\nprint(lista)",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "n3 = str(input('terceiro aluno: '))\nn4 = str(input('quarto aluno: '))\nlista = [n1,n2,n3,n4]\nshuffle(lista)\nprint('A ordem de apresentaçao sera')\nprint(lista)",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "n4",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "n4 = str(input('quarto aluno: '))\nlista = [n1,n2,n3,n4]\nshuffle(lista)\nprint('A ordem de apresentaçao sera')\nprint(lista)",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "020",
        "description": "020",
        "peekOfCode": "lista = [n1,n2,n3,n4]\nshuffle(lista)\nprint('A ordem de apresentaçao sera')\nprint(lista)",
        "detail": "020",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "022",
        "description": "022",
        "peekOfCode": "nome = str(input('digite seu nome completo: '))\nprint(nome.upper()) #maisculas\nprint(nome.lower()) #minisculas\nnome1 = nome.split() #colocando em grupos\nnome2 = \"\".join(nome1) #reagrupando as palavras\nprint(len(nome2))  #quantas letras tem no nome\nprint(len(nome1[0])) #quabtas letras tem a primeiro nome\n#-------------- como o professor fez  --------------------------\nnome = str(input('Digite seu nome completo: ')).strip()\nprint('analizando seu nome....')",
        "detail": "022",
        "documentation": {}
    },
    {
        "label": "nome1",
        "kind": 5,
        "importPath": "022",
        "description": "022",
        "peekOfCode": "nome1 = nome.split() #colocando em grupos\nnome2 = \"\".join(nome1) #reagrupando as palavras\nprint(len(nome2))  #quantas letras tem no nome\nprint(len(nome1[0])) #quabtas letras tem a primeiro nome\n#-------------- como o professor fez  --------------------------\nnome = str(input('Digite seu nome completo: ')).strip()\nprint('analizando seu nome....')\nprint('Seu nome em maiusculas: {} '.format(nome.upper()))\nprint('Seu nome em minusculas: {}'.format(nome.lower()))\nprint('Seu nome tem ao todo {} letras'.format(len(nome)-nome.count(' ')))",
        "detail": "022",
        "documentation": {}
    },
    {
        "label": "nome2",
        "kind": 5,
        "importPath": "022",
        "description": "022",
        "peekOfCode": "nome2 = \"\".join(nome1) #reagrupando as palavras\nprint(len(nome2))  #quantas letras tem no nome\nprint(len(nome1[0])) #quabtas letras tem a primeiro nome\n#-------------- como o professor fez  --------------------------\nnome = str(input('Digite seu nome completo: ')).strip()\nprint('analizando seu nome....')\nprint('Seu nome em maiusculas: {} '.format(nome.upper()))\nprint('Seu nome em minusculas: {}'.format(nome.lower()))\nprint('Seu nome tem ao todo {} letras'.format(len(nome)-nome.count(' ')))\nprint('Seu primeiro nome tem {} Letras '.format(nome.find(' ')))",
        "detail": "022",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "022",
        "description": "022",
        "peekOfCode": "nome = str(input('Digite seu nome completo: ')).strip()\nprint('analizando seu nome....')\nprint('Seu nome em maiusculas: {} '.format(nome.upper()))\nprint('Seu nome em minusculas: {}'.format(nome.lower()))\nprint('Seu nome tem ao todo {} letras'.format(len(nome)-nome.count(' ')))\nprint('Seu primeiro nome tem {} Letras '.format(nome.find(' ')))",
        "detail": "022",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "023",
        "description": "023",
        "peekOfCode": "h = input('digite um numero: ')\nprint('unidade: {} '.format(h[3]))\nprint('dezena: {}'.format(h[2]))\nprint('centena: {}'.format(h[1]))\nprint('milhar: {}'.format(h[0]))\n#-------------- como o professor fez  --------------------------\nnum = int(input('Digite um numero: '))\nn =str(num)\nprint('Analizando o numero: {}'.format(num))\nprint('Unidade: {} '.format(h[3]))",
        "detail": "023",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "023",
        "description": "023",
        "peekOfCode": "num = int(input('Digite um numero: '))\nn =str(num)\nprint('Analizando o numero: {}'.format(num))\nprint('Unidade: {} '.format(h[3]))\nprint('Dezena: {} '.format(n[2]))\nprint('Centena: {}'.format(n[1]))\nprint('Milhar: {} '.format(n[0]))\nnum =int(input('Digite um numero: '))\nh = num // 1 % 10\nh1 = num // 10 % 10",
        "detail": "023",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "023",
        "description": "023",
        "peekOfCode": "h = num // 1 % 10\nh1 = num // 10 % 10\nh2 = num // 100 % 10\nh3 = num // 1000 % 10\nprint('Analizando o numero: {}'.format(num))\nprint('Unidade: {} '.format(h))\nprint('Dezena: {} '.format(h1))\nprint('Centena: {}'.format(h2))\nprint('Milhar: {} '.format(h3))",
        "detail": "023",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "023",
        "description": "023",
        "peekOfCode": "h1 = num // 10 % 10\nh2 = num // 100 % 10\nh3 = num // 1000 % 10\nprint('Analizando o numero: {}'.format(num))\nprint('Unidade: {} '.format(h))\nprint('Dezena: {} '.format(h1))\nprint('Centena: {}'.format(h2))\nprint('Milhar: {} '.format(h3))",
        "detail": "023",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "023",
        "description": "023",
        "peekOfCode": "h2 = num // 100 % 10\nh3 = num // 1000 % 10\nprint('Analizando o numero: {}'.format(num))\nprint('Unidade: {} '.format(h))\nprint('Dezena: {} '.format(h1))\nprint('Centena: {}'.format(h2))\nprint('Milhar: {} '.format(h3))",
        "detail": "023",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "023",
        "description": "023",
        "peekOfCode": "h3 = num // 1000 % 10\nprint('Analizando o numero: {}'.format(num))\nprint('Unidade: {} '.format(h))\nprint('Dezena: {} '.format(h1))\nprint('Centena: {}'.format(h2))\nprint('Milhar: {} '.format(h3))",
        "detail": "023",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "024",
        "description": "024",
        "peekOfCode": "h = str(input('digite o nome da sua cidade: '))\nh1 = h.upper()\nprint('ASNTO' in h1)\n#-------------- como o professor fez  --------------------------\ncid = str(input('Qual o nome da cidade que vc nasceu ?')).strip()\nprint(cid[:5].upper() == 'SANTO')",
        "detail": "024",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "024",
        "description": "024",
        "peekOfCode": "h1 = h.upper()\nprint('ASNTO' in h1)\n#-------------- como o professor fez  --------------------------\ncid = str(input('Qual o nome da cidade que vc nasceu ?')).strip()\nprint(cid[:5].upper() == 'SANTO')",
        "detail": "024",
        "documentation": {}
    },
    {
        "label": "cid",
        "kind": 5,
        "importPath": "024",
        "description": "024",
        "peekOfCode": "cid = str(input('Qual o nome da cidade que vc nasceu ?')).strip()\nprint(cid[:5].upper() == 'SANTO')",
        "detail": "024",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "025",
        "description": "025",
        "peekOfCode": "h = str(input('Digite seu nome completo: '))\nh1 = h.title()\nprint('Silva' in h1)\n#-------------- como o professor fez  --------------------------\nnome = str(input('Digite seu nome completo: ')).strip()\nprint('Seu nome tem Silval? {} '.format('SILVA' in nome.upper()))",
        "detail": "025",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "025",
        "description": "025",
        "peekOfCode": "h1 = h.title()\nprint('Silva' in h1)\n#-------------- como o professor fez  --------------------------\nnome = str(input('Digite seu nome completo: ')).strip()\nprint('Seu nome tem Silval? {} '.format('SILVA' in nome.upper()))",
        "detail": "025",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "025",
        "description": "025",
        "peekOfCode": "nome = str(input('Digite seu nome completo: ')).strip()\nprint('Seu nome tem Silval? {} '.format('SILVA' in nome.upper()))",
        "detail": "025",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "026",
        "description": "026",
        "peekOfCode": "h = str(input('Digite uma frase: ')).strip()\nh1 = h.upper()\nh2 = h1.count('A')\nh3 = h1.find('A')+1\nh4 = h1.rfind('A')+1\nprint('\\nessa frase tem: {} letras A '.format(h2))\nprint('primeira posiçao: {} '.format(h3))\nprint('ultima posiçao: {}'.format(h4))\n#-------------- como o professor fez  --------------------------\nfrase = str(input('Digite uma frase')).upper()",
        "detail": "026",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "026",
        "description": "026",
        "peekOfCode": "h1 = h.upper()\nh2 = h1.count('A')\nh3 = h1.find('A')+1\nh4 = h1.rfind('A')+1\nprint('\\nessa frase tem: {} letras A '.format(h2))\nprint('primeira posiçao: {} '.format(h3))\nprint('ultima posiçao: {}'.format(h4))\n#-------------- como o professor fez  --------------------------\nfrase = str(input('Digite uma frase')).upper()\nprint('A letra A aparece {} vezes nessa frase'.format(frase.count('A')))",
        "detail": "026",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "026",
        "description": "026",
        "peekOfCode": "h2 = h1.count('A')\nh3 = h1.find('A')+1\nh4 = h1.rfind('A')+1\nprint('\\nessa frase tem: {} letras A '.format(h2))\nprint('primeira posiçao: {} '.format(h3))\nprint('ultima posiçao: {}'.format(h4))\n#-------------- como o professor fez  --------------------------\nfrase = str(input('Digite uma frase')).upper()\nprint('A letra A aparece {} vezes nessa frase'.format(frase.count('A')))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.find('A')+1))",
        "detail": "026",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "026",
        "description": "026",
        "peekOfCode": "h3 = h1.find('A')+1\nh4 = h1.rfind('A')+1\nprint('\\nessa frase tem: {} letras A '.format(h2))\nprint('primeira posiçao: {} '.format(h3))\nprint('ultima posiçao: {}'.format(h4))\n#-------------- como o professor fez  --------------------------\nfrase = str(input('Digite uma frase')).upper()\nprint('A letra A aparece {} vezes nessa frase'.format(frase.count('A')))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.find('A')+1))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.rfind('A')+1))",
        "detail": "026",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "026",
        "description": "026",
        "peekOfCode": "h4 = h1.rfind('A')+1\nprint('\\nessa frase tem: {} letras A '.format(h2))\nprint('primeira posiçao: {} '.format(h3))\nprint('ultima posiçao: {}'.format(h4))\n#-------------- como o professor fez  --------------------------\nfrase = str(input('Digite uma frase')).upper()\nprint('A letra A aparece {} vezes nessa frase'.format(frase.count('A')))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.find('A')+1))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.rfind('A')+1))",
        "detail": "026",
        "documentation": {}
    },
    {
        "label": "frase",
        "kind": 5,
        "importPath": "026",
        "description": "026",
        "peekOfCode": "frase = str(input('Digite uma frase')).upper()\nprint('A letra A aparece {} vezes nessa frase'.format(frase.count('A')))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.find('A')+1))\nprint('A primeira letra A apareceu na posiçao {} '.format(frase.rfind('A')+1))",
        "detail": "026",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "h = str(input('digite seu nome completo: '))\nn = h.upper()\nh1 = n.split()\nh2 = h1[0]\nh3 = h1[3]\nprint('Primeiro: {}'.format(h2))\nprint('ultimo: {}'.format(h3))\n#-------------- como o professor fez  --------------------------\nh = str(input('digite seu nome completo: ')).strip()\nnome = h.split()",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "n = h.upper()\nh1 = n.split()\nh2 = h1[0]\nh3 = h1[3]\nprint('Primeiro: {}'.format(h2))\nprint('ultimo: {}'.format(h3))\n#-------------- como o professor fez  --------------------------\nh = str(input('digite seu nome completo: ')).strip()\nnome = h.split()\nprint('Ola e um prazer em te conhecer seu nome tem ')",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "h1 = n.split()\nh2 = h1[0]\nh3 = h1[3]\nprint('Primeiro: {}'.format(h2))\nprint('ultimo: {}'.format(h3))\n#-------------- como o professor fez  --------------------------\nh = str(input('digite seu nome completo: ')).strip()\nnome = h.split()\nprint('Ola e um prazer em te conhecer seu nome tem ')\nprint('seu primeiro nome e {} '.format(nome[0]))",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "h2 = h1[0]\nh3 = h1[3]\nprint('Primeiro: {}'.format(h2))\nprint('ultimo: {}'.format(h3))\n#-------------- como o professor fez  --------------------------\nh = str(input('digite seu nome completo: ')).strip()\nnome = h.split()\nprint('Ola e um prazer em te conhecer seu nome tem ')\nprint('seu primeiro nome e {} '.format(nome[0]))\nprint('seu ultimo nome e {}'.format(nome[len(nome)-1]))",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "h3 = h1[3]\nprint('Primeiro: {}'.format(h2))\nprint('ultimo: {}'.format(h3))\n#-------------- como o professor fez  --------------------------\nh = str(input('digite seu nome completo: ')).strip()\nnome = h.split()\nprint('Ola e um prazer em te conhecer seu nome tem ')\nprint('seu primeiro nome e {} '.format(nome[0]))\nprint('seu ultimo nome e {}'.format(nome[len(nome)-1]))",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "h = str(input('digite seu nome completo: ')).strip()\nnome = h.split()\nprint('Ola e um prazer em te conhecer seu nome tem ')\nprint('seu primeiro nome e {} '.format(nome[0]))\nprint('seu ultimo nome e {}'.format(nome[len(nome)-1]))",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "027",
        "description": "027",
        "peekOfCode": "nome = h.split()\nprint('Ola e um prazer em te conhecer seu nome tem ')\nprint('seu primeiro nome e {} '.format(nome[0]))\nprint('seu ultimo nome e {}'.format(nome[len(nome)-1]))",
        "detail": "027",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "028",
        "description": "028",
        "peekOfCode": "h = int(input('\\033[31mEscolha um numero entre 0 e 5 :\\033[m'))\nlista = [1,2,3,4,5]\nh1 = choice(lista)\nprint('\\033[31mVocê escolheu o N° {} \\033[m'.format(h))\nprint('\\033[35mEscolhido pelo PC foi N° {} \\033[m]'.format(h1))\nif h == h1:\n    print('\\033[36mPARABÉNS VC VENCEU!!!!!!!!!!!\\033[m')\nelse:\n    print('\\033[36mVOCE PERDEU!\\033[m')\nprint('------------- FIM ------------')",
        "detail": "028",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "028",
        "description": "028",
        "peekOfCode": "lista = [1,2,3,4,5]\nh1 = choice(lista)\nprint('\\033[31mVocê escolheu o N° {} \\033[m'.format(h))\nprint('\\033[35mEscolhido pelo PC foi N° {} \\033[m]'.format(h1))\nif h == h1:\n    print('\\033[36mPARABÉNS VC VENCEU!!!!!!!!!!!\\033[m')\nelse:\n    print('\\033[36mVOCE PERDEU!\\033[m')\nprint('------------- FIM ------------')\n#--------------- como o professor fez -----------------------",
        "detail": "028",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "028",
        "description": "028",
        "peekOfCode": "h1 = choice(lista)\nprint('\\033[31mVocê escolheu o N° {} \\033[m'.format(h))\nprint('\\033[35mEscolhido pelo PC foi N° {} \\033[m]'.format(h1))\nif h == h1:\n    print('\\033[36mPARABÉNS VC VENCEU!!!!!!!!!!!\\033[m')\nelse:\n    print('\\033[36mVOCE PERDEU!\\033[m')\nprint('------------- FIM ------------')\n#--------------- como o professor fez -----------------------\nfrom random import randint",
        "detail": "028",
        "documentation": {}
    },
    {
        "label": "computador",
        "kind": 5,
        "importPath": "028",
        "description": "028",
        "peekOfCode": "computador = randint(0,5)\nprint('-=-'*20)\nprint('Vou pensar em um numero entre 0 e 5 tente adivinhar...')\nprint('-=-'*20)\njogador = int(input('Em qual numero eu pensei? '))\nprint('PROCESSANDO.....')\nsleep(3)\nif computador == jogador:\n    print('PARABÉNS VOCE CONSEGUIL ME VENCEU!!')\nelse:",
        "detail": "028",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "028",
        "description": "028",
        "peekOfCode": "jogador = int(input('Em qual numero eu pensei? '))\nprint('PROCESSANDO.....')\nsleep(3)\nif computador == jogador:\n    print('PARABÉNS VOCE CONSEGUIL ME VENCEU!!')\nelse:\n    print('EU VENCI! Eu pensei no numero {} e voce no {}'.format(computador, jogador))",
        "detail": "028",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "029",
        "description": "029",
        "peekOfCode": "h = float(input('Qual foi a sua velocidade? '))\nh1 = (h-80)*7\nif h >=80:\n    print('------VOCE FOI MULTADO---------')\n    print('Valor da sua multa e R$:{:.2f}'.format(h1))\nelse:\n    print(\"Parabéns por respeitar o limite de velocidade\")\n#-------------- como O PROFESSOR FEZ --------------------------\nvelocidade = float(input('Qual a velocidade doseu carro atual:'))\nif velocidade > 80:",
        "detail": "029",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "029",
        "description": "029",
        "peekOfCode": "h1 = (h-80)*7\nif h >=80:\n    print('------VOCE FOI MULTADO---------')\n    print('Valor da sua multa e R$:{:.2f}'.format(h1))\nelse:\n    print(\"Parabéns por respeitar o limite de velocidade\")\n#-------------- como O PROFESSOR FEZ --------------------------\nvelocidade = float(input('Qual a velocidade doseu carro atual:'))\nif velocidade > 80:\n    print('MULTADO!! VOCE EXEDEU O LIMITE PERMITIDO NA VIA QUE E DE 80KM/H')",
        "detail": "029",
        "documentation": {}
    },
    {
        "label": "velocidade",
        "kind": 5,
        "importPath": "029",
        "description": "029",
        "peekOfCode": "velocidade = float(input('Qual a velocidade doseu carro atual:'))\nif velocidade > 80:\n    print('MULTADO!! VOCE EXEDEU O LIMITE PERMITIDO NA VIA QUE E DE 80KM/H')\n    multa = (velocidade-80) * 7\n    print('Voce deve pagar uma MULTA de R$: {:.2f}'.format(multa))\nprint('Tenha um bom dia! Dirija com cuidado')",
        "detail": "029",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "030",
        "description": "030",
        "peekOfCode": "h = int(input('Digite um numero:'))\nprint('O numero que voce escolheu é')\nif (h%2)==0:  #  % 2 para que ele retone 0  para impar e 1 para par\n    print('Par') # se ele for 0 e Par\nelse:\n    print('impar') # se ele for 1 e Impar\n#-------------- como o professor fez  --------------------------\nnumero = int(input('Digite um numero qual quer: '))\nresultado = numero % 2\nif resultado == 0:",
        "detail": "030",
        "documentation": {}
    },
    {
        "label": "numero",
        "kind": 5,
        "importPath": "030",
        "description": "030",
        "peekOfCode": "numero = int(input('Digite um numero qual quer: '))\nresultado = numero % 2\nif resultado == 0:\n    print('O numero {} e PAR'.format(resultado))\nelse:\n    print('O numero {} e IMPAR'.format(resultado))",
        "detail": "030",
        "documentation": {}
    },
    {
        "label": "resultado",
        "kind": 5,
        "importPath": "030",
        "description": "030",
        "peekOfCode": "resultado = numero % 2\nif resultado == 0:\n    print('O numero {} e PAR'.format(resultado))\nelse:\n    print('O numero {} e IMPAR'.format(resultado))",
        "detail": "030",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "031",
        "description": "031",
        "peekOfCode": "h = float(input('Qual a distancia da sua viagem? '))\nif h >=200:\n    print('Sua viagem de {}Km/h'.format(h))\n    print('Sua passagem da R$: {:.2f}'.format(h*0.45))# se a viagem for menor ou igal a  200 Km/h\nelse:\n    print('Sua viagem de {}Km/h'.format(h))\n    print('Sua passagem da R$: {:.2f}'.format(h*0.50))# se a viagem for maior que 200 Km/h\nprint('---BOA VIAGEM-----')\n#-------------- como o professor fez  --------------------------\ndistancia = float(input('Qual e a distancia da sua viagem:  '))",
        "detail": "031",
        "documentation": {}
    },
    {
        "label": "distancia",
        "kind": 5,
        "importPath": "031",
        "description": "031",
        "peekOfCode": "distancia = float(input('Qual e a distancia da sua viagem:  '))\nprint('Voce esta preste a começar uma viagem de {:.2f} '.format(distancia))\nif distancia <= 200:\n    preço = distancia * 0.50 # se a viagem for menor ou igal a  200 Km/h\nelse:\n    preço = distancia * 0.45  # se a viagem for maior que 200 Km/h\nprint('Sua preço da sua passagem sera de R$:{:.2f} '.format(preço))\npreço = distamcia * 0.50 if distancia <=200 else distancia * 0.45  # outra maneira de fazer m",
        "detail": "031",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "031",
        "description": "031",
        "peekOfCode": "preço = distamcia * 0.50 if distancia <=200 else distancia * 0.45  # outra maneira de fazer m",
        "detail": "031",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "032",
        "description": "032",
        "peekOfCode": "h = str(input('Digite um numero: '))\nif h == 66:\n    print('Seu numero e BISSEXTO '.format(h1))\nelse:\n    print('Seu numero NÃo É BISSEXTO'.format(h1))\n#-------------- como o professor fez  --------------------------\nano = int(input('Ano: '))\nif (ano%4==0 and ano%100!=0) or (ano%400==0):\n    print('Bissexto')\nelse:",
        "detail": "032",
        "documentation": {}
    },
    {
        "label": "ano",
        "kind": 5,
        "importPath": "032",
        "description": "032",
        "peekOfCode": "ano = int(input('Ano: '))\nif (ano%4==0 and ano%100!=0) or (ano%400==0):\n    print('Bissexto')\nelse:\n    print('Não é bissexto')",
        "detail": "032",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h = int(input('Digite um numero com 3 DIGITOS: '))\nh1 = str(h)\nh2 = h1[0]\nh3 = h1[1]\nh4 = h1[2]\nh5 = min(h2, h3, h4)  # min para chamar o menor valor\nh6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h1 = str(h)\nh2 = h1[0]\nh3 = h1[1]\nh4 = h1[2]\nh5 = min(h2, h3, h4)  # min para chamar o menor valor\nh6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))\nprint('O maior valor e {}'.format(h6))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h2 = h1[0]\nh3 = h1[1]\nh4 = h1[2]\nh5 = min(h2, h3, h4)  # min para chamar o menor valor\nh6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))\nprint('O maior valor e {}'.format(h6))\nprint('O menor valor e {}'.format(h5))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h3 = h1[1]\nh4 = h1[2]\nh5 = min(h2, h3, h4)  # min para chamar o menor valor\nh6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))\nprint('O maior valor e {}'.format(h6))\nprint('O menor valor e {}'.format(h5))\n# -------------- como o professor fez  --------------------------",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h4 = h1[2]\nh5 = min(h2, h3, h4)  # min para chamar o menor valor\nh6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))\nprint('O maior valor e {}'.format(h6))\nprint('O menor valor e {}'.format(h5))\n# -------------- como o professor fez  --------------------------\na = int(input('Primeiro valor: '))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h5",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h5 = min(h2, h3, h4)  # min para chamar o menor valor\nh6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))\nprint('O maior valor e {}'.format(h6))\nprint('O menor valor e {}'.format(h5))\n# -------------- como o professor fez  --------------------------\na = int(input('Primeiro valor: '))\nb = int(input('Segundo valor: '))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h6",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "h6 = max(h2, h3, h4)  # max para chamar o maior valor\nprint('1° : {} '.format(h1[0]))\nprint('2° : {}'.format(h1[1]))\nprint('3° : {} '.format(h1[2]))\nprint('O maior valor e {}'.format(h6))\nprint('O menor valor e {}'.format(h5))\n# -------------- como o professor fez  --------------------------\na = int(input('Primeiro valor: '))\nb = int(input('Segundo valor: '))\nc = int(input('Twecwiro valor:'))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "a = int(input('Primeiro valor: '))\nb = int(input('Segundo valor: '))\nc = int(input('Twecwiro valor:'))\n# VERIFICANDO....\nmenor = a\nif a > b and b < c:\n    menor = b\nif c < a and c < b:\n    menor = c\n# VERIFICANDO.....",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "b = int(input('Segundo valor: '))\nc = int(input('Twecwiro valor:'))\n# VERIFICANDO....\nmenor = a\nif a > b and b < c:\n    menor = b\nif c < a and c < b:\n    menor = c\n# VERIFICANDO.....\nmaior = a",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "c = int(input('Twecwiro valor:'))\n# VERIFICANDO....\nmenor = a\nif a > b and b < c:\n    menor = b\nif c < a and c < b:\n    menor = c\n# VERIFICANDO.....\nmaior = a\nif b > a and b > c:",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "menor",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "menor = a\nif a > b and b < c:\n    menor = b\nif c < a and c < b:\n    menor = c\n# VERIFICANDO.....\nmaior = a\nif b > a and b > c:\n    maior = b\nif c > a and c > b:",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "maior",
        "kind": 5,
        "importPath": "033",
        "description": "033",
        "peekOfCode": "maior = a\nif b > a and b > c:\n    maior = b\nif c > a and c > b:\n    maior = c\nprint('O maior valor e {} '.format(maior))\nprint('O menor valor e {} '.format(menor))",
        "detail": "033",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h = float(input('Quanto e seu salrario? : '))\nh1 = h*10\nh2 = h1/100\nh3 = h+h2\n#-----------\nh4 = h*15\nh5 = h4/100\nh6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h1 = h*10\nh2 = h1/100\nh3 = h+h2\n#-----------\nh4 = h*15\nh5 = h4/100\nh6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))\nelse:",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h2 = h1/100\nh3 = h+h2\n#-----------\nh4 = h*15\nh5 = h4/100\nh6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))\nelse:\n    print('Seu novo salario e de R$: {:.2f}'.format(h6))",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h3 = h+h2\n#-----------\nh4 = h*15\nh5 = h4/100\nh6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))\nelse:\n    print('Seu novo salario e de R$: {:.2f}'.format(h6))\nprint('---Parabéns pelo aumento---')#quem ganha mais que 1250 ganha 10% de almento",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h4 = h*15\nh5 = h4/100\nh6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))\nelse:\n    print('Seu novo salario e de R$: {:.2f}'.format(h6))\nprint('---Parabéns pelo aumento---')#quem ganha mais que 1250 ganha 10% de almento\n#-------------- como o professor fez  --------------------------\nsalario = float(input('Digite seu salario: '))",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h5",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h5 = h4/100\nh6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))\nelse:\n    print('Seu novo salario e de R$: {:.2f}'.format(h6))\nprint('---Parabéns pelo aumento---')#quem ganha mais que 1250 ganha 10% de almento\n#-------------- como o professor fez  --------------------------\nsalario = float(input('Digite seu salario: '))\nif salario <= 1250:",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h6",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "h6 = h+h5\nif h >= 1250: # menor ou igual a 1250 gamha 15% de almento\n    print('Seu novo Salario e de R$: {:.2f}'.format(h3))\nelse:\n    print('Seu novo salario e de R$: {:.2f}'.format(h6))\nprint('---Parabéns pelo aumento---')#quem ganha mais que 1250 ganha 10% de almento\n#-------------- como o professor fez  --------------------------\nsalario = float(input('Digite seu salario: '))\nif salario <= 1250:\n    novo = salario + (salario * 15 / 100)  # variavel dentro do if",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "salario",
        "kind": 5,
        "importPath": "034",
        "description": "034",
        "peekOfCode": "salario = float(input('Digite seu salario: '))\nif salario <= 1250:\n    novo = salario + (salario * 15 / 100)  # variavel dentro do if\nelse:\n    novo = salario + (salario * 10 / 100)\nprint('quem ganhava R$:{:.2f} agora vai ganhar R$:{:.2f}'.format(salario, novo))",
        "detail": "034",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "035",
        "description": "035",
        "peekOfCode": "h1 = float(input('Primeiro segmento: '))\nh2 = float(input('Segudo segmento: '))\nh3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:  #medir as retas de um triangulo\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO')\nelse:\n    print('Os segmentos acima NÃO PODEM FORMAR UM TRIANGULO')\nprint('-='*20)\n#-------------- como o professor fez  --------------------------\nprint('-='*20)",
        "detail": "035",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "035",
        "description": "035",
        "peekOfCode": "h2 = float(input('Segudo segmento: '))\nh3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:  #medir as retas de um triangulo\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO')\nelse:\n    print('Os segmentos acima NÃO PODEM FORMAR UM TRIANGULO')\nprint('-='*20)\n#-------------- como o professor fez  --------------------------\nprint('-='*20)\nprint('ANALIZADOR DE TRIANGULO')",
        "detail": "035",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "035",
        "description": "035",
        "peekOfCode": "h3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:  #medir as retas de um triangulo\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO')\nelse:\n    print('Os segmentos acima NÃO PODEM FORMAR UM TRIANGULO')\nprint('-='*20)\n#-------------- como o professor fez  --------------------------\nprint('-='*20)\nprint('ANALIZADOR DE TRIANGULO')\nprint('-='*20)",
        "detail": "035",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "035",
        "description": "035",
        "peekOfCode": "h1 = float(input('Primeiro segmento: '))\nh2 = float(input('Segudo segmento: '))\nh3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:  #medir as retas de um triangulo\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO')\nelse:\n    print('Os segmentos acima NÃO PODEM FORMAR UM TRIANGULO')",
        "detail": "035",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "035",
        "description": "035",
        "peekOfCode": "h2 = float(input('Segudo segmento: '))\nh3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:  #medir as retas de um triangulo\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO')\nelse:\n    print('Os segmentos acima NÃO PODEM FORMAR UM TRIANGULO')",
        "detail": "035",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "035",
        "description": "035",
        "peekOfCode": "h3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:  #medir as retas de um triangulo\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO')\nelse:\n    print('Os segmentos acima NÃO PODEM FORMAR UM TRIANGULO')",
        "detail": "035",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "nome = str(input('Digite seu nome: '))\nif nome == 'Tiago':\n    print('que nome bonito {}'.format(nome))\nelif nome == 'Pedro' or nome == 'Maria' or nome == 'Matheus':\n    print('Seu nome e bem popular aqui no BRASIL')\nelif nome == 'Ana' or nome == 'Bruna':\n    print('Que belo nome feminino!')\nelse:\n    print('Seu nome e bem comum!')\nprint('Seja bem vindo {}!'.format(nome))",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "valor = float(input('Quanto custasua  casa? '))\nsalario = float(input('Qunato e seu salario? '))\nm = int(input('E  quantos anos vc quer pagar? '))\nprint('\\033[34mANALIZANDO\\033[m\\033[33m................\\033[m')\ntime.sleep(3)\nh1 = salario*30\nh2  = h1/100\nc = valor/(m*12)\nif c <= h2:\n    print('Seu financiamento foi \\033[34m APROVADO!!\\033[m')",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "salario",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "salario = float(input('Qunato e seu salario? '))\nm = int(input('E  quantos anos vc quer pagar? '))\nprint('\\033[34mANALIZANDO\\033[m\\033[33m................\\033[m')\ntime.sleep(3)\nh1 = salario*30\nh2  = h1/100\nc = valor/(m*12)\nif c <= h2:\n    print('Seu financiamento foi \\033[34m APROVADO!!\\033[m')\nelse:",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "m = int(input('E  quantos anos vc quer pagar? '))\nprint('\\033[34mANALIZANDO\\033[m\\033[33m................\\033[m')\ntime.sleep(3)\nh1 = salario*30\nh2  = h1/100\nc = valor/(m*12)\nif c <= h2:\n    print('Seu financiamento foi \\033[34m APROVADO!!\\033[m')\nelse:\n    print('seu financiamento foi \\033[31m REPROVADO!!\\033[m')",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "h1 = salario*30\nh2  = h1/100\nc = valor/(m*12)\nif c <= h2:\n    print('Seu financiamento foi \\033[34m APROVADO!!\\033[m')\nelse:\n    print('seu financiamento foi \\033[31m REPROVADO!!\\033[m')\nprint('='*30)\n#-------------- como o professor fez  --------------------------\ncasa = float(input('QUANTO CUSTA A CASA R$: '))",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "c = valor/(m*12)\nif c <= h2:\n    print('Seu financiamento foi \\033[34m APROVADO!!\\033[m')\nelse:\n    print('seu financiamento foi \\033[31m REPROVADO!!\\033[m')\nprint('='*30)\n#-------------- como o professor fez  --------------------------\ncasa = float(input('QUANTO CUSTA A CASA R$: '))\nSALARIO = float(input('QUANTO E SEU SALARIO R$: '))\nanos = int(input('EM QUANTOS ANOS VC QUER PAGAR? '))",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "casa",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "casa = float(input('QUANTO CUSTA A CASA R$: '))\nSALARIO = float(input('QUANTO E SEU SALARIO R$: '))\nanos = int(input('EM QUANTOS ANOS VC QUER PAGAR? '))\nprestaçao = casa/ (anos*12)\nprint('PARA PAGAR UM CASA DE R$: {:.2f} EM {} ANOS'.format(casa, anos),end = '')\nprint('A PRESTAÇAO SERA {}'.format(prestaçao))\nminimo = salario * 30 / 100\nif prestaçao <= minimo:\n    print('EMPRESTIMO PODE SER CONCEDITO')\nelse:",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "SALARIO",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "SALARIO = float(input('QUANTO E SEU SALARIO R$: '))\nanos = int(input('EM QUANTOS ANOS VC QUER PAGAR? '))\nprestaçao = casa/ (anos*12)\nprint('PARA PAGAR UM CASA DE R$: {:.2f} EM {} ANOS'.format(casa, anos),end = '')\nprint('A PRESTAÇAO SERA {}'.format(prestaçao))\nminimo = salario * 30 / 100\nif prestaçao <= minimo:\n    print('EMPRESTIMO PODE SER CONCEDITO')\nelse:\n    print('EMPRESTIMO NEGADO!!')",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "anos",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "anos = int(input('EM QUANTOS ANOS VC QUER PAGAR? '))\nprestaçao = casa/ (anos*12)\nprint('PARA PAGAR UM CASA DE R$: {:.2f} EM {} ANOS'.format(casa, anos),end = '')\nprint('A PRESTAÇAO SERA {}'.format(prestaçao))\nminimo = salario * 30 / 100\nif prestaçao <= minimo:\n    print('EMPRESTIMO PODE SER CONCEDITO')\nelse:\n    print('EMPRESTIMO NEGADO!!')",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "prestaçao",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "prestaçao = casa/ (anos*12)\nprint('PARA PAGAR UM CASA DE R$: {:.2f} EM {} ANOS'.format(casa, anos),end = '')\nprint('A PRESTAÇAO SERA {}'.format(prestaçao))\nminimo = salario * 30 / 100\nif prestaçao <= minimo:\n    print('EMPRESTIMO PODE SER CONCEDITO')\nelse:\n    print('EMPRESTIMO NEGADO!!')",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "minimo",
        "kind": 5,
        "importPath": "036",
        "description": "036",
        "peekOfCode": "minimo = salario * 30 / 100\nif prestaçao <= minimo:\n    print('EMPRESTIMO PODE SER CONCEDITO')\nelse:\n    print('EMPRESTIMO NEGADO!!')",
        "detail": "036",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "037",
        "description": "037",
        "peekOfCode": "num = int(input('DIGITE UM NUMERO INTEIRO'))\nprint('''ESCOLHA UM DAS BASES PARA CONVERÇAO\n[ 1 ] CONVERTER PARA BINARIO\n[ 2 ] PARA CONVERTER PARA OCTAL\n[ 3 ] PARA CONVERTER PARA MEXADECIMAL''')\nopçao = int(input('SUA OPÇAO'))\nif opçao == 1:\n    print('{} CONVERTIDO PARA BINARIO E {}'.format(num, bin(num)[2:]))\nelif opçao == 2:\n    print('{} CONVERTIDO PARA OCTAL E {}'.format(num, oct(num)[2:]))",
        "detail": "037",
        "documentation": {}
    },
    {
        "label": "opçao",
        "kind": 5,
        "importPath": "037",
        "description": "037",
        "peekOfCode": "opçao = int(input('SUA OPÇAO'))\nif opçao == 1:\n    print('{} CONVERTIDO PARA BINARIO E {}'.format(num, bin(num)[2:]))\nelif opçao == 2:\n    print('{} CONVERTIDO PARA OCTAL E {}'.format(num, oct(num)[2:]))\nelif opçao == 3:\n    print('{} CONVERTIDO PARA MEXADECIMAL E {}'.format(num, hex(um)[2:]))\nelse:\n    print('OPÇAO INVALIDA!! TENTE NOVAMENTE')",
        "detail": "037",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "038",
        "description": "038",
        "peekOfCode": "h = int(input('digie um Numero:'))\nh2 = int(input('digte outro numero:'))\nif h > h2:\n    print('\\033[33mo primeiro valor {} e maior que {}'.format(h, h2))\nelif h < h2:\n    print('\\033[32mO segundo valor {} e maior '.format(h2))\nelif h == h2:\n    print('\\033[36mnao exie valor maior os dois valores sao iguais')\n#-------------- como O PROFESSOR FEZ --------------------------\nn1 = int(input('DIGITE UM VALOR: '))",
        "detail": "038",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "038",
        "description": "038",
        "peekOfCode": "h2 = int(input('digte outro numero:'))\nif h > h2:\n    print('\\033[33mo primeiro valor {} e maior que {}'.format(h, h2))\nelif h < h2:\n    print('\\033[32mO segundo valor {} e maior '.format(h2))\nelif h == h2:\n    print('\\033[36mnao exie valor maior os dois valores sao iguais')\n#-------------- como O PROFESSOR FEZ --------------------------\nn1 = int(input('DIGITE UM VALOR: '))\nn2 = int(input('DIGITE O SEGUNDO VALOR: '))",
        "detail": "038",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "038",
        "description": "038",
        "peekOfCode": "n1 = int(input('DIGITE UM VALOR: '))\nn2 = int(input('DIGITE O SEGUNDO VALOR: '))\nif n1 > n2:\n    print('O PRIMEIRO VALOR E MAIOR')\nelif n2 > n1:\n    print('O SEGUNDO VALOR E MAIOR')\nelse:\n    print('OS DOIS VALORES E IGUAIS')",
        "detail": "038",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "038",
        "description": "038",
        "peekOfCode": "n2 = int(input('DIGITE O SEGUNDO VALOR: '))\nif n1 > n2:\n    print('O PRIMEIRO VALOR E MAIOR')\nelif n2 > n1:\n    print('O SEGUNDO VALOR E MAIOR')\nelse:\n    print('OS DOIS VALORES E IGUAIS')",
        "detail": "038",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "h = int(input('Qual e sua data nascimento'))\nh1 = h -2023\nprint('\\033[36mCAREGANDO\\033[34m........................')\nprint(h1)\nh2 = [-10, -11, -12, -13, -14, -15]\nh3 = [-16, -17]\nh4 = [-18]\ntime.sleep(2)\nif h1 >= -15:\n    print('\\033[36mAINDA NAO TA NA HORA PARA SE ALISTAR!!')",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "h1 = h -2023\nprint('\\033[36mCAREGANDO\\033[34m........................')\nprint(h1)\nh2 = [-10, -11, -12, -13, -14, -15]\nh3 = [-16, -17]\nh4 = [-18]\ntime.sleep(2)\nif h1 >= -15:\n    print('\\033[36mAINDA NAO TA NA HORA PARA SE ALISTAR!!')\nelif h1 in h3:",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "h2 = [-10, -11, -12, -13, -14, -15]\nh3 = [-16, -17]\nh4 = [-18]\ntime.sleep(2)\nif h1 >= -15:\n    print('\\033[36mAINDA NAO TA NA HORA PARA SE ALISTAR!!')\nelif h1 in h3:\n    print('\\033[35mFIQUE ATENTO QUE FALTA POOUO PARA SE ALISTAR')\nelif h1 in h4:\n    print('\\033[34mPROCURE UMA BASE PARA SE APRESENTAR AO SERVIÇO!!!')",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "h3 = [-16, -17]\nh4 = [-18]\ntime.sleep(2)\nif h1 >= -15:\n    print('\\033[36mAINDA NAO TA NA HORA PARA SE ALISTAR!!')\nelif h1 in h3:\n    print('\\033[35mFIQUE ATENTO QUE FALTA POOUO PARA SE ALISTAR')\nelif h1 in h4:\n    print('\\033[34mPROCURE UMA BASE PARA SE APRESENTAR AO SERVIÇO!!!')\n#-------------- como O PROFESSOR FEZ -------------------------",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "h4 = [-18]\ntime.sleep(2)\nif h1 >= -15:\n    print('\\033[36mAINDA NAO TA NA HORA PARA SE ALISTAR!!')\nelif h1 in h3:\n    print('\\033[35mFIQUE ATENTO QUE FALTA POOUO PARA SE ALISTAR')\nelif h1 in h4:\n    print('\\033[34mPROCURE UMA BASE PARA SE APRESENTAR AO SERVIÇO!!!')\n#-------------- como O PROFESSOR FEZ -------------------------\nfrom datetime import date #datetime data Hora",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "atual",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "atual = date.today().year # data . hoje(). ano\nnasc = int(input('ANO DE NASCIMENTO: '))\nidade = atual -nasc\nprint('QUEM NASCEU EM {} TEM {} ANOS, EM {}'.format(nasc, idade, atual))\nif idade == 18:\n    print('VOCE TEM QUE SE ALISTAR IMEDIATAMENTE')\nelif idade < 18:\n    saldo = 18 - idade\n    ano = atual + saldo\n    print('AINDA FALTA {} ANOS PARA SE ALISTAR'.format(saldo))",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "nasc",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "nasc = int(input('ANO DE NASCIMENTO: '))\nidade = atual -nasc\nprint('QUEM NASCEU EM {} TEM {} ANOS, EM {}'.format(nasc, idade, atual))\nif idade == 18:\n    print('VOCE TEM QUE SE ALISTAR IMEDIATAMENTE')\nelif idade < 18:\n    saldo = 18 - idade\n    ano = atual + saldo\n    print('AINDA FALTA {} ANOS PARA SE ALISTAR'.format(saldo))\n    print('SEU ALISTAMENTO SERA EM {} ANO'.format(ano))",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "039",
        "description": "039",
        "peekOfCode": "idade = atual -nasc\nprint('QUEM NASCEU EM {} TEM {} ANOS, EM {}'.format(nasc, idade, atual))\nif idade == 18:\n    print('VOCE TEM QUE SE ALISTAR IMEDIATAMENTE')\nelif idade < 18:\n    saldo = 18 - idade\n    ano = atual + saldo\n    print('AINDA FALTA {} ANOS PARA SE ALISTAR'.format(saldo))\n    print('SEU ALISTAMENTO SERA EM {} ANO'.format(ano))\nelif idade > 18:",
        "detail": "039",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "040",
        "description": "040",
        "peekOfCode": "h = float(input('primeira nota: '))\nh1 = float(input('segunda nota: '))\nh2 = (h + h1) / 2\nprint('\\033[32mANALIZANDO\\033[36m................................')\ntime.sleep(2)\nprint('SUA NOTA É {}'.format(h2))\nif h2 <= 5.0:\n    print('\\033[31mREPROVADO')\n    print('\\033[31mESTUDE BASTANTE!!!')\nelif h2 <= 6.9:",
        "detail": "040",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "040",
        "description": "040",
        "peekOfCode": "h1 = float(input('segunda nota: '))\nh2 = (h + h1) / 2\nprint('\\033[32mANALIZANDO\\033[36m................................')\ntime.sleep(2)\nprint('SUA NOTA É {}'.format(h2))\nif h2 <= 5.0:\n    print('\\033[31mREPROVADO')\n    print('\\033[31mESTUDE BASTANTE!!!')\nelif h2 <= 6.9:\n    print('\\033[36mRECUPERAÇÃO')",
        "detail": "040",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "040",
        "description": "040",
        "peekOfCode": "h2 = (h + h1) / 2\nprint('\\033[32mANALIZANDO\\033[36m................................')\ntime.sleep(2)\nprint('SUA NOTA É {}'.format(h2))\nif h2 <= 5.0:\n    print('\\033[31mREPROVADO')\n    print('\\033[31mESTUDE BASTANTE!!!')\nelif h2 <= 6.9:\n    print('\\033[36mRECUPERAÇÃO')\n    print('\\033[31mESTUDE MAIS!!!')",
        "detail": "040",
        "documentation": {}
    },
    {
        "label": "nota1",
        "kind": 5,
        "importPath": "040",
        "description": "040",
        "peekOfCode": "nota1 = float(input('DIGITE A PRIMEIRA NOTA'))\nnota2 = float(input('DIGITE A SEGUNDA NOTA '))\nmedia = (nota1 + nota2) / 2\nprint('TIRANDO {:.1f} E {:.1f},A MEDIA DO ALUNO E {:.1f}'.format(nota1, nota2, media))\nif 7 > media >=5:\n    print('O ALUNO ESTAR DE RECUPERAÇAO')\nelif media < 5:\n    print('O ALUNO ESTAR REPROVADO')\nelif media >= 7:\n    print('APROVADO!!!!')",
        "detail": "040",
        "documentation": {}
    },
    {
        "label": "nota2",
        "kind": 5,
        "importPath": "040",
        "description": "040",
        "peekOfCode": "nota2 = float(input('DIGITE A SEGUNDA NOTA '))\nmedia = (nota1 + nota2) / 2\nprint('TIRANDO {:.1f} E {:.1f},A MEDIA DO ALUNO E {:.1f}'.format(nota1, nota2, media))\nif 7 > media >=5:\n    print('O ALUNO ESTAR DE RECUPERAÇAO')\nelif media < 5:\n    print('O ALUNO ESTAR REPROVADO')\nelif media >= 7:\n    print('APROVADO!!!!')",
        "detail": "040",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "040",
        "description": "040",
        "peekOfCode": "media = (nota1 + nota2) / 2\nprint('TIRANDO {:.1f} E {:.1f},A MEDIA DO ALUNO E {:.1f}'.format(nota1, nota2, media))\nif 7 > media >=5:\n    print('O ALUNO ESTAR DE RECUPERAÇAO')\nelif media < 5:\n    print('O ALUNO ESTAR REPROVADO')\nelif media >= 7:\n    print('APROVADO!!!!')",
        "detail": "040",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "h = int(input('Digite sua data de nascimento:'))\nh1 = h - 2023\nprint('sua idade e {} VEJA SUA CATEGORIA'.format(h1))\nprint('\\033[32mANALIZANDO\\033[35m...............')\ntime.sleep(2)\nh2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nh3 = [-10, -11, -12, -13, -14]\nh4 = [-15, -16, -17, -18, -19]\nh5 = [-20]\nif h1 in h2:",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "h1 = h - 2023\nprint('sua idade e {} VEJA SUA CATEGORIA'.format(h1))\nprint('\\033[32mANALIZANDO\\033[35m...............')\ntime.sleep(2)\nh2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nh3 = [-10, -11, -12, -13, -14]\nh4 = [-15, -16, -17, -18, -19]\nh5 = [-20]\nif h1 in h2:\n    print('Sua categoria e \\033[36mMIRIM')",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "h2 = [-1, -2, -3, -4, -5, -6, -7, -8, -9]\nh3 = [-10, -11, -12, -13, -14]\nh4 = [-15, -16, -17, -18, -19]\nh5 = [-20]\nif h1 in h2:\n    print('Sua categoria e \\033[36mMIRIM')\nelif h1 in h3:\n    print('Sua categoria e \\033[35mINFANTIL')\nelif h1 in h4:\n    print('Sua categoria e \\033[34mJUNIOR')",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "h3 = [-10, -11, -12, -13, -14]\nh4 = [-15, -16, -17, -18, -19]\nh5 = [-20]\nif h1 in h2:\n    print('Sua categoria e \\033[36mMIRIM')\nelif h1 in h3:\n    print('Sua categoria e \\033[35mINFANTIL')\nelif h1 in h4:\n    print('Sua categoria e \\033[34mJUNIOR')\nelif h1 in h5:",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "h4 = [-15, -16, -17, -18, -19]\nh5 = [-20]\nif h1 in h2:\n    print('Sua categoria e \\033[36mMIRIM')\nelif h1 in h3:\n    print('Sua categoria e \\033[35mINFANTIL')\nelif h1 in h4:\n    print('Sua categoria e \\033[34mJUNIOR')\nelif h1 in h5:\n    print('Sua categoria e \\033[33mSÊNIOR')",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "h5",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "h5 = [-20]\nif h1 in h2:\n    print('Sua categoria e \\033[36mMIRIM')\nelif h1 in h3:\n    print('Sua categoria e \\033[35mINFANTIL')\nelif h1 in h4:\n    print('Sua categoria e \\033[34mJUNIOR')\nelif h1 in h5:\n    print('Sua categoria e \\033[33mSÊNIOR')\nelif h1 <= -21:",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "atual",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "atual = date.today().year\nnascimento = int(input('ANO DE NASCIMENTO: '))\nidade = atual - nascimento\nprint('O ATLETA EM {} ANOS'.format(idade))\nif idade <= 9:\n    print('CLASIFICAÇAOE E MIRIM')\nelif idade <= 14:\n    print('CLASIFICAÇAO E INFANTIL')\nelif idade <= 19:\n    print('CLASIFICAÇAO E JUNIOR')",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "nascimento",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "nascimento = int(input('ANO DE NASCIMENTO: '))\nidade = atual - nascimento\nprint('O ATLETA EM {} ANOS'.format(idade))\nif idade <= 9:\n    print('CLASIFICAÇAOE E MIRIM')\nelif idade <= 14:\n    print('CLASIFICAÇAO E INFANTIL')\nelif idade <= 19:\n    print('CLASIFICAÇAO E JUNIOR')\nelif idade <= 25:",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "idade",
        "kind": 5,
        "importPath": "041",
        "description": "041",
        "peekOfCode": "idade = atual - nascimento\nprint('O ATLETA EM {} ANOS'.format(idade))\nif idade <= 9:\n    print('CLASIFICAÇAOE E MIRIM')\nelif idade <= 14:\n    print('CLASIFICAÇAO E INFANTIL')\nelif idade <= 19:\n    print('CLASIFICAÇAO E JUNIOR')\nelif idade <= 25:\n    print('CLASSIFICAÇAO E SENIOR')",
        "detail": "041",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "042",
        "description": "042",
        "peekOfCode": "h1 = float(input('Primeiro segmento: '))\nh2 = float(input('Segudo segmento: '))\nh3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO', end ='')\n        if h1 == h2 == h3:\n            print(' EQUILATERO')\n        elif h1 != h2 != h3 != h1:\n            print('ESCALENO')\n        else:",
        "detail": "042",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "042",
        "description": "042",
        "peekOfCode": "h2 = float(input('Segudo segmento: '))\nh3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO', end ='')\n        if h1 == h2 == h3:\n            print(' EQUILATERO')\n        elif h1 != h2 != h3 != h1:\n            print('ESCALENO')\n        else:\n            print(' ISOSCELES')",
        "detail": "042",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "042",
        "description": "042",
        "peekOfCode": "h3 = float(input('Terceiro segmento: '))\nif h1 < h2 + h3 and h2 < h1 + h3 and h3 < h1 + h2:\n        print('Os segmentos acima PODEM FORMAR UM  TRIANGULO', end ='')\n        if h1 == h2 == h3:\n            print(' EQUILATERO')\n        elif h1 != h2 != h3 != h1:\n            print('ESCALENO')\n        else:\n            print(' ISOSCELES')\nelse:",
        "detail": "042",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "043",
        "description": "043",
        "peekOfCode": "peso = float(input('DIGITE SEU PESO EM KG: '))\naltura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('ABAIXO DO PESO')\nelif IMC < 25:\n    print('PESO IDEIAL')\nelif IMC < 30:\n    print('SOBREPESO')",
        "detail": "043",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "043",
        "description": "043",
        "peekOfCode": "altura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('ABAIXO DO PESO')\nelif IMC < 25:\n    print('PESO IDEIAL')\nelif IMC < 30:\n    print('SOBREPESO')\nelif IMC < 40:",
        "detail": "043",
        "documentation": {}
    },
    {
        "label": "IMC",
        "kind": 5,
        "importPath": "043",
        "description": "043",
        "peekOfCode": "IMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('ABAIXO DO PESO')\nelif IMC < 25:\n    print('PESO IDEIAL')\nelif IMC < 30:\n    print('SOBREPESO')\nelif IMC < 40:\n    print('OBSIDADE')",
        "detail": "043",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "043",
        "description": "043",
        "peekOfCode": "peso = float(input('DIGITE SEU PESO EM KG: '))\naltura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('VOCE ESTAR ABAIXO DO PESO NORMAL')\nelif 18.5 <= IMC < 25:\n    print('PARABENS SEU PESO E IDEIAL')\nelif 25 <= IMC < 30:\n    print('VOCE ESTAR EM SOBREPESO')",
        "detail": "043",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "043",
        "description": "043",
        "peekOfCode": "altura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('VOCE ESTAR ABAIXO DO PESO NORMAL')\nelif 18.5 <= IMC < 25:\n    print('PARABENS SEU PESO E IDEIAL')\nelif 25 <= IMC < 30:\n    print('VOCE ESTAR EM SOBREPESO')\nelif 30 <= IMC < 40:",
        "detail": "043",
        "documentation": {}
    },
    {
        "label": "IMC",
        "kind": 5,
        "importPath": "043",
        "description": "043",
        "peekOfCode": "IMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('VOCE ESTAR ABAIXO DO PESO NORMAL')\nelif 18.5 <= IMC < 25:\n    print('PARABENS SEU PESO E IDEIAL')\nelif 25 <= IMC < 30:\n    print('VOCE ESTAR EM SOBREPESO')\nelif 30 <= IMC < 40:\n    print('CUIDADO OBSIDADE')",
        "detail": "043",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "peso = float(input('DIGITE SEU PESO EM KG: '))\naltura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('ABAIXO DO PESO')\nelif IMC < 25:\n    print('PESO IDEIAL')\nelif IMC < 30:\n    print('SOBREPESO')",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "altura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('ABAIXO DO PESO')\nelif IMC < 25:\n    print('PESO IDEIAL')\nelif IMC < 30:\n    print('SOBREPESO')\nelif IMC < 40:",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "IMC",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "IMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('ABAIXO DO PESO')\nelif IMC < 25:\n    print('PESO IDEIAL')\nelif IMC < 30:\n    print('SOBREPESO')\nelif IMC < 40:\n    print('OBSIDADE')",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "peso = float(input('DIGITE SEU PESO EM KG: '))\naltura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('VOCE ESTAR ABAIXO DO PESO NORMAL')\nelif 18.5 <= IMC < 25:\n    print('PARABENS SEU PESO E IDEIAL')\nelif 25 <= IMC < 30:\n    print('VOCE ESTAR EM SOBREPESO')",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "altura",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "altura = float(input('DIGITE SUA ALTURA: '))\nIMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('VOCE ESTAR ABAIXO DO PESO NORMAL')\nelif 18.5 <= IMC < 25:\n    print('PARABENS SEU PESO E IDEIAL')\nelif 25 <= IMC < 30:\n    print('VOCE ESTAR EM SOBREPESO')\nelif 30 <= IMC < 40:",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "IMC",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "IMC = float(peso/(altura*altura))\nprint('O SEU IMC E {:.1f} '.format(IMC))\nif IMC < 18.5:\n    print('VOCE ESTAR ABAIXO DO PESO NORMAL')\nelif 18.5 <= IMC < 25:\n    print('PARABENS SEU PESO E IDEIAL')\nelif 25 <= IMC < 30:\n    print('VOCE ESTAR EM SOBREPESO')\nelif 30 <= IMC < 40:\n    print('CUIDADO OBSIDADE')",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "h = float(input('QUAL O VALOR DA SUAS COMPRAS R$:'))\nprint('''\n[ 1 ] A VISTA OU CHEQUE C/ 10%\n[ 2 ] A VISTA NO CARTAO DE CREDITO C/ 5%\n[ 3 ] 2X NO CARTAO DE CREDITO\n[ 4 ] 3x no cartado de credito c/ 20% de acrecimo''')\nh1 = int(input('QUAL E A OPÇAO? '))\nh2 = int(input('EM QUATAS VEZES VC QUER PARCELAR ?'))\nif h1 == 1:\n    print('A VISTA OU CHEQUE C/ 10% DE DESCONTO R$: {}'.format(h-(h*10)/100))",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "h1 = int(input('QUAL E A OPÇAO? '))\nh2 = int(input('EM QUATAS VEZES VC QUER PARCELAR ?'))\nif h1 == 1:\n    print('A VISTA OU CHEQUE C/ 10% DE DESCONTO R$: {}'.format(h-(h*10)/100))\nelif h1 == 2:\n    print('A VISTA NO CARTAO DE CREDITO C/ 5% DE DESCONTO R$: {}'.format(h - (h * 5) / 100))\nelif h1 == 3:\n    print('2X NO CARTAO DE CREDITO VALOR NORMAL {}'.format(h))\nelif h1 == 4:\n    print('3x ou mais no cartado de credito c/ 20% de acrecimo VALOR FINAL R$: {}'.format(h + (h * 20) / 100))",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "044",
        "description": "044",
        "peekOfCode": "h2 = int(input('EM QUATAS VEZES VC QUER PARCELAR ?'))\nif h1 == 1:\n    print('A VISTA OU CHEQUE C/ 10% DE DESCONTO R$: {}'.format(h-(h*10)/100))\nelif h1 == 2:\n    print('A VISTA NO CARTAO DE CREDITO C/ 5% DE DESCONTO R$: {}'.format(h - (h * 5) / 100))\nelif h1 == 3:\n    print('2X NO CARTAO DE CREDITO VALOR NORMAL {}'.format(h))\nelif h1 == 4:\n    print('3x ou mais no cartado de credito c/ 20% de acrecimo VALOR FINAL R$: {}'.format(h + (h * 20) / 100))",
        "detail": "044",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "045",
        "description": "045",
        "peekOfCode": "lista = ['PEDRA', 'PAPEL', 'TESOURA']\nh = int(input('QUAL E A SUA JOGADA? '))\nh2 = random.randint(0, 2)\nprint('JO')\nsleep(2)\nprint('kEN')\nsleep(1)\nprint('POW!!!!')\nprint('-='*20)\nprint('VOCE ESCOLHEU {} '.format(lista[h]))",
        "detail": "045",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "045",
        "description": "045",
        "peekOfCode": "h = int(input('QUAL E A SUA JOGADA? '))\nh2 = random.randint(0, 2)\nprint('JO')\nsleep(2)\nprint('kEN')\nsleep(1)\nprint('POW!!!!')\nprint('-='*20)\nprint('VOCE ESCOLHEU {} '.format(lista[h]))\nprint('O COMPUTADOER ESCOLHEU {}'.format(lista[h2]))",
        "detail": "045",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "045",
        "description": "045",
        "peekOfCode": "h2 = random.randint(0, 2)\nprint('JO')\nsleep(2)\nprint('kEN')\nsleep(1)\nprint('POW!!!!')\nprint('-='*20)\nprint('VOCE ESCOLHEU {} '.format(lista[h]))\nprint('O COMPUTADOER ESCOLHEU {}'.format(lista[h2]))\nif h2 == 0:",
        "detail": "045",
        "documentation": {}
    },
    {
        "label": "item",
        "kind": 5,
        "importPath": "045",
        "description": "045",
        "peekOfCode": "item = ('PEDRA ', 'PAPEL', 'TESOURA')\ncomputador = randint(0, 2)\nprint('''SUAS OPÇOES\n[ 0 ] PEDRA\n[ 1 ] PAPEL\n[ 2 ] TESORA''')\njogador = int(input('QUAL E A SUA JOOGADA '))\nprint('='*25)\nprint('O COMUTADOR ESCOLHEU {}'.format(item[computador]))\nprint('O JOGADOR ESCOHEU {}'.format(item[jogador]))",
        "detail": "045",
        "documentation": {}
    },
    {
        "label": "computador",
        "kind": 5,
        "importPath": "045",
        "description": "045",
        "peekOfCode": "computador = randint(0, 2)\nprint('''SUAS OPÇOES\n[ 0 ] PEDRA\n[ 1 ] PAPEL\n[ 2 ] TESORA''')\njogador = int(input('QUAL E A SUA JOOGADA '))\nprint('='*25)\nprint('O COMUTADOR ESCOLHEU {}'.format(item[computador]))\nprint('O JOGADOR ESCOHEU {}'.format(item[jogador]))\nprint('='*25)",
        "detail": "045",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "045",
        "description": "045",
        "peekOfCode": "jogador = int(input('QUAL E A SUA JOOGADA '))\nprint('='*25)\nprint('O COMUTADOR ESCOLHEU {}'.format(item[computador]))\nprint('O JOGADOR ESCOHEU {}'.format(item[jogador]))\nprint('='*25)\nif computador == 0:\n    if jogador == 0:\n        print('EMPATE')\n    elif jogador == 1:\n        print('JOGADOR VENCE')",
        "detail": "045",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "046",
        "description": "046",
        "peekOfCode": "h1 = int(input('NUMERO PARA VER SUA TABOADA: '))\nfor h in range(0, 11):\n    h2 = h1*h\n    print('\\033[36m{} X \\033[34m{} = \\033[31m{} '.format( h1, h, h2))\nprint('-------------FIM-----------')\n#============= COMO O PROFESSOR FEZ =================",
        "detail": "046",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "048",
        "description": "048",
        "peekOfCode": "h2 = 0\nfor h in range(1,501, 2):\n    sleep(1)\n    h1 = ( h%2 ) == 1\n    h2 += h\n    print('\\033[36mIMPAR | '\n          '\\033[31m{} | '\n          '\\033[36m{} | '\n          '\\033[31m{} |'.format(h1, h, h2))\nprint('\\033[31mA SOMA ENTRE TODOS OS NUMEROS IMPAR DA ')",
        "detail": "048",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "049 ",
        "description": "049 ",
        "peekOfCode": "h1 = int(input('NUMERO PARA VER SUA TABOADA: '))\nfor h in range(0, 11):\n    sleep(1)\n    h2 = h1*h\n    print('\\033[36m{} X \\033[34m{} = \\033[31m{} '.format( h1, h, h2))\nprint('-------------FIM-----------')\n#============= COMO O PROFESSOR FEZ =================v",
        "detail": "049 ",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "050",
        "description": "050",
        "peekOfCode": "h2 = 0\nfor h in range(1, 7):\n    num = int(input('\\033[32mDIGITE UM NUMERO: '))\n    h1 = (num % 2) == 1\n    h2 += num - h1\n    if h1 == 0:\n        print('\\033[36mPAR')\n    elif h1 == 1:\n        print('\\033[35mIMPAR')\n    print('''=======================================''')",
        "detail": "050",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "050",
        "description": "050",
        "peekOfCode": "soma = 0\ncont = 0\nfor c in range(1, 7):\n    num = int(input('DIGIEUM NUMERO: '))\n    if num % 2 == 0:\n        soma += num\n        cont += 1\nprint('VOCE INFORMOU {} NUMEROS PARES E A SOMA DA {}'.format(cont, soma))",
        "detail": "050",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "050",
        "description": "050",
        "peekOfCode": "cont = 0\nfor c in range(1, 7):\n    num = int(input('DIGIEUM NUMERO: '))\n    if num % 2 == 0:\n        soma += num\n        cont += 1\nprint('VOCE INFORMOU {} NUMEROS PARES E A SOMA DA {}'.format(cont, soma))",
        "detail": "050",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "051",
        "description": "051",
        "peekOfCode": "h1 = int(input('PRIMEIRO TERMO: '))\nh2 = int(input('RAZAO: '))\nfor h in range(h1, 21 - h2, h2):\n    print(h, end=' -> ')\nprint('ACABOU')\n#------------------como O PROFESSOR FEZ-------------------\nprimeiro = int(input(\"PRIMEIRO TERMO: \"))\nrazao = int(input('RAZAO: '))\ndecimo = primeiro + (10 -1) * razao #PARA MOSTRAR ATE A 10 CASA\nfor c in range(primeiro, decimo + razao, razao):",
        "detail": "051",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "051",
        "description": "051",
        "peekOfCode": "h2 = int(input('RAZAO: '))\nfor h in range(h1, 21 - h2, h2):\n    print(h, end=' -> ')\nprint('ACABOU')\n#------------------como O PROFESSOR FEZ-------------------\nprimeiro = int(input(\"PRIMEIRO TERMO: \"))\nrazao = int(input('RAZAO: '))\ndecimo = primeiro + (10 -1) * razao #PARA MOSTRAR ATE A 10 CASA\nfor c in range(primeiro, decimo + razao, razao):\n    print('{}'.format(c), end=' -> ')",
        "detail": "051",
        "documentation": {}
    },
    {
        "label": "primeiro",
        "kind": 5,
        "importPath": "051",
        "description": "051",
        "peekOfCode": "primeiro = int(input(\"PRIMEIRO TERMO: \"))\nrazao = int(input('RAZAO: '))\ndecimo = primeiro + (10 -1) * razao #PARA MOSTRAR ATE A 10 CASA\nfor c in range(primeiro, decimo + razao, razao):\n    print('{}'.format(c), end=' -> ')\nprint('ACABOU')",
        "detail": "051",
        "documentation": {}
    },
    {
        "label": "razao",
        "kind": 5,
        "importPath": "051",
        "description": "051",
        "peekOfCode": "razao = int(input('RAZAO: '))\ndecimo = primeiro + (10 -1) * razao #PARA MOSTRAR ATE A 10 CASA\nfor c in range(primeiro, decimo + razao, razao):\n    print('{}'.format(c), end=' -> ')\nprint('ACABOU')",
        "detail": "051",
        "documentation": {}
    },
    {
        "label": "decimo",
        "kind": 5,
        "importPath": "051",
        "description": "051",
        "peekOfCode": "decimo = primeiro + (10 -1) * razao #PARA MOSTRAR ATE A 10 CASA\nfor c in range(primeiro, decimo + razao, razao):\n    print('{}'.format(c), end=' -> ')\nprint('ACABOU')",
        "detail": "051",
        "documentation": {}
    },
    {
        "label": "tot",
        "kind": 5,
        "importPath": "052",
        "description": "052",
        "peekOfCode": "tot = 0\nnum = int(input('DIGITE UM NUMERO: '))\nfor c in range(1, num + 1):\n    if num % c == 0:\n        print('\\033[33m', end=' ')\n        tot += 1\n    else:\n        print('\\033[31m', end=' ')\n    print('{}'.format(c), end=' ')\nprint('\\n\\033[mo numero {} foi divizivel {} vezes'.format(num, tot))",
        "detail": "052",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "052",
        "description": "052",
        "peekOfCode": "num = int(input('DIGITE UM NUMERO: '))\nfor c in range(1, num + 1):\n    if num % c == 0:\n        print('\\033[33m', end=' ')\n        tot += 1\n    else:\n        print('\\033[31m', end=' ')\n    print('{}'.format(c), end=' ')\nprint('\\n\\033[mo numero {} foi divizivel {} vezes'.format(num, tot))\nif tot == 2:",
        "detail": "052",
        "documentation": {}
    },
    {
        "label": "pali",
        "kind": 5,
        "importPath": "053",
        "description": "053",
        "peekOfCode": "pali = input('Digite um palavra: ').upper().replace(' ','')\nif pali == pali[:: -1]: # PRIMEIRO : DO PRIMEIRO / SEGUNDO : ATE A ULTIMA CASA : -1 DE TRAIS PRA FRENTE\n    print('A palavra é Palindroma','\\n')\n    print('Palavra Invertida: {}'.format(pali),'\\n')\nelse:\n    print('A palavra não é Palindroma','\\n')\nprint('Palavra Digitada: {} '.format(pali),'\\n')\n#------------------como O PROFESSOR FEZ-------------------\nfrase = str(input('digite uma frase')).strip() .upper()\npalavras = frase.split()",
        "detail": "053",
        "documentation": {}
    },
    {
        "label": "frase",
        "kind": 5,
        "importPath": "053",
        "description": "053",
        "peekOfCode": "frase = str(input('digite uma frase')).strip() .upper()\npalavras = frase.split()\njunto = ''.join(palavras)\ninverso = ''\nfor letras in range(len(junto) -1, -1, -1):\n    inverso += junto[letras]\nif inverso == junto:\n    print('TEMOS UM PALINDROMO! ')\nelse:\n    print('NAO E UM PALINDROMO! ')",
        "detail": "053",
        "documentation": {}
    },
    {
        "label": "palavras",
        "kind": 5,
        "importPath": "053",
        "description": "053",
        "peekOfCode": "palavras = frase.split()\njunto = ''.join(palavras)\ninverso = ''\nfor letras in range(len(junto) -1, -1, -1):\n    inverso += junto[letras]\nif inverso == junto:\n    print('TEMOS UM PALINDROMO! ')\nelse:\n    print('NAO E UM PALINDROMO! ')",
        "detail": "053",
        "documentation": {}
    },
    {
        "label": "junto",
        "kind": 5,
        "importPath": "053",
        "description": "053",
        "peekOfCode": "junto = ''.join(palavras)\ninverso = ''\nfor letras in range(len(junto) -1, -1, -1):\n    inverso += junto[letras]\nif inverso == junto:\n    print('TEMOS UM PALINDROMO! ')\nelse:\n    print('NAO E UM PALINDROMO! ')",
        "detail": "053",
        "documentation": {}
    },
    {
        "label": "inverso",
        "kind": 5,
        "importPath": "053",
        "description": "053",
        "peekOfCode": "inverso = ''\nfor letras in range(len(junto) -1, -1, -1):\n    inverso += junto[letras]\nif inverso == junto:\n    print('TEMOS UM PALINDROMO! ')\nelse:\n    print('NAO E UM PALINDROMO! ')",
        "detail": "053",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "054",
        "description": "054",
        "peekOfCode": "cont = 0\nmenor = 0\nfor ist in range(1, 8):\n    ano = int(input('\\033[32mDIGITE O  ANO DO SEU NASCIMMENTO:'))\n    soma = date.today().year -ano\n    cont += soma >= 18\n    menor += soma <= 17\n    print('{} ANOS '.format(soma))\nif soma >= 18:\n    print('\\033[36mTEM {} MIORES DE IDADE E'.format(cont))",
        "detail": "054",
        "documentation": {}
    },
    {
        "label": "menor",
        "kind": 5,
        "importPath": "054",
        "description": "054",
        "peekOfCode": "menor = 0\nfor ist in range(1, 8):\n    ano = int(input('\\033[32mDIGITE O  ANO DO SEU NASCIMMENTO:'))\n    soma = date.today().year -ano\n    cont += soma >= 18\n    menor += soma <= 17\n    print('{} ANOS '.format(soma))\nif soma >= 18:\n    print('\\033[36mTEM {} MIORES DE IDADE E'.format(cont))\n    print('{} MENORES DE IDADE'.format(menor))",
        "detail": "054",
        "documentation": {}
    },
    {
        "label": "totm",
        "kind": 5,
        "importPath": "054",
        "description": "054",
        "peekOfCode": "totm = 0\ntotn = 0\nfrom datetime import date\natual = date.today().year\nfor pess in range(1,8):\n    nasc = int(input('QUAL O  ANO DE NSCIMENTO'))\n    idade = atual - nasc\n    if idade >= 21:\n        totm += 1\n    else:",
        "detail": "054",
        "documentation": {}
    },
    {
        "label": "totn",
        "kind": 5,
        "importPath": "054",
        "description": "054",
        "peekOfCode": "totn = 0\nfrom datetime import date\natual = date.today().year\nfor pess in range(1,8):\n    nasc = int(input('QUAL O  ANO DE NSCIMENTO'))\n    idade = atual - nasc\n    if idade >= 21:\n        totm += 1\n    else:\n        totn += 1",
        "detail": "054",
        "documentation": {}
    },
    {
        "label": "atual",
        "kind": 5,
        "importPath": "054",
        "description": "054",
        "peekOfCode": "atual = date.today().year\nfor pess in range(1,8):\n    nasc = int(input('QUAL O  ANO DE NSCIMENTO'))\n    idade = atual - nasc\n    if idade >= 21:\n        totm += 1\n    else:\n        totn += 1\nprint('AO TODOS TIVEMOS {} PESSSOAS \\033[31mMAIOR\\033[m DE IDADE'.format(totm))\nprint('AO TODOS TIVEMOS {} PESSSOAS \\033[36mMENOR\\033[m DE IDADE'.format(totn))",
        "detail": "054",
        "documentation": {}
    },
    {
        "label": "maior",
        "kind": 5,
        "importPath": "055",
        "description": "055",
        "peekOfCode": "maior = 0\nmenor = 0\nfor p in range(1, 6):\n    peso = float(input('Peso da {}ª pessoa: '.format(p)))\n    if p == 1:  # o primeiro peso será o maior e menor no primeiro laço, depois ele ira analisar os proximos pesos.\n        maior = peso\n        menor = peso\n    else:\n        if peso > maior:\n            maior = peso",
        "detail": "055",
        "documentation": {}
    },
    {
        "label": "menor",
        "kind": 5,
        "importPath": "055",
        "description": "055",
        "peekOfCode": "menor = 0\nfor p in range(1, 6):\n    peso = float(input('Peso da {}ª pessoa: '.format(p)))\n    if p == 1:  # o primeiro peso será o maior e menor no primeiro laço, depois ele ira analisar os proximos pesos.\n        maior = peso\n        menor = peso\n    else:\n        if peso > maior:\n            maior = peso\n        if peso < menor:",
        "detail": "055",
        "documentation": {}
    },
    {
        "label": "ida",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "ida = 0\nfor h in range(1):\n    nome = str(input('\\033[32m {}° QUANL E SEU NOME?  '.format(h))).upper()\n    idade = int(input(' {}° digite sua idade: '.format(h)))\n    print('''\nQUAL SEU SEXO? =====================>\n    \\n\\033[33m[ 0 ] MASCOLINO   \\n\\033[35m[ 1 ] FEMININO\n''')\n    sexo = int(input('0 / 1 ? '))\n    print('\\033[34m========================== ')",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "somaidade",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "somaidade = 0\nmediaidade = 0\nmaioridadehomem = 0\nnomevelho = 0\ntotmulher20 = 0\nfor p in range(1, 5):\n    print('----------{}° Pessoa ------'.format(p))\n    nome = str(input('Nome: ')) .strip()\n    idade = int(input('Idade: '))\n    sexo = str(input('Sexo [ M / F ]')).strip()",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "mediaidade",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "mediaidade = 0\nmaioridadehomem = 0\nnomevelho = 0\ntotmulher20 = 0\nfor p in range(1, 5):\n    print('----------{}° Pessoa ------'.format(p))\n    nome = str(input('Nome: ')) .strip()\n    idade = int(input('Idade: '))\n    sexo = str(input('Sexo [ M / F ]')).strip()\n    somaidade += idade",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "maioridadehomem",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "maioridadehomem = 0\nnomevelho = 0\ntotmulher20 = 0\nfor p in range(1, 5):\n    print('----------{}° Pessoa ------'.format(p))\n    nome = str(input('Nome: ')) .strip()\n    idade = int(input('Idade: '))\n    sexo = str(input('Sexo [ M / F ]')).strip()\n    somaidade += idade\n    if p == 1 and sexo in \"Mn\":",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "nomevelho",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "nomevelho = 0\ntotmulher20 = 0\nfor p in range(1, 5):\n    print('----------{}° Pessoa ------'.format(p))\n    nome = str(input('Nome: ')) .strip()\n    idade = int(input('Idade: '))\n    sexo = str(input('Sexo [ M / F ]')).strip()\n    somaidade += idade\n    if p == 1 and sexo in \"Mn\":\n        maioridadehomem = idade",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "totmulher20",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "totmulher20 = 0\nfor p in range(1, 5):\n    print('----------{}° Pessoa ------'.format(p))\n    nome = str(input('Nome: ')) .strip()\n    idade = int(input('Idade: '))\n    sexo = str(input('Sexo [ M / F ]')).strip()\n    somaidade += idade\n    if p == 1 and sexo in \"Mn\":\n        maioridadehomem = idade\n        nomevelho = nome",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "mediaidade",
        "kind": 5,
        "importPath": "056",
        "description": "056",
        "peekOfCode": "mediaidade = somaidade /4\nprint('A MEDIA DO GRUPO E {}'.format(mediaidade))\nprint('O HOMEM MAIS VELHO TEM {} E O NOME DELE E {}'.format(maioridadehomem, nomevelho))\nprint('AO TODO SAO {] MULHERES COM MENOS DE 20 ANOS'.format(totmulher20))",
        "detail": "056",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "057",
        "description": "057",
        "peekOfCode": "h = '0'\nh1 = 1\nwhile h !='.':\n    h1 = ['F', 'M']\n    print('''\nM - MASCOLINO\nF - FEMININO \n''')\n    h = str(input('[ M | F ] : ')).upper()\n    if h == 'M':",
        "detail": "057",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "057",
        "description": "057",
        "peekOfCode": "h1 = 1\nwhile h !='.':\n    h1 = ['F', 'M']\n    print('''\nM - MASCOLINO\nF - FEMININO \n''')\n    h = str(input('[ M | F ] : ')).upper()\n    if h == 'M':\n        print('seja bem vindo!')",
        "detail": "057",
        "documentation": {}
    },
    {
        "label": "sexo",
        "kind": 5,
        "importPath": "057",
        "description": "057",
        "peekOfCode": "sexo = str(input('DIGITE SEU SEXO [M/F] :  ')).strip().upper()[0]\nwhile sexo not in 'FfMm':\n    sexo = str(input('DADOS INVALIDOS. POR FAVOR, INFORME SEU SEXO: ')).strip().upper()[0]\nprint('SEXO {} REGISTRADO COM SUCESSO!!'.format(sexo))",
        "detail": "057",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "c = 0\na = 1\nh = 0\nnovo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "a = 1\nh = 0\nnovo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "h = 0\nnovo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')\nwhile novo != h:",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "novo",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "novo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')\nwhile novo != h:\n    h = random.randint(0, 10)",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "computador",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "computador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')\nwhile novo != h:\n    h = random.randint(0, 10)\n    a += 1\n    novo = int(input('\\033[31mTENTE NOVAMENTE!!! \\033[m\\nESCOLHA UM NUMERO ENTRE 1 A 10:'))\n    print('\\033[34mANALIZANDO\\033[33m..................................\\033[m')\n    sleep(1)\n    print('\\033[33mcomputador: {} \\033[m| \\033[34mJOGADOR {}\\033[m'.format(h, novo))",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "computador",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "computador =  randint(0, 10)\nprint('SOU SEU COMPUTADOR ACABEI DE PENSAR EM UM NUMRO ENTRE 0 A 10')\nprint('SERA QUE VC CONSEGUI ADIVINHAR QUAL FOI?')\nacertou = False\npalpites = 0\nwhile not acertou:\n    jogador = int(input('QUAL O SEU PALPITE?'))\n    palpites += 1\n    if jogador == computador:\n        acertou = True",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "acertou",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "acertou = False\npalpites = 0\nwhile not acertou:\n    jogador = int(input('QUAL O SEU PALPITE?'))\n    palpites += 1\n    if jogador == computador:\n        acertou = True\n    else:\n        if jogador < computador:\n            print('MAIS....TENTE MAIS UMA VEZ')",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "palpites",
        "kind": 5,
        "importPath": "058",
        "description": "058",
        "peekOfCode": "palpites = 0\nwhile not acertou:\n    jogador = int(input('QUAL O SEU PALPITE?'))\n    palpites += 1\n    if jogador == computador:\n        acertou = True\n    else:\n        if jogador < computador:\n            print('MAIS....TENTE MAIS UMA VEZ')\n        elif jogador > computador:",
        "detail": "058",
        "documentation": {}
    },
    {
        "label": "h1",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "h1 = 0\nh2 = 0\nh3 = 1\nh4 = 0\nh7 = 0\nh = 0\np = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "h2",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "h2 = 0\nh3 = 1\nh4 = 0\nh7 = 0\nh = 0\np = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "h3",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "h3 = 1\nh4 = 0\nh7 = 0\nh = 0\np = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1\n    h3 = h3 * h1",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "h4",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "h4 = 0\nh7 = 0\nh = 0\np = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1\n    h3 = h3 * h1\nprint('''",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "h7",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "h7 = 0\nh = 0\np = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1\n    h3 = h3 * h1\nprint('''\n[ 1 ] Somar",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "h = 0\np = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1\n    h3 = h3 * h1\nprint('''\n[ 1 ] Somar\n[ 2 ] Multiplicar",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "p = 0\nnu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1\n    h3 = h3 * h1\nprint('''\n[ 1 ] Somar\n[ 2 ] Multiplicar\n[ 3 ] Maior",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "nu",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "nu = 0\nfor num in range(1,3):\n    h1 = int(input('{}° VALOR :'.format(num)))\n    h += h1\n    h3 = h3 * h1\nprint('''\n[ 1 ] Somar\n[ 2 ] Multiplicar\n[ 3 ] Maior\n[ 4 ] Novos Numeros",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "n1 = int(input('PRIMEIRO NUMERO: '))\nn2 = int(input('SEGUNDO NUMERO: '))\nopçao = 0\nwhile opçao != 5:\n    print('''    [ 1 ] somar\n    [ 2 ] multiplicar\n    [ 3 ] maior\n    [ 4 ] novos numeros\n    [ 5 ] sair do programa''')\n    opçao = int(input('QUAL  E SUA OPÇAO? '))",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "n2 = int(input('SEGUNDO NUMERO: '))\nopçao = 0\nwhile opçao != 5:\n    print('''    [ 1 ] somar\n    [ 2 ] multiplicar\n    [ 3 ] maior\n    [ 4 ] novos numeros\n    [ 5 ] sair do programa''')\n    opçao = int(input('QUAL  E SUA OPÇAO? '))\n    if opçao  == 1:",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "opçao",
        "kind": 5,
        "importPath": "059",
        "description": "059",
        "peekOfCode": "opçao = 0\nwhile opçao != 5:\n    print('''    [ 1 ] somar\n    [ 2 ] multiplicar\n    [ 3 ] maior\n    [ 4 ] novos numeros\n    [ 5 ] sair do programa''')\n    opçao = int(input('QUAL  E SUA OPÇAO? '))\n    if opçao  == 1:\n        soma = n1 + n2",
        "detail": "059",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "c = 1\nn = int(input('DIGITE UM UM NUMERO: '))\nfor l in range(n, 1, -1):\n    c *= l\nprint(c)\n#========== COMO O PROFESOR FEZ =================\nfrom math import factorial\nn = int(input('DIGITE UM NUERO PARA VER SEU FATORIAL;'))\nf = factorial(n)\nprint('O FATORIAL DE {} E {}'.format(n, f))",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "n = int(input('DIGITE UM UM NUMERO: '))\nfor l in range(n, 1, -1):\n    c *= l\nprint(c)\n#========== COMO O PROFESOR FEZ =================\nfrom math import factorial\nn = int(input('DIGITE UM NUERO PARA VER SEU FATORIAL;'))\nf = factorial(n)\nprint('O FATORIAL DE {} E {}'.format(n, f))\n#==========#==========#==========#==========#==========#==========",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "n = int(input('DIGITE UM NUERO PARA VER SEU FATORIAL;'))\nf = factorial(n)\nprint('O FATORIAL DE {} E {}'.format(n, f))\n#==========#==========#==========#==========#==========#==========\nn = int(input('DIGITE UM NUERO PARA VER SEU FATORIAL;'))\nc = n\nf = 1\nprint('CALCULANDO {}!'.format(n), end='')\nwhile c > 0:\n    print('faorial de {} x'.format(c), end=' ')",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "f = factorial(n)\nprint('O FATORIAL DE {} E {}'.format(n, f))\n#==========#==========#==========#==========#==========#==========\nn = int(input('DIGITE UM NUERO PARA VER SEU FATORIAL;'))\nc = n\nf = 1\nprint('CALCULANDO {}!'.format(n), end='')\nwhile c > 0:\n    print('faorial de {} x'.format(c), end=' ')\n    print('x' if c < 1 else '=', end=' ')",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "n = int(input('DIGITE UM NUERO PARA VER SEU FATORIAL;'))\nc = n\nf = 1\nprint('CALCULANDO {}!'.format(n), end='')\nwhile c > 0:\n    print('faorial de {} x'.format(c), end=' ')\n    print('x' if c < 1 else '=', end=' ')\n    c = -1\n    f *= c\nprint(f)",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "c = n\nf = 1\nprint('CALCULANDO {}!'.format(n), end='')\nwhile c > 0:\n    print('faorial de {} x'.format(c), end=' ')\n    print('x' if c < 1 else '=', end=' ')\n    c = -1\n    f *= c\nprint(f)",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "060",
        "description": "060",
        "peekOfCode": "f = 1\nprint('CALCULANDO {}!'.format(n), end='')\nwhile c > 0:\n    print('faorial de {} x'.format(c), end=' ')\n    print('x' if c < 1 else '=', end=' ')\n    c = -1\n    f *= c\nprint(f)",
        "detail": "060",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "061",
        "description": "061",
        "peekOfCode": "c = 0\nwhile c != 1:\n    primeiro = int(input('''\nPRIMEIRO TERMO: '''''))\n    razao = int(input('RAZAO: '))\n    decimo = primeiro + (10 - 1) * razao  # PARA MOSTRAR ATE A 10 CASA\n    for c in range(primeiro, decimo + razao, razao):\n        print('{}'.format(c), end=' -> ')\nprint('ACABOU')\n#========== COMO O PROFESOR FEZ =================",
        "detail": "061",
        "documentation": {}
    },
    {
        "label": "primeiro",
        "kind": 5,
        "importPath": "061",
        "description": "061",
        "peekOfCode": "primeiro = int(input('PRIMEIRO TERMO'))\nrazao = int(input('RAZAO '))\ntermo = primeiro\ncont = 1\nwhile cont < 10:\n    print('{}'.format(termo), end=' ')\n    termo += razao\n    cont += 1\nprint('FIM')",
        "detail": "061",
        "documentation": {}
    },
    {
        "label": "razao",
        "kind": 5,
        "importPath": "061",
        "description": "061",
        "peekOfCode": "razao = int(input('RAZAO '))\ntermo = primeiro\ncont = 1\nwhile cont < 10:\n    print('{}'.format(termo), end=' ')\n    termo += razao\n    cont += 1\nprint('FIM')",
        "detail": "061",
        "documentation": {}
    },
    {
        "label": "termo",
        "kind": 5,
        "importPath": "061",
        "description": "061",
        "peekOfCode": "termo = primeiro\ncont = 1\nwhile cont < 10:\n    print('{}'.format(termo), end=' ')\n    termo += razao\n    cont += 1\nprint('FIM')",
        "detail": "061",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "061",
        "description": "061",
        "peekOfCode": "cont = 1\nwhile cont < 10:\n    print('{}'.format(termo), end=' ')\n    termo += razao\n    cont += 1\nprint('FIM')",
        "detail": "061",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "c = 0\na = 1\nh = 0\nnovo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "a = 1\nh = 0\nnovo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "h",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "h = 0\nnovo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')\nwhile novo != h:",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "novo",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "novo = int(input('''\n    =====VAMOS JOGAR=====\nESCOLHA UM NUMERO ENTRE 0 A 10: '''))\nprint('COMPUTADOR PENSANDO..........................')\nsleep(1)\ncomputador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')\nwhile novo != h:\n    h = random.randint(0, 10)",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "computador",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "computador = random.randint(0, 10)\nprint('computador: {} | JOGADOR {}'.format(computador, novo))\nprint('\\033[36m==============================================\\033[m')\nwhile novo != h:\n    h = random.randint(0, 10)\n    a += 1\n    novo = int(input('\\033[31mTENTE NOVAMENTE!!! \\033[m\\nESCOLHA UM NUMERO ENTRE 1 A 10:'))\n    print('\\033[34mANALIZANDO\\033[33m..................................\\033[m')\n    sleep(1)\n    print('\\033[33mcomputador: {} \\033[m| \\033[34mJOGADOR {}\\033[m'.format(h, novo))",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "computador",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "computador =  randint(0, 10)\nprint('SOU SEU COMPUTADOR ACABEI DE PENSAR EM UM NUMRO ENTRE 0 A 10')\nprint('SERA QUE VC CONSEGUI ADIVINHAR QUAL FOI?')\nacertou = False\npalpites = 0\nwhile not acertou:\n    jogador = int(input('QUAL O SEU PALPITE?'))\n    palpites += 1\n    if jogador == computador:\n        acertou = True",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "acertou",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "acertou = False\npalpites = 0\nwhile not acertou:\n    jogador = int(input('QUAL O SEU PALPITE?'))\n    palpites += 1\n    if jogador == computador:\n        acertou = True\n    else:\n        if jogador < computador:\n            print('MAIS....TENTE MAIS UMA VEZ')",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "palpites",
        "kind": 5,
        "importPath": "062",
        "description": "062",
        "peekOfCode": "palpites = 0\nwhile not acertou:\n    jogador = int(input('QUAL O SEU PALPITE?'))\n    palpites += 1\n    if jogador == computador:\n        acertou = True\n    else:\n        if jogador < computador:\n            print('MAIS....TENTE MAIS UMA VEZ')\n        elif jogador > computador:",
        "detail": "062",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "064",
        "description": "064",
        "peekOfCode": "num = 0\ncont = 1\nsoma = 1\nwhile num != 999:\n    num = int(input('digite um numero de 1 ao 999: '))\n    cont += 1\n    soma += num\nprint('VC DIGITOU {} VEZES E A SOMA DOS NUMEROS DA {}'.format(cont-2, soma-1000))\nprint('FIIM')\n#-------------------    COMO O PROFESSOR FEZ ---------------",
        "detail": "064",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "064",
        "description": "064",
        "peekOfCode": "cont = 1\nsoma = 1\nwhile num != 999:\n    num = int(input('digite um numero de 1 ao 999: '))\n    cont += 1\n    soma += num\nprint('VC DIGITOU {} VEZES E A SOMA DOS NUMEROS DA {}'.format(cont-2, soma-1000))\nprint('FIIM')\n#-------------------    COMO O PROFESSOR FEZ ---------------\nnum = cont = soma = 0",
        "detail": "064",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "064",
        "description": "064",
        "peekOfCode": "soma = 1\nwhile num != 999:\n    num = int(input('digite um numero de 1 ao 999: '))\n    cont += 1\n    soma += num\nprint('VC DIGITOU {} VEZES E A SOMA DOS NUMEROS DA {}'.format(cont-2, soma-1000))\nprint('FIIM')\n#-------------------    COMO O PROFESSOR FEZ ---------------\nnum = cont = soma = 0\nnum = int(input('DIGITE UM VALOR [999 STOP]')) #num  fora para  eliminar o flag para parar  da contagem da  soma",
        "detail": "064",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "064",
        "description": "064",
        "peekOfCode": "num = cont = soma = 0\nnum = int(input('DIGITE UM VALOR [999 STOP]')) #num  fora para  eliminar o flag para parar  da contagem da  soma\nwhile num != 999:\n    cont += 1\n    soma += num\n    num = int(input('DIGITE UM VALOR [999 STOP]'))#num  a soma so vai funcionar se tiver certo se o imput tiver n ultima linha do whilw\nprint('VOCE DIGITOU {} NUMEROS E A SOMA ENTRE ELES E {}'.format(cont, soma))\nprint('fim')",
        "detail": "064",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "064",
        "description": "064",
        "peekOfCode": "num = int(input('DIGITE UM VALOR [999 STOP]')) #num  fora para  eliminar o flag para parar  da contagem da  soma\nwhile num != 999:\n    cont += 1\n    soma += num\n    num = int(input('DIGITE UM VALOR [999 STOP]'))#num  a soma so vai funcionar se tiver certo se o imput tiver n ultima linha do whilw\nprint('VOCE DIGITOU {} NUMEROS E A SOMA ENTRE ELES E {}'.format(cont, soma))\nprint('fim')",
        "detail": "064",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "065",
        "description": "065",
        "peekOfCode": "n = 1\ncont = 0\nmedia = maior = menor = 0\nwhile n != 0:\n    n = int(input('[ 0 ] PARA PARAR | DIGITE UM NUMERO:'))\n    cont += 1\n    media += n\n    if cont == 1:\n        maior = menor = n\n    else:",
        "detail": "065",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "065",
        "description": "065",
        "peekOfCode": "cont = 0\nmedia = maior = menor = 0\nwhile n != 0:\n    n = int(input('[ 0 ] PARA PARAR | DIGITE UM NUMERO:'))\n    cont += 1\n    media += n\n    if cont == 1:\n        maior = menor = n\n    else:\n        if n > maior:",
        "detail": "065",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "065",
        "description": "065",
        "peekOfCode": "media = maior = menor = 0\nwhile n != 0:\n    n = int(input('[ 0 ] PARA PARAR | DIGITE UM NUMERO:'))\n    cont += 1\n    media += n\n    if cont == 1:\n        maior = menor = n\n    else:\n        if n > maior:\n            maior = n",
        "detail": "065",
        "documentation": {}
    },
    {
        "label": "resp",
        "kind": 5,
        "importPath": "065",
        "description": "065",
        "peekOfCode": "resp = 'S'\nsoma = quant = media = maior = menor = 0\nwhile resp in 'Ss':\n    num = int(input('DIFITE UM NUMERO: '))\n    soma += num\n    quant += 1\n    if quant == 1:\n        maior = menor = num\n    else:\n        if num > maior:",
        "detail": "065",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "065",
        "description": "065",
        "peekOfCode": "soma = quant = media = maior = menor = 0\nwhile resp in 'Ss':\n    num = int(input('DIFITE UM NUMERO: '))\n    soma += num\n    quant += 1\n    if quant == 1:\n        maior = menor = num\n    else:\n        if num > maior:\n           maior = num",
        "detail": "065",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "065",
        "description": "065",
        "peekOfCode": "media = soma / quant\nprint('VOCE DIFITOU {} NUMEROS E A MEDIA ENTRE ELES E {}'.format(quant, media))\nprint('o maior valor e {} e o menor valor foi {} '.format(maior, menor))",
        "detail": "065",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "066",
        "description": "066",
        "peekOfCode": "n = cont = 0\nwhile True: # dessa forma ele vai mostrar do 3 vezes o imput\n    n = int(input('DIGITE UM NUMERO: '))\n    if n == 999:\n        break\n    cont += n\nprint('A SOMA DE TODOS OS NUMEROS DA {}'.format(cont))",
        "detail": "066",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "num = []\nfor c in range(0,5):\n    num.append(int(input('DIGITE UM NUMERO: '))) #.append para colocar  na  lista\nprint('-='*30)\nfor p , v in enumerate(num):\n    print(f'Na posiçao {p} foi digitado o numero {v}')\nprint('-='*30)\nma = max(num)\nmi = min(num)\npos = num.index(ma) # .index para mostrar a posiçao de um objeto",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "ma",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "ma = max(num)\nmi = min(num)\npos = num.index(ma) # .index para mostrar a posiçao de um objeto\nposi = num.index(mi)\nprint(f'voce digitou  os valores:\\n {num}')\nprint(f'o maior valor foi {ma} na posiçao {pos+1}')\nprint(f'o menor valor foi {mi} na posiçao {posi+1}')\nprint('-='*30)\n# =================== COMO O PROFESSOR FEZ ==============\nlistanum = []",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "mi",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "mi = min(num)\npos = num.index(ma) # .index para mostrar a posiçao de um objeto\nposi = num.index(mi)\nprint(f'voce digitou  os valores:\\n {num}')\nprint(f'o maior valor foi {ma} na posiçao {pos+1}')\nprint(f'o menor valor foi {mi} na posiçao {posi+1}')\nprint('-='*30)\n# =================== COMO O PROFESSOR FEZ ==============\nlistanum = []\nmai = 0",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "pos = num.index(ma) # .index para mostrar a posiçao de um objeto\nposi = num.index(mi)\nprint(f'voce digitou  os valores:\\n {num}')\nprint(f'o maior valor foi {ma} na posiçao {pos+1}')\nprint(f'o menor valor foi {mi} na posiçao {posi+1}')\nprint('-='*30)\n# =================== COMO O PROFESSOR FEZ ==============\nlistanum = []\nmai = 0\nmen = 0",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "posi",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "posi = num.index(mi)\nprint(f'voce digitou  os valores:\\n {num}')\nprint(f'o maior valor foi {ma} na posiçao {pos+1}')\nprint(f'o menor valor foi {mi} na posiçao {posi+1}')\nprint('-='*30)\n# =================== COMO O PROFESSOR FEZ ==============\nlistanum = []\nmai = 0\nmen = 0\nfor c in range(0,5):",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "listanum",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "listanum = []\nmai = 0\nmen = 0\nfor c in range(0,5):\n    listanum.append(int(input(f\"Digite um valor para a posiçao {c}: \")))\n    if c == 0:\n        mai = men = listanum[c]\n    else:\n        if listanum[c] > mai:\n            mai = listanum[c]",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "mai",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "mai = 0\nmen = 0\nfor c in range(0,5):\n    listanum.append(int(input(f\"Digite um valor para a posiçao {c}: \")))\n    if c == 0:\n        mai = men = listanum[c]\n    else:\n        if listanum[c] > mai:\n            mai = listanum[c]\n        if listanum[c] < men:",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "men",
        "kind": 5,
        "importPath": "078",
        "description": "078",
        "peekOfCode": "men = 0\nfor c in range(0,5):\n    listanum.append(int(input(f\"Digite um valor para a posiçao {c}: \")))\n    if c == 0:\n        mai = men = listanum[c]\n    else:\n        if listanum[c] > mai:\n            mai = listanum[c]\n        if listanum[c] < men:\n            men = listanum[c]",
        "detail": "078",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "079",
        "description": "079",
        "peekOfCode": "lista = []\nwhile True:\n    lista.append(int(input(\"Digite um numero:\" )))\n    cont = str(input(\"Quer continucar? S | N  \")).upper().strip()\n    lista = list(set(lista)) # set() e definir  para tirar numeros ou nomes repetidos junto com list()\n    lista.sort()  # sort() para corganizar do menor para o maior    for do print\n    if cont == \"N\":\n        print('-='* 20)\n        print(lista) \n        print('FIM DO PROGRAMA!')",
        "detail": "079",
        "documentation": {}
    },
    {
        "label": "numeros",
        "kind": 5,
        "importPath": "079",
        "description": "079",
        "peekOfCode": "numeros = list()\nwhile True:\n    n = int(input('Digite um valor: '))\n    if n not in numeros:\n        numeros.append(n)\n        print('Valor adicionadocom sucesso!')\n    else:\n        print('Valor dublicado! nao vou adicionar')   \n    r = str(input('Quer continuar?  S | N : '))\n    if r in'Nn':",
        "detail": "079",
        "documentation": {}
    },
    {
        "label": "numeros",
        "kind": 5,
        "importPath": "080",
        "description": "080",
        "peekOfCode": "numeros = list()\nfor v in range(0,6):\n    lista = int(input(\"Digite um numero: \"))\n    if lista not in numeros:\n        numeros.append(lista)\n        print('Valor adicionado com SUCESSO!')\n    else:\n        print('Valor REPETIDO! Não Registado')\n#lista.sort()  # .sort() fora do print ele faz a mesma coisa do sorted dentro do print\nprint(sorted(numeros)) # sorted(lista) para corganizar do menor para o maior    ******dentro do print -ATENÇAO AQUI TIAGO",
        "detail": "080",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "080",
        "description": "080",
        "peekOfCode": "lista = []\nfor c in range(0,5):\n    n = int(input(\"Digite um numero: \"))\n    if c == 0 :  \n        lista.append(n)\n    elif n > lista[-1]: #-1 para pegar o ultimo elemento da lista\n        lista.append(n)\n    elif n < lista[len(lista)]:\n        lista.append(n)\nprint(lista)",
        "detail": "080",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "081",
        "description": "081",
        "peekOfCode": "lista = []\nconte = 0\nwhile True:\n    lista.append(int(input(\"Digite um valor: \")))\n    cont = str(input(\"Quer continuar? S | N \")) .upper().strip()\n    conte += 1\n    if cont in 'N':\n        print('-='*20)\n        print(f'Voce digitou {conte} elementos ')\n        print('-='*20)",
        "detail": "081",
        "documentation": {}
    },
    {
        "label": "conte",
        "kind": 5,
        "importPath": "081",
        "description": "081",
        "peekOfCode": "conte = 0\nwhile True:\n    lista.append(int(input(\"Digite um valor: \")))\n    cont = str(input(\"Quer continuar? S | N \")) .upper().strip()\n    conte += 1\n    if cont in 'N':\n        print('-='*20)\n        print(f'Voce digitou {conte} elementos ')\n        print('-='*20)\n        break",
        "detail": "081",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "081",
        "description": "081",
        "peekOfCode": "lista = list(set(lista))   # list(set) para tirar repetidos\nlista.sort(reverse=True)   # lista.sort(reverse=True)  para colocar a lista de trais para frente\nprint(f'Os valores em ordem decrecente sao {lista}')\nprint('-='*20)\nif 5 in lista:\n    print('o valor 5 faz parte da lista')\nelse:\n    print('o valor 5 nao foi encontrado na lista')\nprint('-='*20)\nprint(\"FIM DO PROGRAMA\")",
        "detail": "081",
        "documentation": {}
    },
    {
        "label": "valores",
        "kind": 5,
        "importPath": "081",
        "description": "081",
        "peekOfCode": "valores = []\nwhile True:\n    valores.append(int(input(\"Digite um valor: \")))\n    res = str(input('Quer continuar? S | N : '))\n    if res in 'Nn':\n        break\nprint(f'Voce diditou {len(valores)} valores')  # len para contar quantos elementos tem na lista \nvalores.sort(reverse=True) # reverse=True paracolocar de trais para frente \nprint(f'Os valores na ordem decrecemte e {valores}')\nif 5 in valores:",
        "detail": "081",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "082",
        "description": "082",
        "peekOfCode": "lista = []\nlista1 = []\nlista2 = []\nwhile True:\n    lista.append(int(input(\"Digite um numero: \")))\n    con = str(input(\"Quer continuar? S | N \")) .upper().strip()\n    if con in 'N':\n        break\n    while True:\n        if con not in 'NS':",
        "detail": "082",
        "documentation": {}
    },
    {
        "label": "lista1",
        "kind": 5,
        "importPath": "082",
        "description": "082",
        "peekOfCode": "lista1 = []\nlista2 = []\nwhile True:\n    lista.append(int(input(\"Digite um numero: \")))\n    con = str(input(\"Quer continuar? S | N \")) .upper().strip()\n    if con in 'N':\n        break\n    while True:\n        if con not in 'NS':\n            con = str(input(\"Quer continuar? S | N \")) .upper().strip()",
        "detail": "082",
        "documentation": {}
    },
    {
        "label": "lista2",
        "kind": 5,
        "importPath": "082",
        "description": "082",
        "peekOfCode": "lista2 = []\nwhile True:\n    lista.append(int(input(\"Digite um numero: \")))\n    con = str(input(\"Quer continuar? S | N \")) .upper().strip()\n    if con in 'N':\n        break\n    while True:\n        if con not in 'NS':\n            con = str(input(\"Quer continuar? S | N \")) .upper().strip()\n        if con in 'S':",
        "detail": "082",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "082",
        "description": "082",
        "peekOfCode": "num = list()\npar = []\nimpar = [] \nwhile True:\n    num.append(int(input('Digite um numero: ')))\n    resp = str(input('Quer continuar ? S | N : '))\n    if resp in 'Nn':\n        break\nfor c,v in enumerate(num):\n    if v % 2 ==0:",
        "detail": "082",
        "documentation": {}
    },
    {
        "label": "par",
        "kind": 5,
        "importPath": "082",
        "description": "082",
        "peekOfCode": "par = []\nimpar = [] \nwhile True:\n    num.append(int(input('Digite um numero: ')))\n    resp = str(input('Quer continuar ? S | N : '))\n    if resp in 'Nn':\n        break\nfor c,v in enumerate(num):\n    if v % 2 ==0:\n        par.append(v)",
        "detail": "082",
        "documentation": {}
    },
    {
        "label": "impar",
        "kind": 5,
        "importPath": "082",
        "description": "082",
        "peekOfCode": "impar = [] \nwhile True:\n    num.append(int(input('Digite um numero: ')))\n    resp = str(input('Quer continuar ? S | N : '))\n    if resp in 'Nn':\n        break\nfor c,v in enumerate(num):\n    if v % 2 ==0:\n        par.append(v)\n    elif v % 2 ==1:",
        "detail": "082",
        "documentation": {}
    },
    {
        "label": "problema",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "problema = str(input('Digite uma soexpresao que usa parentes: '))\ncont = 0\nconte = 0\nfor simbo in problema: # SIMBO RECEBE OS VALORES DENTRO DO PROBLEMA\n    if simbo == '(':\n        cont += 1\n    elif simbo == ')':\n        conte += 1\nif cont == conte:\n    print(\"A soluçao esta correta!\")",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "cont = 0\nconte = 0\nfor simbo in problema: # SIMBO RECEBE OS VALORES DENTRO DO PROBLEMA\n    if simbo == '(':\n        cont += 1\n    elif simbo == ')':\n        conte += 1\nif cont == conte:\n    print(\"A soluçao esta correta!\")\nelse:",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "conte",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "conte = 0\nfor simbo in problema: # SIMBO RECEBE OS VALORES DENTRO DO PROBLEMA\n    if simbo == '(':\n        cont += 1\n    elif simbo == ')':\n        conte += 1\nif cont == conte:\n    print(\"A soluçao esta correta!\")\nelse:\n    print(\"A soluçao esta incorreta!!\")",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "expr",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "expr = str(input('Digite uma expressap matematica: '))\ncont = conte = 0\nfor simb in expr:\n    if simb == '(':\n        conte += 1\n    elif simb == ')':\n        cont += 1\nif cont == conte: # len para ver quantos elementos tem na pilha \n    print('Sua expressao e valida!')\nelse:",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "cont = conte = 0\nfor simb in expr:\n    if simb == '(':\n        conte += 1\n    elif simb == ')':\n        cont += 1\nif cont == conte: # len para ver quantos elementos tem na pilha \n    print('Sua expressao e valida!')\nelse:\n    print('Sua expressao esta Incorreta!')",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "expr",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "expr = str(input('Digite uma expressap matematica: '))\npilha = []\nfor simb in expr:\n    if simb == '(':\n        pilha.append('(')\n    elif simb == ')':\n        pilha.append(')')\n        if len(pilha) > 0:\n            pilha.pop() # para eliminar o ultima casa \n        else:",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "pilha",
        "kind": 5,
        "importPath": "083",
        "description": "083",
        "peekOfCode": "pilha = []\nfor simb in expr:\n    if simb == '(':\n        pilha.append('(')\n    elif simb == ')':\n        pilha.append(')')\n        if len(pilha) > 0:\n            pilha.pop() # para eliminar o ultima casa \n        else:\n            pilha.append(')')",
        "detail": "083",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "nome = list()\npeso = []\nconte = men = menor = 0\nwhile True:\n    nome.append(str(input('Nome: ')))\n    peso.append(float(input(\"Peso: \")))\n    cont = str(input('Quer continuar ? S | N : '))\n    if cont not in 'Nn':\n        conte += 1\n    if cont in 'Nn':",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "peso",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "peso = []\nconte = men = menor = 0\nwhile True:\n    nome.append(str(input('Nome: ')))\n    peso.append(float(input(\"Peso: \")))\n    cont = str(input('Quer continuar ? S | N : '))\n    if cont not in 'Nn':\n        conte += 1\n    if cont in 'Nn':\n        break",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "conte",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "conte = men = menor = 0\nwhile True:\n    nome.append(str(input('Nome: ')))\n    peso.append(float(input(\"Peso: \")))\n    cont = str(input('Quer continuar ? S | N : '))\n    if cont not in 'Nn':\n        conte += 1\n    if cont in 'Nn':\n        break\ntod = list()",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "tod",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "tod = list()\ntod.append(nome) # tod recebe a lista nome e a lista idade separadas em uma unica lista\ntod.append(peso[:])\nprint('-='*30)\nprint(f'Voce cadastrou {conte + 1} pessoas ')    \nprint(tod)\nfor p in tod:\n    if p[1] == men:\n        print(f'{p[0]}')\nprint(f'o maior peso foi de {max(tod[1])}Kg. Peso de')  # nao ahei os  nomess dos  maiores ",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "temp",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "temp = []\nprinc = []\nmai = men = 0\nwhile True:\n    temp.append(str(input('Nome: ')))\n    temp.append(float(input('peso: '))) \n    if len(princ) == 0:  # len para contar quantos elementos tem na lista lembando que a contagem começa com 0 ...\n        mai = men = temp[1] \n    else:\n        if temp[1] > mai:",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "princ",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "princ = []\nmai = men = 0\nwhile True:\n    temp.append(str(input('Nome: ')))\n    temp.append(float(input('peso: '))) \n    if len(princ) == 0:  # len para contar quantos elementos tem na lista lembando que a contagem começa com 0 ...\n        mai = men = temp[1] \n    else:\n        if temp[1] > mai:\n            mai = temp[1]",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "mai",
        "kind": 5,
        "importPath": "084",
        "description": "084",
        "peekOfCode": "mai = men = 0\nwhile True:\n    temp.append(str(input('Nome: ')))\n    temp.append(float(input('peso: '))) \n    if len(princ) == 0:  # len para contar quantos elementos tem na lista lembando que a contagem começa com 0 ...\n        mai = men = temp[1] \n    else:\n        if temp[1] > mai:\n            mai = temp[1]\n        if temp[1] < men:",
        "detail": "084",
        "documentation": {}
    },
    {
        "label": "pares",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "pares = list()\nimpar = list()\nfor num in range(0,7):\n    numeros = int(input(f'Digite o {num+1}° numero: '))\n    if numeros % 2 == 0:\n        pares.append(numeros)\n    if numeros % 2 == 1:\n        impar.append(numeros)\nprint(f'Os valores pares digitados foram {sorted(pares)}')\nprint(f'Os valores impares digitados foram {sorted(impar)}')",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "impar",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "impar = list()\nfor num in range(0,7):\n    numeros = int(input(f'Digite o {num+1}° numero: '))\n    if numeros % 2 == 0:\n        pares.append(numeros)\n    if numeros % 2 == 1:\n        impar.append(numeros)\nprint(f'Os valores pares digitados foram {sorted(pares)}')\nprint(f'Os valores impares digitados foram {sorted(impar)}')\n#======  COMO EU FIZ DO JEITO CERTO COM APENAS DUAS LISTAS ==========================",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "numeros",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "numeros = list()\nfor num in range(0,7):\n    numeros.append(int(input(f'Digite o {num+1}° numero: ')))\npares = list()\nimpar = list()\nfor num in numeros:\n    if num % 2 == 0:\n        pares.append(num)\n    else:\n        impar.append(num)",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "pares",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "pares = list()\nimpar = list()\nfor num in numeros:\n    if num % 2 == 0:\n        pares.append(num)\n    else:\n        impar.append(num)\nprint(f'Os valores pares digitados foram {sorted(set(pares))}') # set para tirar numeros repetidos\nprint(f'Os valores Impar  digitados foram {sorted(set(impar))}') # set para tirar numeros repetidos\n#=====================  COMO O PROFESSOR FEZ ==========================",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "impar",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "impar = list()\nfor num in numeros:\n    if num % 2 == 0:\n        pares.append(num)\n    else:\n        impar.append(num)\nprint(f'Os valores pares digitados foram {sorted(set(pares))}') # set para tirar numeros repetidos\nprint(f'Os valores Impar  digitados foram {sorted(set(impar))}') # set para tirar numeros repetidos\n#=====================  COMO O PROFESSOR FEZ ==========================\nnum = [[],[]]",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "num = [[],[]]\nvalor = 0\nfor c in range(1,8):\n    valor = int(input('Digite um valor: '))\n    if valor % 2 == 0:\n        num[0].append(valor) \n    else:\n        num[1].append(valor)\nprint(f'Os valores pares digitados foram {sorted(num[0])}')\nprint(f'Os valores impares digitados foram {sorted(num[1])}')",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "valor",
        "kind": 5,
        "importPath": "085",
        "description": "085",
        "peekOfCode": "valor = 0\nfor c in range(1,8):\n    valor = int(input('Digite um valor: '))\n    if valor % 2 == 0:\n        num[0].append(valor) \n    else:\n        num[1].append(valor)\nprint(f'Os valores pares digitados foram {sorted(num[0])}')\nprint(f'Os valores impares digitados foram {sorted(num[1])}')\n#===================outro jeito de deixar em ordem========================",
        "detail": "085",
        "documentation": {}
    },
    {
        "label": "coluna0",
        "kind": 5,
        "importPath": "086",
        "description": "086",
        "peekOfCode": "coluna0 = [[],[],[]]\ncoluna1 = [[],[],[]]\ncoluna2 = [[],[],[]]\nfor c in range(0,3):\n    colu0 = int(input(f'Digite um numero para a posiçao [0,{c}]: '))\n    if c == 0:\n        coluna0[0].append(colu0)\n    if c == 1:\n        coluna0[1].append(colu0)\n    if c == 2:",
        "detail": "086",
        "documentation": {}
    },
    {
        "label": "coluna1",
        "kind": 5,
        "importPath": "086",
        "description": "086",
        "peekOfCode": "coluna1 = [[],[],[]]\ncoluna2 = [[],[],[]]\nfor c in range(0,3):\n    colu0 = int(input(f'Digite um numero para a posiçao [0,{c}]: '))\n    if c == 0:\n        coluna0[0].append(colu0)\n    if c == 1:\n        coluna0[1].append(colu0)\n    if c == 2:\n        coluna0[2].append(colu0)",
        "detail": "086",
        "documentation": {}
    },
    {
        "label": "coluna2",
        "kind": 5,
        "importPath": "086",
        "description": "086",
        "peekOfCode": "coluna2 = [[],[],[]]\nfor c in range(0,3):\n    colu0 = int(input(f'Digite um numero para a posiçao [0,{c}]: '))\n    if c == 0:\n        coluna0[0].append(colu0)\n    if c == 1:\n        coluna0[1].append(colu0)\n    if c == 2:\n        coluna0[2].append(colu0)\nfor c in range(0,3):",
        "detail": "086",
        "documentation": {}
    },
    {
        "label": "coluna0",
        "kind": 5,
        "importPath": "086",
        "description": "086",
        "peekOfCode": "coluna0 = [[],[],[],[],[],[],[],[],[]]\nfor c in range(0,3):\n    colu0 = int(input(f'Digite um numero para a posiçao [0,{c}]: '))\n    if c == 0:\n        coluna0[0].append(colu0)\n    if c == 1:\n        coluna0[1].append(colu0)\n    if c == 2:\n        coluna0[2].append(colu0)\nfor c in range(0,3):",
        "detail": "086",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "086",
        "description": "086",
        "peekOfCode": "matriz = [[0,0,0],[0,0,0],[0,0,0]]\nfor l in range(0,3): \n    for c in range(0,3):\n        matriz[l][c] = int(input(f'Digite um valor para {l},{c}: ')) # matriz [l] para matriz e [c] para as colunas\nprint('-='*20)\nfor l in range(0,3): \n    for c in range(0,3):\n        print(f'[{matriz[l] [c]:^5}]',end=' ')  # [ {} ]  cochetes fora das cahves mostra que e uma lista no print :^5 para colocar em 5 casas flutuantes\n    print() # esse print  serve para quebra a linha  toda vez que a coluna terminar",
        "detail": "086",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "087",
        "description": "087",
        "peekOfCode": "matriz = [[0,0,0],[0,0,0],[0,0,0]]\npar = 0\nfor l in range(0,3):\n    for c in range(0,3):\n        matriz[l][c] = int(input(f'Digite um valor para {l},{c}: ')) #  nao esquecer de colocar matriz[l][c] \nprint('-='*30)\nfor l in range(0,3):\n    for c in range(0,3):\n        print(f'[{matriz[l][c]:^5}]',end=' ')\n    print()",
        "detail": "087",
        "documentation": {}
    },
    {
        "label": "par",
        "kind": 5,
        "importPath": "087",
        "description": "087",
        "peekOfCode": "par = 0\nfor l in range(0,3):\n    for c in range(0,3):\n        matriz[l][c] = int(input(f'Digite um valor para {l},{c}: ')) #  nao esquecer de colocar matriz[l][c] \nprint('-='*30)\nfor l in range(0,3):\n    for c in range(0,3):\n        print(f'[{matriz[l][c]:^5}]',end=' ')\n    print()\nfor p in matriz:",
        "detail": "087",
        "documentation": {}
    },
    {
        "label": "coluna",
        "kind": 5,
        "importPath": "087",
        "description": "087",
        "peekOfCode": "coluna = maior = 0\nfor n in matriz: # para cada elemento dentro da matriz\n    coluna += n[2] # para somar apenas a coluna  3  do lado  idreito\nfor n in matriz[1]:\n    if n > maior:\n        maior = n\nprint(f'A soma dos valores da terceira coluna e {coluna}')\nprint(f'O maior  valor da segunda coluna e {maior}')\n#====================COMO O PROFESSOR FEZ ============================\nmatriz = [[0,0,0],[0,0,0],[0,0,0]]",
        "detail": "087",
        "documentation": {}
    },
    {
        "label": "matriz",
        "kind": 5,
        "importPath": "087",
        "description": "087",
        "peekOfCode": "matriz = [[0,0,0],[0,0,0],[0,0,0]]\nspar = maior = scol = 0\nfor l in range(0,3):\n    for c in range(0,3):\n        matriz[l][c] = int(input(f'Digite um valor para {l},{c} : '))\nfor l in range(0,3):\n    for c in range(0,3):\n        print(f'[{matriz[l][c]:^5}]',end=' ') # para colocar em 5 casas flutuantes tem que ta formatado \n        if matriz[l][c] % 2 == 0:\n            spar += matriz[l][c]",
        "detail": "087",
        "documentation": {}
    },
    {
        "label": "spar",
        "kind": 5,
        "importPath": "087",
        "description": "087",
        "peekOfCode": "spar = maior = scol = 0\nfor l in range(0,3):\n    for c in range(0,3):\n        matriz[l][c] = int(input(f'Digite um valor para {l},{c} : '))\nfor l in range(0,3):\n    for c in range(0,3):\n        print(f'[{matriz[l][c]:^5}]',end=' ') # para colocar em 5 casas flutuantes tem que ta formatado \n        if matriz[l][c] % 2 == 0:\n            spar += matriz[l][c]\n    print()",
        "detail": "087",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "088",
        "description": "088",
        "peekOfCode": "num = int(input('Quantos jogos vc quer ? '))\nprint(f'======== Sorteando {num} Jogos =========')\npalpite = []  # lista que vai receber toda vez que sair do for \nfor contagem in range(num): # contagem para cada numero de num \n    temp = [] # temp lista temporaria para colocar dentro da lista palpite\n    for cada in range(6):  # para cada numero em range uma casa\n        sorteio = randint(1,60)\n        if sorteio in temp:  # se o sorteio tiver em temp \n            sorteio = randint(1,60)\n            temp.append(sorteio) # caso tenha numero ele coloca ",
        "detail": "088",
        "documentation": {}
    },
    {
        "label": "palpite",
        "kind": 5,
        "importPath": "088",
        "description": "088",
        "peekOfCode": "palpite = []  # lista que vai receber toda vez que sair do for \nfor contagem in range(num): # contagem para cada numero de num \n    temp = [] # temp lista temporaria para colocar dentro da lista palpite\n    for cada in range(6):  # para cada numero em range uma casa\n        sorteio = randint(1,60)\n        if sorteio in temp:  # se o sorteio tiver em temp \n            sorteio = randint(1,60)\n            temp.append(sorteio) # caso tenha numero ele coloca \n        else:\n            temp.append(sorteio) # se nao ele nao coloca nada ",
        "detail": "088",
        "documentation": {}
    },
    {
        "label": "jogos",
        "kind": 5,
        "importPath": "088",
        "description": "088",
        "peekOfCode": "jogos = []\ntot = 1\nquant = int(input('Quantos jogos vcquer que eu sorteie ? : '))\nwhile tot <= quant: # se a qauntidade for menor ou igual a quant ele vai parar \n    lista = list()\n    cont = 0 # conte tem que ta dentro do wlile \n    while True:\n        num = randint(1,60) # raviavel com randint\n        if num not in lista: # se NUM nao tiver ba lista\n            lista.append(num) # se naq otiver ele vai colocar dentro de lista",
        "detail": "088",
        "documentation": {}
    },
    {
        "label": "tot",
        "kind": 5,
        "importPath": "088",
        "description": "088",
        "peekOfCode": "tot = 1\nquant = int(input('Quantos jogos vcquer que eu sorteie ? : '))\nwhile tot <= quant: # se a qauntidade for menor ou igual a quant ele vai parar \n    lista = list()\n    cont = 0 # conte tem que ta dentro do wlile \n    while True:\n        num = randint(1,60) # raviavel com randint\n        if num not in lista: # se NUM nao tiver ba lista\n            lista.append(num) # se naq otiver ele vai colocar dentro de lista\n            cont += 1",
        "detail": "088",
        "documentation": {}
    },
    {
        "label": "quant",
        "kind": 5,
        "importPath": "088",
        "description": "088",
        "peekOfCode": "quant = int(input('Quantos jogos vcquer que eu sorteie ? : '))\nwhile tot <= quant: # se a qauntidade for menor ou igual a quant ele vai parar \n    lista = list()\n    cont = 0 # conte tem que ta dentro do wlile \n    while True:\n        num = randint(1,60) # raviavel com randint\n        if num not in lista: # se NUM nao tiver ba lista\n            lista.append(num) # se naq otiver ele vai colocar dentro de lista\n            cont += 1\n        if cont >= 6: # se cont for maior ou igual a 6 ",
        "detail": "088",
        "documentation": {}
    },
    {
        "label": "resu",
        "kind": 5,
        "importPath": "089",
        "description": "089",
        "peekOfCode": "resu = []\nconte = 0\nwhile True:\n    nome = [[],[],[]]\n    nome[0].append(str(input(\"Nome: \")))\n    if nome != 'f':\n        conte += 1\n    nome[1].append(float(input(\"Nota1: \")))\n    nome[2].append(float(input(\"Nota2: \")))\n    resu.append(nome[:])",
        "detail": "089",
        "documentation": {}
    },
    {
        "label": "conte",
        "kind": 5,
        "importPath": "089",
        "description": "089",
        "peekOfCode": "conte = 0\nwhile True:\n    nome = [[],[],[]]\n    nome[0].append(str(input(\"Nome: \")))\n    if nome != 'f':\n        conte += 1\n    nome[1].append(float(input(\"Nota1: \")))\n    nome[2].append(float(input(\"Nota2: \")))\n    resu.append(nome[:])\n    cont = str(input(\"Quer continuar? S | N :\"))",
        "detail": "089",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "089",
        "description": "089",
        "peekOfCode": "media = 0\nfor pa in resu:\n    media += pa\nprint(media)\n#=============================como o professor fez =============================\nficha = list()\nwhile True:\n    nome = str(input(\"Nome: \"))\n    nota1 = float(input(\"Nota 1:\"))\n    nota2 = float(input(\"nota 2:\"))",
        "detail": "089",
        "documentation": {}
    },
    {
        "label": "ficha",
        "kind": 5,
        "importPath": "089",
        "description": "089",
        "peekOfCode": "ficha = list()\nwhile True:\n    nome = str(input(\"Nome: \"))\n    nota1 = float(input(\"Nota 1:\"))\n    nota2 = float(input(\"nota 2:\"))\n    media = (nota1 + nota2) / 2\n    ficha.append([nome,[nota1,nota2],media])\n    resp = str(input('Quer continuar ? S|N'))\n    if resp in 'Nn':\n        break",
        "detail": "089",
        "documentation": {}
    },
    {
        "label": "tabela",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "tabela = dict()\ntabela['nome'] = str(input(\"nome:\"))\ntabela['nota1'] = float(input(\"1° nota:\"))\ntabela['nota2'] = float(input(\"2° nota:\"))\nmedia = (tabela['nota1']+tabela['nota2']) / 2\nprint(f'Media e igual : {media}')\nif media <= 6.0:\n    print('Situação e Reprovado!')\nelse:\n    print('Situaçao e Aprodado!')",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "tabela['nome']",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "tabela['nome'] = str(input(\"nome:\"))\ntabela['nota1'] = float(input(\"1° nota:\"))\ntabela['nota2'] = float(input(\"2° nota:\"))\nmedia = (tabela['nota1']+tabela['nota2']) / 2\nprint(f'Media e igual : {media}')\nif media <= 6.0:\n    print('Situação e Reprovado!')\nelse:\n    print('Situaçao e Aprodado!')\nprint(f'A media e igual a {media}')",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "tabela['nota1']",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "tabela['nota1'] = float(input(\"1° nota:\"))\ntabela['nota2'] = float(input(\"2° nota:\"))\nmedia = (tabela['nota1']+tabela['nota2']) / 2\nprint(f'Media e igual : {media}')\nif media <= 6.0:\n    print('Situação e Reprovado!')\nelse:\n    print('Situaçao e Aprodado!')\nprint(f'A media e igual a {media}')\n#=========== como o professor fezz =====================",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "tabela['nota2']",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "tabela['nota2'] = float(input(\"2° nota:\"))\nmedia = (tabela['nota1']+tabela['nota2']) / 2\nprint(f'Media e igual : {media}')\nif media <= 6.0:\n    print('Situação e Reprovado!')\nelse:\n    print('Situaçao e Aprodado!')\nprint(f'A media e igual a {media}')\n#=========== como o professor fezz =====================\naluno = dict()",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "media = (tabela['nota1']+tabela['nota2']) / 2\nprint(f'Media e igual : {media}')\nif media <= 6.0:\n    print('Situação e Reprovado!')\nelse:\n    print('Situaçao e Aprodado!')\nprint(f'A media e igual a {media}')\n#=========== como o professor fezz =====================\naluno = dict()\naluno['nome'] = str(input('Nome:'))",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "aluno",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "aluno = dict()\naluno['nome'] = str(input('Nome:'))\naluno['media'] = float(input(f'Media de {aluno[\"nome\"]} '))\nif aluno['media'] > 7:\n    aluno['situação'] = 'aprovado'\nelif 5 <= aluno['media'] < 7:\n    aluno['situação'] = 'recuperação'\nelse:\n    aluno['situação'] = 'reprovado'\nprint('='*20)",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "aluno['nome']",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "aluno['nome'] = str(input('Nome:'))\naluno['media'] = float(input(f'Media de {aluno[\"nome\"]} '))\nif aluno['media'] > 7:\n    aluno['situação'] = 'aprovado'\nelif 5 <= aluno['media'] < 7:\n    aluno['situação'] = 'recuperação'\nelse:\n    aluno['situação'] = 'reprovado'\nprint('='*20)\nfor k,v in aluno.items():",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "aluno['media']",
        "kind": 5,
        "importPath": "090",
        "description": "090",
        "peekOfCode": "aluno['media'] = float(input(f'Media de {aluno[\"nome\"]} '))\nif aluno['media'] > 7:\n    aluno['situação'] = 'aprovado'\nelif 5 <= aluno['media'] < 7:\n    aluno['situação'] = 'recuperação'\nelse:\n    aluno['situação'] = 'reprovado'\nprint('='*20)\nfor k,v in aluno.items():\n    print(f'-{k} é igual a {v}')",
        "detail": "090",
        "documentation": {}
    },
    {
        "label": "valores",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "valores = dict()\nvalores['jogador1'] = randint(1,6)\nvalores['jogador2'] = randint(1,6)\nvalores['jogador3'] = randint(1,6)\nvalores['jogador4'] = randint(1,6)\nprint(valores)\nprint()\nprint(f'Valores sorteados:')\nfor p, s in valores.items():  # k para valores das keys e S para cada ementro dentro da chave\n    print(f'O Jogador {p} tirou = {s}')",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "valores['jogador1']",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "valores['jogador1'] = randint(1,6)\nvalores['jogador2'] = randint(1,6)\nvalores['jogador3'] = randint(1,6)\nvalores['jogador4'] = randint(1,6)\nprint(valores)\nprint()\nprint(f'Valores sorteados:')\nfor p, s in valores.items():  # k para valores das keys e S para cada ementro dentro da chave\n    print(f'O Jogador {p} tirou = {s}')\n    #break",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "valores['jogador2']",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "valores['jogador2'] = randint(1,6)\nvalores['jogador3'] = randint(1,6)\nvalores['jogador4'] = randint(1,6)\nprint(valores)\nprint()\nprint(f'Valores sorteados:')\nfor p, s in valores.items():  # k para valores das keys e S para cada ementro dentro da chave\n    print(f'O Jogador {p} tirou = {s}')\n    #break\nranking = list()",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "valores['jogador3']",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "valores['jogador3'] = randint(1,6)\nvalores['jogador4'] = randint(1,6)\nprint(valores)\nprint()\nprint(f'Valores sorteados:')\nfor p, s in valores.items():  # k para valores das keys e S para cada ementro dentro da chave\n    print(f'O Jogador {p} tirou = {s}')\n    #break\nranking = list()\nranking = sorted(valores.items(), key=itemgetter(1), reverse=True ) # para colocar dentro da lista do maior para o menor ",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "valores['jogador4']",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "valores['jogador4'] = randint(1,6)\nprint(valores)\nprint()\nprint(f'Valores sorteados:')\nfor p, s in valores.items():  # k para valores das keys e S para cada ementro dentro da chave\n    print(f'O Jogador {p} tirou = {s}')\n    #break\nranking = list()\nranking = sorted(valores.items(), key=itemgetter(1), reverse=True ) # para colocar dentro da lista do maior para o menor \nprint('Rancking dos jogadores')",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "ranking",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "ranking = list()\nranking = sorted(valores.items(), key=itemgetter(1), reverse=True ) # para colocar dentro da lista do maior para o menor \nprint('Rancking dos jogadores')\nfor i , a in enumerate(ranking): # tem que tratar um lista com enumerete \n    print(f'{i+1}° Lugar {a[0]} = {a[1]} ')\n #=========== como o professor fez ===================== \nfrom random import randint\nfrom time import sleep\nfrom operator import itemgetter # operador para colocar dicionario em ordem | itemgetter para fazer isso dentro do diconario com key=itemgetter(1))\njogo = {'jogador1': randint(1,6),",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "ranking",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "ranking = sorted(valores.items(), key=itemgetter(1), reverse=True ) # para colocar dentro da lista do maior para o menor \nprint('Rancking dos jogadores')\nfor i , a in enumerate(ranking): # tem que tratar um lista com enumerete \n    print(f'{i+1}° Lugar {a[0]} = {a[1]} ')\n #=========== como o professor fez ===================== \nfrom random import randint\nfrom time import sleep\nfrom operator import itemgetter # operador para colocar dicionario em ordem | itemgetter para fazer isso dentro do diconario com key=itemgetter(1))\njogo = {'jogador1': randint(1,6),\n        'jogador2': randint(1,6),",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "jogo",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "jogo = {'jogador1': randint(1,6),\n        'jogador2': randint(1,6),\n        'jogador3': randint(1,6),\n        'jogador4': randint(1,6)}\nranking = list()\nprint('Valores sorteados')\nfor k, v in jogo.items(): # k de keys de chaves V para os valores de dentro das chaves \n    print(f'{k} Tirou {v} no dado')\n    sleep(1)\nranking = sorted(jogo.items(), key=itemgetter(1),reverse=True) #key=itemgetter(1)) (0) para o valore das chaves e 1 para os valoresa  # reverse=True para cvolocar do maior para o menor ",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "ranking",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "ranking = list()\nprint('Valores sorteados')\nfor k, v in jogo.items(): # k de keys de chaves V para os valores de dentro das chaves \n    print(f'{k} Tirou {v} no dado')\n    sleep(1)\nranking = sorted(jogo.items(), key=itemgetter(1),reverse=True) #key=itemgetter(1)) (0) para o valore das chaves e 1 para os valoresa  # reverse=True para cvolocar do maior para o menor \nfor k , v in enumerate(ranking):\n    print(f'{k+1}° Lugar: {v[0]} = {v[1]}')\n    sleep(1)",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "ranking",
        "kind": 5,
        "importPath": "091",
        "description": "091",
        "peekOfCode": "ranking = sorted(jogo.items(), key=itemgetter(1),reverse=True) #key=itemgetter(1)) (0) para o valore das chaves e 1 para os valoresa  # reverse=True para cvolocar do maior para o menor \nfor k , v in enumerate(ranking):\n    print(f'{k+1}° Lugar: {v[0]} = {v[1]}')\n    sleep(1)",
        "detail": "091",
        "documentation": {}
    },
    {
        "label": "ficha",
        "kind": 5,
        "importPath": "092",
        "description": "092",
        "peekOfCode": "ficha = dict()\nwhile True:\n    ficha['nome'] = str(input(\"Nome:\"))\n    ficha['ano'] = int(input(\"Ano de nascimento: \"))\n    ficha['ctps'] = int(input(\"Carteira de trabalho (0 nao tem): \"))\n    if ficha['ctps'] == 0:\n        break\n    if ficha['ctps'] > 0:\n        ficha['contrataçao'] = int(input(\"Ano de contratação: \"))\n        ficha['salario'] = float(input(\"Salario R$:\"))",
        "detail": "092",
        "documentation": {}
    },
    {
        "label": "dados",
        "kind": 5,
        "importPath": "092",
        "description": "092",
        "peekOfCode": "dados = dict()\ndados['nome'] = str(input('Nome: '))\nnasc = int(input('Ano de nascimento: '))\ndados['idade'] = datetime.now().year - nasc # datetime para a data # now ano atual # year Dia atual\ndados['ctps'] = int(input('Carteira de trabalho (0 nao tem): '))\nif dados['ctps'] != 0:\n    dados['contrataçao'] = int(input('Ano de contrataçao:'))\n    dados['salario'] = float(input('Salario R$:'))\n    dados['aposentadoria'] = dados['idade'] + (dados['contrataçao'] + 35) - datetime.now().year # idade + (ano de contrataçao + 35) - date... ano atual \nfor k,v in dados.items():",
        "detail": "092",
        "documentation": {}
    },
    {
        "label": "dados['nome']",
        "kind": 5,
        "importPath": "092",
        "description": "092",
        "peekOfCode": "dados['nome'] = str(input('Nome: '))\nnasc = int(input('Ano de nascimento: '))\ndados['idade'] = datetime.now().year - nasc # datetime para a data # now ano atual # year Dia atual\ndados['ctps'] = int(input('Carteira de trabalho (0 nao tem): '))\nif dados['ctps'] != 0:\n    dados['contrataçao'] = int(input('Ano de contrataçao:'))\n    dados['salario'] = float(input('Salario R$:'))\n    dados['aposentadoria'] = dados['idade'] + (dados['contrataçao'] + 35) - datetime.now().year # idade + (ano de contrataçao + 35) - date... ano atual \nfor k,v in dados.items():\n    print(f'- {k} tem o valor {v}')",
        "detail": "092",
        "documentation": {}
    },
    {
        "label": "nasc",
        "kind": 5,
        "importPath": "092",
        "description": "092",
        "peekOfCode": "nasc = int(input('Ano de nascimento: '))\ndados['idade'] = datetime.now().year - nasc # datetime para a data # now ano atual # year Dia atual\ndados['ctps'] = int(input('Carteira de trabalho (0 nao tem): '))\nif dados['ctps'] != 0:\n    dados['contrataçao'] = int(input('Ano de contrataçao:'))\n    dados['salario'] = float(input('Salario R$:'))\n    dados['aposentadoria'] = dados['idade'] + (dados['contrataçao'] + 35) - datetime.now().year # idade + (ano de contrataçao + 35) - date... ano atual \nfor k,v in dados.items():\n    print(f'- {k} tem o valor {v}')",
        "detail": "092",
        "documentation": {}
    },
    {
        "label": "dados['idade']",
        "kind": 5,
        "importPath": "092",
        "description": "092",
        "peekOfCode": "dados['idade'] = datetime.now().year - nasc # datetime para a data # now ano atual # year Dia atual\ndados['ctps'] = int(input('Carteira de trabalho (0 nao tem): '))\nif dados['ctps'] != 0:\n    dados['contrataçao'] = int(input('Ano de contrataçao:'))\n    dados['salario'] = float(input('Salario R$:'))\n    dados['aposentadoria'] = dados['idade'] + (dados['contrataçao'] + 35) - datetime.now().year # idade + (ano de contrataçao + 35) - date... ano atual \nfor k,v in dados.items():\n    print(f'- {k} tem o valor {v}')",
        "detail": "092",
        "documentation": {}
    },
    {
        "label": "dados['ctps']",
        "kind": 5,
        "importPath": "092",
        "description": "092",
        "peekOfCode": "dados['ctps'] = int(input('Carteira de trabalho (0 nao tem): '))\nif dados['ctps'] != 0:\n    dados['contrataçao'] = int(input('Ano de contrataçao:'))\n    dados['salario'] = float(input('Salario R$:'))\n    dados['aposentadoria'] = dados['idade'] + (dados['contrataçao'] + 35) - datetime.now().year # idade + (ano de contrataçao + 35) - date... ano atual \nfor k,v in dados.items():\n    print(f'- {k} tem o valor {v}')",
        "detail": "092",
        "documentation": {}
    },
    {
        "label": "jogadores",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogadores = dict()\njogadores['nome'] = str(input('Nome: '))\nquant = int(input(f'Qunatas partidas {jogadores[\"nome\"]} jogou?: '))\ngol = list()\ntotal = 0\nfor c in range(quant):\n    gol.append(int(input(f'quantos gols na partida {c}: ')))\n    total += c\njogadores['gols'] = gol\njogadores['total'] = total",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogadores['nome']",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogadores['nome'] = str(input('Nome: '))\nquant = int(input(f'Qunatas partidas {jogadores[\"nome\"]} jogou?: '))\ngol = list()\ntotal = 0\nfor c in range(quant):\n    gol.append(int(input(f'quantos gols na partida {c}: ')))\n    total += c\njogadores['gols'] = gol\njogadores['total'] = total\nprint('-='*40)",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "quant",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "quant = int(input(f'Qunatas partidas {jogadores[\"nome\"]} jogou?: '))\ngol = list()\ntotal = 0\nfor c in range(quant):\n    gol.append(int(input(f'quantos gols na partida {c}: ')))\n    total += c\njogadores['gols'] = gol\njogadores['total'] = total\nprint('-='*40)\nprint(jogadores)",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "gol",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "gol = list()\ntotal = 0\nfor c in range(quant):\n    gol.append(int(input(f'quantos gols na partida {c}: ')))\n    total += c\njogadores['gols'] = gol\njogadores['total'] = total\nprint('-='*40)\nprint(jogadores)\nprint('-='*40)",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "total",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "total = 0\nfor c in range(quant):\n    gol.append(int(input(f'quantos gols na partida {c}: ')))\n    total += c\njogadores['gols'] = gol\njogadores['total'] = total\nprint('-='*40)\nprint(jogadores)\nprint('-='*40)\nfor k, v in jogadores.items():",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogadores['gols']",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogadores['gols'] = gol\njogadores['total'] = total\nprint('-='*40)\nprint(jogadores)\nprint('-='*40)\nfor k, v in jogadores.items():\n    print(f'O campo {k} tem o valor {v} ')\nprint('-='*40)\nprint(f'O jogador {jogadores[\"nome\"]} jogou {quant} partidas')\nfor k, v in enumerate(gol):",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogadores['total']",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogadores['total'] = total\nprint('-='*40)\nprint(jogadores)\nprint('-='*40)\nfor k, v in jogadores.items():\n    print(f'O campo {k} tem o valor {v} ')\nprint('-='*40)\nprint(f'O jogador {jogadores[\"nome\"]} jogou {quant} partidas')\nfor k, v in enumerate(gol):\n    print(f'Na partida {k} Fez {v} gols.')",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogador = dict()\npartidas = list()\njogador['nome'] = str(input('Nome do jagador:'))\ntot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\nfor c in range(0, tot):\n    partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\njogador['gols'] = partidas[:] #copida de partidas | lista |\njogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\nprint('-=' * 30)\nprint(jogador)",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "partidas",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "partidas = list()\njogador['nome'] = str(input('Nome do jagador:'))\ntot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\nfor c in range(0, tot):\n    partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\njogador['gols'] = partidas[:] #copida de partidas | lista |\njogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\nprint('-=' * 30)\nprint(jogador)\nprint('-=' * 30)",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogador['nome']",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogador['nome'] = str(input('Nome do jagador:'))\ntot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\nfor c in range(0, tot):\n    partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\njogador['gols'] = partidas[:] #copida de partidas | lista |\njogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\nprint('-=' * 30)\nprint(jogador)\nprint('-=' * 30)\nfor k, v in jogador.items():",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "tot",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\nfor c in range(0, tot):\n    partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\njogador['gols'] = partidas[:] #copida de partidas | lista |\njogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\nprint('-=' * 30)\nprint(jogador)\nprint('-=' * 30)\nfor k, v in jogador.items():\n    print(f'O campo {k} tem o valor {v}')",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogador['gols']",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogador['gols'] = partidas[:] #copida de partidas | lista |\njogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\nprint('-=' * 30)\nprint(jogador)\nprint('-=' * 30)\nfor k, v in jogador.items():\n    print(f'O campo {k} tem o valor {v}')\nprint('-=' * 30)\nprint(f'O jogador {jogador[\"nome\"]} jogou {len(jogador[\"gols\"])} partidas')\nfor i, v in enumerate(jogador['gols']):",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "jogador['total']",
        "kind": 5,
        "importPath": "093",
        "description": "093",
        "peekOfCode": "jogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\nprint('-=' * 30)\nprint(jogador)\nprint('-=' * 30)\nfor k, v in jogador.items():\n    print(f'O campo {k} tem o valor {v}')\nprint('-=' * 30)\nprint(f'O jogador {jogador[\"nome\"]} jogou {len(jogador[\"gols\"])} partidas')\nfor i, v in enumerate(jogador['gols']):\n    print(f'        Na partida {i}, fez {v}.')",
        "detail": "093",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "lista = list()\nmulheres = list()\ndici = dict()\nmedia = 0\nwhile True:\n    dici['nome'] = str(input('Nome: '))\n    while True:\n        sexo = str(input(\"Sexo M | F : \"))\n        if sexo not in 'MmFf':\n            print('ERRO! Por favor Respomda apenas M ou F')",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "mulheres",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "mulheres = list()\ndici = dict()\nmedia = 0\nwhile True:\n    dici['nome'] = str(input('Nome: '))\n    while True:\n        sexo = str(input(\"Sexo M | F : \"))\n        if sexo not in 'MmFf':\n            print('ERRO! Por favor Respomda apenas M ou F')\n        if sexo in 'MmFf':",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "dici",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "dici = dict()\nmedia = 0\nwhile True:\n    dici['nome'] = str(input('Nome: '))\n    while True:\n        sexo = str(input(\"Sexo M | F : \"))\n        if sexo not in 'MmFf':\n            print('ERRO! Por favor Respomda apenas M ou F')\n        if sexo in 'MmFf':\n            break",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "media = 0\nwhile True:\n    dici['nome'] = str(input('Nome: '))\n    while True:\n        sexo = str(input(\"Sexo M | F : \"))\n        if sexo not in 'MmFf':\n            print('ERRO! Por favor Respomda apenas M ou F')\n        if sexo in 'MmFf':\n            break\n    if sexo in 'Mm': ",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "galera = list()\nsoma = media = 0\nwhile True:\n    pessoa.clear()\n    pessoa['nome'] = str(input('Nome: '))\n    while True:\n        pessoa['sexo'] = str(input('Sexo [M/F]')).upper()[0] #[0] so a primeira letra maiuscula\n        if pessoa['sexo'] in 'MF':\n            break\n        print('ERRO! Por favor difite apenas M ou F')",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "soma = media = 0\nwhile True:\n    pessoa.clear()\n    pessoa['nome'] = str(input('Nome: '))\n    while True:\n        pessoa['sexo'] = str(input('Sexo [M/F]')).upper()[0] #[0] so a primeira letra maiuscula\n        if pessoa['sexo'] in 'MF':\n            break\n        print('ERRO! Por favor difite apenas M ou F')\n    pessoa['idade'] = int(input('Idade: ')) ",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "media",
        "kind": 5,
        "importPath": "094",
        "description": "094",
        "peekOfCode": "media = soma / len(galera)\nprint(f'B) A media de idade e de {media:5.2f} anos ')\nprint('C) As mulheres cadastradas foram ', end=' ') # end= '' para nao pular de linha\nfor p in galera:\n    if p['sexo'] in 'Ff':\n        print(f'{p[\"nome\"]}', end=' ')\nprint()\nprint('D) Lista das pessoas que stao acima da media:', end=' ')\nfor p in galera:\n    if p['idade'] >= media:",
        "detail": "094",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "095",
        "description": "095",
        "peekOfCode": "jogador = dict()\npartidas = list()\ndados = list()\nwhile True:\n    partidas.clear()\n    jogador['nome'] = str(input('Nome do jagador:'))\n    tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\n    for c in range(0, tot):\n        partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\n    jogador['gols'] = partidas[:] #copida de partidas | lista |",
        "detail": "095",
        "documentation": {}
    },
    {
        "label": "partidas",
        "kind": 5,
        "importPath": "095",
        "description": "095",
        "peekOfCode": "partidas = list()\ndados = list()\nwhile True:\n    partidas.clear()\n    jogador['nome'] = str(input('Nome do jagador:'))\n    tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\n    for c in range(0, tot):\n        partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\n    jogador['gols'] = partidas[:] #copida de partidas | lista |\n    jogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista",
        "detail": "095",
        "documentation": {}
    },
    {
        "label": "dados",
        "kind": 5,
        "importPath": "095",
        "description": "095",
        "peekOfCode": "dados = list()\nwhile True:\n    partidas.clear()\n    jogador['nome'] = str(input('Nome do jagador:'))\n    tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\n    for c in range(0, tot):\n        partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\n    jogador['gols'] = partidas[:] #copida de partidas | lista |\n    jogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\n    print('-=' * 30)",
        "detail": "095",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "095",
        "description": "095",
        "peekOfCode": "time = list()\njogador = dict()\npartidas = list()\nwhile True:\n    jogador.clear()\n    jogador['nome'] = str(input('Nome do jagador:'))\n    tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\n    for c in range(0, tot):\n        partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\n    jogador['gols'] = partidas[:] #copida de partidas | lista |",
        "detail": "095",
        "documentation": {}
    },
    {
        "label": "jogador",
        "kind": 5,
        "importPath": "095",
        "description": "095",
        "peekOfCode": "jogador = dict()\npartidas = list()\nwhile True:\n    jogador.clear()\n    jogador['nome'] = str(input('Nome do jagador:'))\n    tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\n    for c in range(0, tot):\n        partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\n    jogador['gols'] = partidas[:] #copida de partidas | lista |\n    jogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista",
        "detail": "095",
        "documentation": {}
    },
    {
        "label": "partidas",
        "kind": 5,
        "importPath": "095",
        "description": "095",
        "peekOfCode": "partidas = list()\nwhile True:\n    jogador.clear()\n    jogador['nome'] = str(input('Nome do jagador:'))\n    tot = int(input(f'qunatas partidas o {jogador[\"nome\"]} jogou ? '))\n    for c in range(0, tot):\n        partidas.append(int(input(f'        Quantos gols na partida {c}: ')))\n    jogador['gols'] = partidas[:] #copida de partidas | lista |\n    jogador['total'] = sum(partidas) # sum para somar todos dentro de uma lista\n    time.append(jogador.copy())",
        "detail": "095",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 2,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "def area(msg):\n    print('='* len(msg))\n    print(msg)\n    print('='* len(msg))\narea('Controle de terreno')\ndef vezez(a, b):\n    d = a * b\n    print(f'A area de u mterreno {a} x {b} é {d}m²')\nlar = float(input('Largura: '))    \ncomp = float(input('Comprimento: '))",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "vezez",
        "kind": 2,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "def vezez(a, b):\n    d = a * b\n    print(f'A area de u mterreno {a} x {b} é {d}m²')\nlar = float(input('Largura: '))    \ncomp = float(input('Comprimento: '))\nvezez(lar,comp)\n#======================= COMO O PROFESSOR FEZ  ================================\ndef area(compri, larga):\n    a = compri * larga\n    print(f'A area de um terreno de {compri} x {larga} e de {a}m²')",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "area",
        "kind": 2,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "def area(compri, larga):\n    a = compri * larga\n    print(f'A area de um terreno de {compri} x {larga} e de {a}m²')\nprint('Controle de terrenos')\nprint('-'*20)\nl = float(input('Largura (m): '))\nc = float(input('Comprimento (m): '))\narea(l, c)",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "lar",
        "kind": 5,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "lar = float(input('Largura: '))    \ncomp = float(input('Comprimento: '))\nvezez(lar,comp)\n#======================= COMO O PROFESSOR FEZ  ================================\ndef area(compri, larga):\n    a = compri * larga\n    print(f'A area de um terreno de {compri} x {larga} e de {a}m²')\nprint('Controle de terrenos')\nprint('-'*20)\nl = float(input('Largura (m): '))",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "comp",
        "kind": 5,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "comp = float(input('Comprimento: '))\nvezez(lar,comp)\n#======================= COMO O PROFESSOR FEZ  ================================\ndef area(compri, larga):\n    a = compri * larga\n    print(f'A area de um terreno de {compri} x {larga} e de {a}m²')\nprint('Controle de terrenos')\nprint('-'*20)\nl = float(input('Largura (m): '))\nc = float(input('Comprimento (m): '))",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "l",
        "kind": 5,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "l = float(input('Largura (m): '))\nc = float(input('Comprimento (m): '))\narea(l, c)",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "096",
        "description": "096",
        "peekOfCode": "c = float(input('Comprimento (m): '))\narea(l, c)",
        "detail": "096",
        "documentation": {}
    },
    {
        "label": "escreva",
        "kind": 2,
        "importPath": "097",
        "description": "097",
        "peekOfCode": "def escreva(tex):\n    print('=' * len(pala)) # a quantidade de letras da palavra vai definir a qunatidade de linhas\n    print(f'{tex}')\n    print('=' * len(pala))\nescreva(pala)\n#======================= COMO O PROFESSOR FEZ  ================================ \ndef escreva(msg):\n    tam = len(msg) + 4 # e preciso criar umavariavel para receber otamanho para que possa colocar +4 para colocar um espaço 2 para cada lado\n    print('~' * tam)\n    print(f'  {msg}')",
        "detail": "097",
        "documentation": {}
    },
    {
        "label": "escreva",
        "kind": 2,
        "importPath": "097",
        "description": "097",
        "peekOfCode": "def escreva(msg):\n    tam = len(msg) + 4 # e preciso criar umavariavel para receber otamanho para que possa colocar +4 para colocar um espaço 2 para cada lado\n    print('~' * tam)\n    print(f'  {msg}')\n    print('~' * tam)\n#programa principal\nescreva('Gustavo Guanabara')\nescreva('Curso de python no youtube')\nescreva('Cev')",
        "detail": "097",
        "documentation": {}
    },
    {
        "label": "pala",
        "kind": 5,
        "importPath": "097",
        "description": "097",
        "peekOfCode": "pala = str(input('Palavra: '))\ndef escreva(tex):\n    print('=' * len(pala)) # a quantidade de letras da palavra vai definir a qunatidade de linhas\n    print(f'{tex}')\n    print('=' * len(pala))\nescreva(pala)\n#======================= COMO O PROFESSOR FEZ  ================================ \ndef escreva(msg):\n    tam = len(msg) + 4 # e preciso criar umavariavel para receber otamanho para que possa colocar +4 para colocar um espaço 2 para cada lado\n    print('~' * tam)",
        "detail": "097",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "def contador(*num):\n    print('=-' * 20)\n    print('    Contagem de 1 ate 10  em 1')\n    print('=-' * 20)\n    for c in range(0,11):\n        print(f'{c}',end=' ')\n    print('<= FIM')\ncontador()\ndef cont(*nu):\n    print('    Contagem de 10 ate 0 de 2 em 2')",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "cont",
        "kind": 2,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "def cont(*nu):\n    print('    Contagem de 10 ate 0 de 2 em 2')\n    print('=-' * 20)\n    for i in range(10, -1, -1):\n        par = (i%2) == 1\n        if par == 0:\n            print(f'{i}',end=' ')\n    print('<= FIM')\nprint('=-' * 20)\ncont()",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "ficha",
        "kind": 2,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "def ficha():\n    print(f'Contagem de {inicio} até {fim} de {passo} em {passo}')\n    print('Carregando','.'*20)\n    sleep(1)\n    for c in range(inicio,fim,passo):\n        print(f'{c}',end=' ')\n    print()\nprint('=-' * 20)\nficha()\nprint('=-' * 20)",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "def contador(i, f, p): # i = inicio | f = fim | p = passos\n    if p < 0:\n        p *= -1  # para colocar o numero negativo para possitivo\n    if p == 0:\n        p = 1\n    print('-=' * 20)\n    print(f'Contade de {i} ate {f} em {p}') # i inicio | f Fim | P Passos\n    sleep(2.5)\n    if i < f:\n        cont = i",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "inicio",
        "kind": 5,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "inicio = int(input('Inicio: '))\nfim = int(input('Fim: '))\npasso = int(input('Passo:'))\ndef ficha():\n    print(f'Contagem de {inicio} até {fim} de {passo} em {passo}')\n    print('Carregando','.'*20)\n    sleep(1)\n    for c in range(inicio,fim,passo):\n        print(f'{c}',end=' ')\n    print()",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "fim",
        "kind": 5,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "fim = int(input('Fim: '))\npasso = int(input('Passo:'))\ndef ficha():\n    print(f'Contagem de {inicio} até {fim} de {passo} em {passo}')\n    print('Carregando','.'*20)\n    sleep(1)\n    for c in range(inicio,fim,passo):\n        print(f'{c}',end=' ')\n    print()\nprint('=-' * 20)",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "passo",
        "kind": 5,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "passo = int(input('Passo:'))\ndef ficha():\n    print(f'Contagem de {inicio} até {fim} de {passo} em {passo}')\n    print('Carregando','.'*20)\n    sleep(1)\n    for c in range(inicio,fim,passo):\n        print(f'{c}',end=' ')\n    print()\nprint('=-' * 20)\nficha()",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "ini",
        "kind": 5,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "ini = int(input('Inicio: '))\nfim = int(input('Fim: '))\npasso = int(input('Passo: '))\ncontador(ini, fim, passo)",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "fim",
        "kind": 5,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "fim = int(input('Fim: '))\npasso = int(input('Passo: '))\ncontador(ini, fim, passo)",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "passo",
        "kind": 5,
        "importPath": "098",
        "description": "098",
        "peekOfCode": "passo = int(input('Passo: '))\ncontador(ini, fim, passo)",
        "detail": "098",
        "documentation": {}
    },
    {
        "label": "maior",
        "kind": 2,
        "importPath": "099",
        "description": "099",
        "peekOfCode": "def maior(): #* quando nao se sabe o tamanho do parametro \n    num = list()\n    while True:\n        num.append(int(input('Numero:')))\n        resp = str(input(\"Quer continuar? (S | N): \"))\n        if resp in 'Nn':\n            break\n    print('-='*40)\n    print('Analizando os valores passados...',flush=True)\n    for i in num: # para cada numero na lista num",
        "detail": "099",
        "documentation": {}
    },
    {
        "label": "maior",
        "kind": 2,
        "importPath": "099",
        "description": "099",
        "peekOfCode": "def maior(*num):\n    cont = maior = 0\n    print('-=' *20)\n    print('Analizando os valores passados....')\n    for valor in num:\n        print(f' {valor} ',end='',flush=True)\n        sleep(0.3)\n        if cont == 0:\n            maior = valor\n        else:",
        "detail": "099",
        "documentation": {}
    },
    {
        "label": "sorteia",
        "kind": 2,
        "importPath": "100 ",
        "description": "100 ",
        "peekOfCode": "def sorteia():\n    for i in range(5):\n        sot.append(randint(1,10))\n    print('-='*30)\n    print(f'Sorteando 5 valores da lista',end=' ')\n    print(f'{sot}',end=' ')\n    print(\"PRONTO!\")\nsorteia()\ndef soma():\n    soma = 0",
        "detail": "100 ",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "100 ",
        "description": "100 ",
        "peekOfCode": "def soma():\n    soma = 0\n    for i in sot:\n        if i % 2 == 0:\n            soma += i\n    print(f'Somando os valores pares de {sot}, temos {soma}')\n    print('-='*30)\nsoma()\n#======================= COMO O PROFESSOR FEZ  ================================ \nfrom random import randint",
        "detail": "100 ",
        "documentation": {}
    },
    {
        "label": "sorteia",
        "kind": 2,
        "importPath": "100 ",
        "description": "100 ",
        "peekOfCode": "def sorteia(lista):\n    print('Sorteando 5 valores da lista:',end='')\n    for cont in range(0,5):\n        n = randint(1,10)\n        lista.append(n)\n        print(f' {n} ', end='',flush=True)\n        sleep(0.3)\n    print('Fim')\ndef somapar(lista):\n    soma = 0",
        "detail": "100 ",
        "documentation": {}
    },
    {
        "label": "somapar",
        "kind": 2,
        "importPath": "100 ",
        "description": "100 ",
        "peekOfCode": "def somapar(lista):\n    soma = 0\n    for valor in lista:\n        if valor % 2 == 0:\n            soma += valor\n    print(f'Somando os valores pares de {lista}, temos {soma}')\nnumeros = list()\n#programa principal\nsorteia(numeros)\nsomapar(numeros)",
        "detail": "100 ",
        "documentation": {}
    },
    {
        "label": "sot",
        "kind": 5,
        "importPath": "100 ",
        "description": "100 ",
        "peekOfCode": "sot = list()\ndef sorteia():\n    for i in range(5):\n        sot.append(randint(1,10))\n    print('-='*30)\n    print(f'Sorteando 5 valores da lista',end=' ')\n    print(f'{sot}',end=' ')\n    print(\"PRONTO!\")\nsorteia()\ndef soma():",
        "detail": "100 ",
        "documentation": {}
    },
    {
        "label": "numeros",
        "kind": 5,
        "importPath": "100 ",
        "description": "100 ",
        "peekOfCode": "numeros = list()\n#programa principal\nsorteia(numeros)\nsomapar(numeros)",
        "detail": "100 ",
        "documentation": {}
    },
    {
        "label": "voto",
        "kind": 2,
        "importPath": "101",
        "description": "101",
        "peekOfCode": "def voto(ano=0): # ano recebe o valor de atual que e o ano atual \n    print('-=' * 30)\n    ano = int(input(\"Que ano voce nasceu? \"))\n    idade = atual - ano\n    print(f'Com {idade} Anos: ', end='')\n    if idade > 18:\n        if idade < 69:\n            return \"Voto Obrigadorio!!!\"\n    elif idade <= 16:\n        return \"Não Vota!!!\"",
        "detail": "101",
        "documentation": {}
    },
    {
        "label": "voto",
        "kind": 2,
        "importPath": "101",
        "description": "101",
        "peekOfCode": "def voto(ano): # ano recebe o valor de anor recebe o valor de nasc\n    from datetime import date # usar a importaçao dentro da funçao economiza memoria \n    atual = date.today().year\n    idade = atual - ano\n    if idade < 16:\n        return f'Com {idade} anos: NAO VOTA!!'\n    elif 16 <= idade < 18: \n        return f'com {idade} anos: VOTO E OPCIONAL!!'\n    else:\n        return f'Com {idade } anos: VOTO OBRIGATORIO!!'",
        "detail": "101",
        "documentation": {}
    },
    {
        "label": "atual",
        "kind": 5,
        "importPath": "101",
        "description": "101",
        "peekOfCode": "atual = date.today().year # date - data | today - Hoje | year - Ano\ndef voto(ano=0): # ano recebe o valor de atual que e o ano atual \n    print('-=' * 30)\n    ano = int(input(\"Que ano voce nasceu? \"))\n    idade = atual - ano\n    print(f'Com {idade} Anos: ', end='')\n    if idade > 18:\n        if idade < 69:\n            return \"Voto Obrigadorio!!!\"\n    elif idade <= 16:",
        "detail": "101",
        "documentation": {}
    },
    {
        "label": "nasc",
        "kind": 5,
        "importPath": "101",
        "description": "101",
        "peekOfCode": "nasc = int(input(\"Em que ano voce nasceu? \")) \nprint(voto(nasc))",
        "detail": "101",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "102",
        "description": "102",
        "peekOfCode": "def factorial(num, show=False):\n    \"\"\"\n    (num) recebe o numero que sera feito o fatorial\n    exemplo:\n    5 | 5 x 4 x 3 x 2 x 1 = 120\n    Parametro tem que ta no factorial( 5 )\n    \"\"\"\n    resultado = 1\n    cont = 1\n    print('='*30)",
        "detail": "102",
        "documentation": {}
    },
    {
        "label": "fatorial",
        "kind": 2,
        "importPath": "102",
        "description": "102",
        "peekOfCode": "def fatorial(n, show=False): # show=True e uma parametro opcional para morar a contagem do fatorial \n    \"\"\"\n    -> Calcula o fatorial de um numero\n    Parametro ( N ) : O numero a ser calculado  \n    Parametro ( Show ) (Opcional) : Mostrar ou nao a conta \n    return : O valor e um fatorial de N\n    \"\"\"\n    f = 1 # f começa com com 1 para que faça 1 x de trais para frente \n    print('=' * 30)\n    for c in range(n, 0, -1): # c para cada valor em n , ele vai ate 0 de trais para frente -1",
        "detail": "102",
        "documentation": {}
    },
    {
        "label": "ficha",
        "kind": 2,
        "importPath": "103",
        "description": "103",
        "peekOfCode": "def ficha():\n    nome = dict()\n    gols = dict()\n    fich = list()\n    nome['nome'] = str(input(\"Nome do jogador: \"))\n    fich.append(nome.copy())\n    gols['gols'] = str(input(\"Numeros de gols: \"))\n    fich.append(gols.copy())\n    print(fich)\n    print('='*30)",
        "detail": "103",
        "documentation": {}
    },
    {
        "label": "ficha",
        "kind": 2,
        "importPath": "103",
        "description": "103",
        "peekOfCode": "def ficha(jog='<Desconhecido>', gol=0): # parametros caso nao tenha o jog e mostra desconhecido | se gols for vazio recebe 0 \n    print(f'O jogador {jog} fez {gol} gols no capeonato')\n#programa principal\nnome = str(input('Nome do jogador: '))\ngols = str(input('numeros de gols? '))\nif gols.isnumeric(): # isnumeric() para verificar se a str e numerica \n    gols= int(gols) # se for ele passa ser int\nelse:\n    gols = 0 # se nao tiver nada no campo gols ele vale 0\nif nome.strip() == '': # .strip para tirar todos os espaços do campo de input | se nome for igual a vazio quando tirar os espaços",
        "detail": "103",
        "documentation": {}
    },
    {
        "label": "nome",
        "kind": 5,
        "importPath": "103",
        "description": "103",
        "peekOfCode": "nome = str(input('Nome do jogador: '))\ngols = str(input('numeros de gols? '))\nif gols.isnumeric(): # isnumeric() para verificar se a str e numerica \n    gols= int(gols) # se for ele passa ser int\nelse:\n    gols = 0 # se nao tiver nada no campo gols ele vale 0\nif nome.strip() == '': # .strip para tirar todos os espaços do campo de input | se nome for igual a vazio quando tirar os espaços\n    ficha(gol=gols)\nelse:\n    ficha(nome,gols)",
        "detail": "103",
        "documentation": {}
    },
    {
        "label": "gols",
        "kind": 5,
        "importPath": "103",
        "description": "103",
        "peekOfCode": "gols = str(input('numeros de gols? '))\nif gols.isnumeric(): # isnumeric() para verificar se a str e numerica \n    gols= int(gols) # se for ele passa ser int\nelse:\n    gols = 0 # se nao tiver nada no campo gols ele vale 0\nif nome.strip() == '': # .strip para tirar todos os espaços do campo de input | se nome for igual a vazio quando tirar os espaços\n    ficha(gol=gols)\nelse:\n    ficha(nome,gols)",
        "detail": "103",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "104",
        "description": "104",
        "peekOfCode": "def leiaint(msg):\n    ok = False # ok começa como false = Falso\n    valor = 0\n    while True:\n        n = str(input(msg))  # na variavel local recebe STR\n        if n.isnumeric(): # isnumeric() para verificar se e numerico\n            valor = int(n) # se for valor que começa com 0 recebe valor int de n \n            ok = True # se for numero OK vira True = Verdadeiro \n        else: # se N nao for numero \n            print(\"\\033[0;31mERRO digite um numero inteiro valido!!!\\033[m\")",
        "detail": "104",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "104",
        "description": "104",
        "peekOfCode": "def leiaint(msg):\n    ok = False # ok começa como false = Falso\n    valor = 0\n    while True:\n        n = str(input(msg))  # na variavel local recebe STR\n        if n.isnumeric(): # isnumeric() para verificar se e numerico\n            valor = int(n) # se for valor que começa com 0 recebe valor int de n \n            ok = True # se for numero OK vira True = Verdadeiro \n        else: # se N nao for numero \n            print(\"\\033[0;31mERRO digite um numero inteiro valido!!!\\033[m\")",
        "detail": "104",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "104",
        "description": "104",
        "peekOfCode": "n = leiaint('Digite um numero: ')\nprint(f'Voce acabou de digitar o numero {n}')\n#============= COMO O PROFESSOR FEZ =====================\ndef leiaint(msg):\n    ok = False # ok começa como false = Falso\n    valor = 0\n    while True:\n        n = str(input(msg))  # na variavel local recebe STR\n        if n.isnumeric(): # isnumeric() para verificar se e numerico\n            valor = int(n) # se for valor que começa com 0 recebe valor int de n ",
        "detail": "104",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "104",
        "description": "104",
        "peekOfCode": "n = leiaint('Digite um numero: ')\nprint(f'Voce acabou de digitar o numero {n}')",
        "detail": "104",
        "documentation": {}
    },
    {
        "label": "notas",
        "kind": 2,
        "importPath": "105",
        "description": "105",
        "peekOfCode": "def notas(*num, sit=False): # sit e variavel \n    \"\"\"\n    _> Função para analizar notas e situaçao de varios alunos \n    Param *nun: Uma ou varias notas de alunos \n    Param sit: valor opcional indicando se deve ou nao adiconar a Situaçao \n    xxxxxxxxxx\n    return: Dicionario com varias informaçoes sobre a situaçao da turma\n    xxxxxxxxx\n    \"\"\"\n    for valor in num:",
        "detail": "105",
        "documentation": {}
    },
    {
        "label": "notas",
        "kind": 2,
        "importPath": "105",
        "description": "105",
        "peekOfCode": "def notas(*n, sit=False):\n    \"\"\"\n    _> Função para analizar notas e situaçao de varios alunos \n    Param *n: Uma ou varias notas de alunos \n    Param sit: valor opcional indicando se deve ou nao adiconar a Situaçao \n    return: Dicionario com varias informaçoes sobre a situaçao da turma\n    \"\"\"\n    r = dict()\n    r[\"total\"] = len(n)\n    r[\"maior\"] = max(n)",
        "detail": "105",
        "documentation": {}
    },
    {
        "label": "resp",
        "kind": 5,
        "importPath": "105",
        "description": "105",
        "peekOfCode": "resp = notas(5.5, 2.5, 9, 8.5, sit=True)\nprint(resp)\nhelp(notas)",
        "detail": "105",
        "documentation": {}
    },
    {
        "label": "ajuda",
        "kind": 2,
        "importPath": "106",
        "description": "106",
        "peekOfCode": "def ajuda():\n    while True:\n        print('\\33[30;42m~' * 40)\n        print('  SISTEMA DE AJUDA PyHelp')\n        print('~' * 40)\n        resp = str(input(\"Função ou Biblioteca: \"))\n        print('\\33[30;44m~' * 40)\n        print(f'  \\033[mAcessando o Manual do comando {resp}')\n        print('\\33[30;44~\\033[7;30;41' * 40)\n        print(f'{help(resp)}')",
        "detail": "106",
        "documentation": {}
    },
    {
        "label": "ajuda",
        "kind": 2,
        "importPath": "106",
        "description": "106",
        "peekOfCode": "def ajuda(con): # com recebe a variavel do nome da dunçao que ta sendo pesquisada \n    print(c[6], end='')\n    print(f'Acessando o manual do comando \\'{con}\\'', 4)\n    sleep(2)\n    help(con)\n    print(c[0],end='')\ndef titulo(msg, cor=0): # recebe tudo que tiver em titulo(\"  \")\n    print(c[cor],end='') # variavel cor=0\n    tam = len(msg) + 4\n    print('~' * tam)",
        "detail": "106",
        "documentation": {}
    },
    {
        "label": "titulo",
        "kind": 2,
        "importPath": "106",
        "description": "106",
        "peekOfCode": "def titulo(msg, cor=0): # recebe tudo que tiver em titulo(\"  \")\n    print(c[cor],end='') # variavel cor=0\n    tam = len(msg) + 4\n    print('~' * tam)\n    print(f'  {msg}')\n    print('~' * tam)\n    print(c[0],end='')\n#programa principal\ncomando = ' ' # comando começa vazio para receber o valor de comnado \\ comando = str(input......\nwhile True:",
        "detail": "106",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "106",
        "description": "106",
        "peekOfCode": "c = ('\\033[m',        # - 0 sem cores  \n     '\\033[0;30;41m', # - 1 vermelho\n     '\\033[0;30;42m', # - 2 vermelho\n     '\\033[0;30;43m', # - 3 amarelo\n     '\\033[0;30;44m', # - 4 azul\n     '\\033[0;30;45m', # - 5 roxo\n     '\\033[0;30;46m'  # - 6 branco\n    );  # NAO ESQUECER DOS ; | # com essa dupla o valor 0 e sem cor e 1 vale a cor vermelha \ndef ajuda(con): # com recebe a variavel do nome da dunçao que ta sendo pesquisada \n    print(c[6], end='')",
        "detail": "106",
        "documentation": {}
    },
    {
        "label": "comando",
        "kind": 5,
        "importPath": "106",
        "description": "106",
        "peekOfCode": "comando = ' ' # comando começa vazio para receber o valor de comnado \\ comando = str(input......\nwhile True:\n    titulo('Sistema de ajuda Pyhelp', 2) # str de titulo vai para def titulo que vai para msg\n    comando = str(input(\" Função ou biblioteca: \"))\n    if comando.upper() == 'FIM': # .upper para deixar tudo maiusculo\n        break\n    else:\n        ajuda(comando)\ntitulo(\"Ate logo!\", 1)  # toda comando titulo(\" \") subtitui pelo msg",
        "detail": "106",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "107",
        "description": "107",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nprint(f\"A metade de R$:{preço:.2f} e R$:{moeda.metade(preço):.2f}\")\nprint(f\"O dobro de R$:{preço:.2f} e R$:{moeda.dobro(preço):.2f}\")\nprint(f\"Aumentando 10%, temos R$:{moeda.aumenta(preço,10):.2f}\")\nprint(f\"reduzindo 13%, temos R$:{moeda.diminuir(preço, 13):.2f}\")\n#=========Como O professor fez =====================",
        "detail": "107",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "108",
        "description": "108",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nprint(f\"A metade de R$:{moeda.moeda(preço)} e R$:{moeda.moeda(moeda.metade(preço))}\")\nprint(f\"O dobro de R$:{moeda.moeda(preço)} e R$:{moeda.moeda(moeda.dobro(preço))}\")\nprint(f\"Aumentando 10%, temos R$:{moeda.moeda(moeda.aumenta(preço,10))}\")\n#=========Como O professor fez =====================",
        "detail": "108",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "109",
        "description": "109",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nprint(f\"A metade de R$:{preço} e R$:{moeda.metade(preço,True)}\") # True de sit=False fa função\nprint(f\"O dobro de R$:{preço} e R$:{moeda.dobro(preço,True)}\")\nprint(f\"Aumentando 10%, temos R$:{moeda.aumenta(preço,10, True)}\")\nprint(f\"reduzindo 13%, temos R$:{moeda.diminuir(preço, 13, True)}\")\n#=========Como O professor fez =====================",
        "detail": "109",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "110",
        "description": "110",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nresumo(preço, 80, 35) # 80 parametro da funçao aumentar()\n                     #35 parametro da funçao diminuir()\n#=========Como O professor fez =====================",
        "detail": "110",
        "documentation": {}
    },
    {
        "label": "preço",
        "kind": 5,
        "importPath": "111",
        "description": "111",
        "peekOfCode": "preço = float(input(\"Digite o preço R$: \"))\nmoeda.resumo(preço, 35, 22)\n#=========Como O professor fez =====================",
        "detail": "111",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "113",
        "description": "113",
        "peekOfCode": "def leiaint(msg):\n    while True:\n        try: # tente fazer\n        \tn = int(input(msg))\n        except (ValueError, TypeError):\n            print('\\033[31mERRO! Por favor digite um numero interito valido!!\\033[m')\n            continue # para voltar para o While\n        else:\n            return n # se tudo nao der certo e pq e um numero inteiro\ndef leiafloat(msg):",
        "detail": "113",
        "documentation": {}
    },
    {
        "label": "leiafloat",
        "kind": 2,
        "importPath": "113",
        "description": "113",
        "peekOfCode": "def leiafloat(msg):\n    while True:\n        try: # tente fazer\n        \tn = float(input(msg))\n        except (ValueError, TypeError):\n            print('\\033[31mERRO! Por favor digite um numero interito valido!!\\033[m')\n            continue # para voltar para o While\n        else:\n            return n # se tudo nao der certo e pq e um numero inteiro\nnum = leiaint(\"digite um numero:\")",
        "detail": "113",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "113",
        "description": "113",
        "peekOfCode": "num = leiaint(\"digite um numero:\")\nnu = leiafloat(\"Digite um numero Real: \")\nprint(f'o numero inteiro digitado foi {num} e o real foi {nu}')",
        "detail": "113",
        "documentation": {}
    },
    {
        "label": "nu",
        "kind": 5,
        "importPath": "113",
        "description": "113",
        "peekOfCode": "nu = leiafloat(\"Digite um numero Real: \")\nprint(f'o numero inteiro digitado foi {num} e o real foi {nu}')",
        "detail": "113",
        "documentation": {}
    },
    {
        "label": "\ttexto",
        "kind": 5,
        "importPath": "115",
        "description": "115",
        "peekOfCode": "\ttexto = arquivo.read() # read(): usado para ler dados do arquivo aberto usando o método open()\n\tprint(\"=\"*40)\n\tprint(f'{\"Pessoas Cadastradas\":^40}')\n\tprint(\"=\"*40)\n\tlista = list(open(\"pessoas.txt\",\"rt\"))\n\tfor valor in lista:\n\t\tprint(f'{valor}',end='',)\n\tif lista[1]:\n\t\tprint(f'{lista[1]:>30}',end='')",
        "detail": "115",
        "documentation": {}
    },
    {
        "label": "\tlista",
        "kind": 5,
        "importPath": "115",
        "description": "115",
        "peekOfCode": "\tlista = list(open(\"pessoas.txt\",\"rt\"))\n\tfor valor in lista:\n\t\tprint(f'{valor}',end='',)\n\tif lista[1]:\n\t\tprint(f'{lista[1]:>30}',end='')",
        "detail": "115",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "116",
        "description": "116",
        "peekOfCode": "num = [8, 2, 4, 2, 5, 2] \nprint(num.count(2))",
        "detail": "116",
        "documentation": {}
    },
    {
        "label": "lista",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "lista = list()\nlista.append('Gustavo')\nlista.append(20)\ngalera = list()\ngalera.append(lista[:]) # [:]  Para gerar uma copia do arquivo \nlista[0] = 'Maria'  # lista [0] e a primeira lista = 'Maria substitue o nome pelo oque ta dentro da lista\nlista[1] = 25\ngalera.append(lista[:])\nprint(galera)\n#========================================================================",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = list()\ngalera.append(lista[:]) # [:]  Para gerar uma copia do arquivo \nlista[0] = 'Maria'  # lista [0] e a primeira lista = 'Maria substitue o nome pelo oque ta dentro da lista\nlista[1] = 25\ngalera.append(lista[:])\nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\ngalera[3][0] = 'Tiago'    # dessa forma muda o nome de dentro da lista ou numero \nprint(galera)",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "lista[0]",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "lista[0] = 'Maria'  # lista [0] e a primeira lista = 'Maria substitue o nome pelo oque ta dentro da lista\nlista[1] = 25\ngalera.append(lista[:])\nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\ngalera[3][0] = 'Tiago'    # dessa forma muda o nome de dentro da lista ou numero \nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "lista[1]",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "lista[1] = 25\ngalera.append(lista[:])\nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\ngalera[3][0] = 'Tiago'    # dessa forma muda o nome de dentro da lista ou numero \nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nprint(galera[0])    ",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\ngalera[3][0] = 'Tiago'    # dessa forma muda o nome de dentro da lista ou numero \nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nprint(galera[0])    \nprint(galera[0][0])\nprint(galera[2][1])  # [] [] listas\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera[3][0]",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera[3][0] = 'Tiago'    # dessa forma muda o nome de dentro da lista ou numero \nprint(galera)\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nprint(galera[0])    \nprint(galera[0][0])\nprint(galera[2][1])  # [] [] listas\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nfor p in galera:  # para cada pessoa em galera ",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nprint(galera[0])    \nprint(galera[0][0])\nprint(galera[2][1])  # [] [] listas\n#========================================================================\ngalera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nfor p in galera:  # para cada pessoa em galera \n    print(p[1]) # lista das listas \n#========================================================================\n    galera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nfor p in galera:  # para cada pessoa em galera \n    print(p[1]) # lista das listas \n#========================================================================\n    galera = [['Joao',19],['Ana', 33],['Joaquim', 13],['Maria',45]]\nfor p in galera:  # para cada pessoa em galera \n    print(f'{p[0]} tem {p[1]} anos de idade') # 0 ta chmando o nomes e 1 as idades\n#========================================================================\ngalera = list()\ndados = list()",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = list()\ndados = list()\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados[:])\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nprint(galera)\ngalera = list()\ndados = list()",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "dados",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "dados = list()\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados[:])\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nprint(galera)\ngalera = list()\ndados = list()\nfor c in range(0,3):",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = list()\ndados = list()\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados)  # se esquecer os [:]-Copia ele vai aparecer com as listas fechadas pq o clear vai limpar todas as lstas\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nprint(galera)\n#========================================================================\ngalera = list()",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "dados",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "dados = list()\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados)  # se esquecer os [:]-Copia ele vai aparecer com as listas fechadas pq o clear vai limpar todas as lstas\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nprint(galera)\n#========================================================================\ngalera = list()\ndados = list()",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "galera",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "galera = list()\ndados = list()\ntotmai = totmeno = 0\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados[:])\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nfor p in galera:\n    if p[1] >= 21:  # p[1]  para cada idade em galera",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "dados",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "dados = list()\ntotmai = totmeno = 0\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados[:])\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nfor p in galera:\n    if p[1] >= 21:  # p[1]  para cada idade em galera\n        print(f'{p[0]} e maior de idade')  # p[0]   primeira pessoa da lista",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "totmai",
        "kind": 5,
        "importPath": "Curso Python #17 - Listas (Parte 2)",
        "description": "Curso Python #17 - Listas (Parte 2)",
        "peekOfCode": "totmai = totmeno = 0\nfor c in range(0,3):\n    dados.append(str(input('Digite seu nome: ')))\n    dados.append(input('Digite sua idade: '))\n    galera.append(dados[:])\n    dados.clear() # clear e para linpar a lista quando for passada para outra lista    | se nao a lista mostra todos um por um \nfor p in galera:\n    if p[1] >= 21:  # p[1]  para cada idade em galera\n        print(f'{p[0]} e maior de idade')  # p[0]   primeira pessoa da lista\n        totmai += 1",
        "detail": "Curso Python #17 - Listas (Parte 2)",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas['nome'])\n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(f'O {pessoas[\"nome\"]} tem {pessoas[\"idade\"]} anos')\n      # quando for formatado tem que ser \" duplas \n #==========================================================================     \npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas.keys()) # .keys() para chamar os nomed das chaves \n#==========================================================================",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(f'O {pessoas[\"nome\"]} tem {pessoas[\"idade\"]} anos')\n      # quando for formatado tem que ser \" duplas \n #==========================================================================     \npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas.keys()) # .keys() para chamar os nomed das chaves \n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas.values()) # .values() para ver os valores como gustavo M 29\n#==========================================================================",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas.keys()) # .keys() para chamar os nomed das chaves \n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas.values()) # .values() para ver os valores como gustavo M 29\n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nfor k in pessoas.keys(): # para cada elemento em pessoas . keys trais o nome das chaves \n    print(k)\n#==========================================================================",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nprint(pessoas.values()) # .values() para ver os valores como gustavo M 29\n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nfor k in pessoas.keys(): # para cada elemento em pessoas . keys trais o nome das chaves \n    print(k)\n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nfor k, v in pessoas.items(): # para cada elemento em pessoas .values() trais o nome de dentro das chaves\n    print(f'{k} = {v}') # k recebe valor de pessoas e V recebe o valor de dentro das chaves ",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nfor k in pessoas.keys(): # para cada elemento em pessoas . keys trais o nome das chaves \n    print(k)\n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nfor k, v in pessoas.items(): # para cada elemento em pessoas .values() trais o nome de dentro das chaves\n    print(f'{k} = {v}') # k recebe valor de pessoas e V recebe o valor de dentro das chaves \n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\ndel pessoas['sexo'] # del para apagar um item no dicionario",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\nfor k, v in pessoas.items(): # para cada elemento em pessoas .values() trais o nome de dentro das chaves\n    print(f'{k} = {v}') # k recebe valor de pessoas e V recebe o valor de dentro das chaves \n#==========================================================================\npessoas = {'nome':'Gustavo','sexo':'M','idade':29}\ndel pessoas['sexo'] # del para apagar um item no dicionario\nfor k, v in pessoas.items(): # para cada elemento em pessoas .values() trais o nome de dentro das chaves\n    print(f'{k} = {v}') # k recebe valor de pessoas e V recebe o valor de dentro das chaves \n#==========================================================================\npessoas['nome'] = 'Pedro' #  pessoas['nome'] = 'Pedro' dessa forma ele vai substituir o nome pelo o do pedro",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas = {'nome':'Gustavo','sexo':'M','idade':29}\ndel pessoas['sexo'] # del para apagar um item no dicionario\nfor k, v in pessoas.items(): # para cada elemento em pessoas .values() trais o nome de dentro das chaves\n    print(f'{k} = {v}') # k recebe valor de pessoas e V recebe o valor de dentro das chaves \n#==========================================================================\npessoas['nome'] = 'Pedro' #  pessoas['nome'] = 'Pedro' dessa forma ele vai substituir o nome pelo o do pedro\npessoas['peso'] = 89,7  # para criar um item no dicionario e so criar o nome e dar o valor \n#==========================================================================\n# dicionario dentro de uma lista \nbrasil = []",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas['nome']",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas['nome'] = 'Pedro' #  pessoas['nome'] = 'Pedro' dessa forma ele vai substituir o nome pelo o do pedro\npessoas['peso'] = 89,7  # para criar um item no dicionario e so criar o nome e dar o valor \n#==========================================================================\n# dicionario dentro de uma lista \nbrasil = []\nestado1 = {'uf':'Rio de janeiro','sigla':'RJ'}\nestado2 = {'uf':'Sao Paulo','sigla':'SP'}\nbrasil.append(estado1)\nbrasil.append(estado2)\nprint(brasil[0]['uf'])  # [0] dentro da lista  ['uf] do diconario",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "pessoas['peso']",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "pessoas['peso'] = 89,7  # para criar um item no dicionario e so criar o nome e dar o valor \n#==========================================================================\n# dicionario dentro de uma lista \nbrasil = []\nestado1 = {'uf':'Rio de janeiro','sigla':'RJ'}\nestado2 = {'uf':'Sao Paulo','sigla':'SP'}\nbrasil.append(estado1)\nbrasil.append(estado2)\nprint(brasil[0]['uf'])  # [0] dentro da lista  ['uf] do diconario\n#==========================================================================",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "brasil",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "brasil = []\nestado1 = {'uf':'Rio de janeiro','sigla':'RJ'}\nestado2 = {'uf':'Sao Paulo','sigla':'SP'}\nbrasil.append(estado1)\nbrasil.append(estado2)\nprint(brasil[0]['uf'])  # [0] dentro da lista  ['uf] do diconario\n#==========================================================================\nestado = dict() # para abrir um diconario \nbrasil = list() # para a abir uma lista\nfor c in range(0,3):",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "estado1",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "estado1 = {'uf':'Rio de janeiro','sigla':'RJ'}\nestado2 = {'uf':'Sao Paulo','sigla':'SP'}\nbrasil.append(estado1)\nbrasil.append(estado2)\nprint(brasil[0]['uf'])  # [0] dentro da lista  ['uf] do diconario\n#==========================================================================\nestado = dict() # para abrir um diconario \nbrasil = list() # para a abir uma lista\nfor c in range(0,3):\n    estado['uf'] = str(input('unidade federativa: '))",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "estado2",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "estado2 = {'uf':'Sao Paulo','sigla':'SP'}\nbrasil.append(estado1)\nbrasil.append(estado2)\nprint(brasil[0]['uf'])  # [0] dentro da lista  ['uf] do diconario\n#==========================================================================\nestado = dict() # para abrir um diconario \nbrasil = list() # para a abir uma lista\nfor c in range(0,3):\n    estado['uf'] = str(input('unidade federativa: '))\n    estado['sigla'] = str(input('Sigla do Estado: '))",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "estado",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "estado = dict() # para abrir um diconario \nbrasil = list() # para a abir uma lista\nfor c in range(0,3):\n    estado['uf'] = str(input('unidade federativa: '))\n    estado['sigla'] = str(input('Sigla do Estado: '))\n    brasil.append(estado.copy()) # .copy() para fazer uma copia de um dicionario  \nfor e in brasil: # para cada elemento em brasil\n    #for k, v in e.items(): # para cada elemento dentro docionario\n    #print(f'O campo {k} tem o valor  {v}')  \n    for v in e.values(): # vai mostra para cada valor em dicionario dentro da lista",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "brasil",
        "kind": 5,
        "importPath": "Curso Python #19 - Dicionários",
        "description": "Curso Python #19 - Dicionários",
        "peekOfCode": "brasil = list() # para a abir uma lista\nfor c in range(0,3):\n    estado['uf'] = str(input('unidade federativa: '))\n    estado['sigla'] = str(input('Sigla do Estado: '))\n    brasil.append(estado.copy()) # .copy() para fazer uma copia de um dicionario  \nfor e in brasil: # para cada elemento em brasil\n    #for k, v in e.items(): # para cada elemento dentro docionario\n    #print(f'O campo {k} tem o valor  {v}')  \n    for v in e.values(): # vai mostra para cada valor em dicionario dentro da lista\n        print(v,end='')",
        "detail": "Curso Python #19 - Dicionários",
        "documentation": {}
    },
    {
        "label": "linhas",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def linhas():\n    print('-='*30)\n#programa principal\nlinhas()\nprint('curso')\nprint('aprenda python')\nprint('tiago')\n#=====================================================================================================================================\ndef mensagem(msg): #def cria um funçao mensagem e o nome que vai receber o parametros e o MSG sera o campo subistituido pelo parametro\n    print('-='*30)",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "mensagem",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def mensagem(msg): #def cria um funçao mensagem e o nome que vai receber o parametros e o MSG sera o campo subistituido pelo parametro\n    print('-='*30)\n    print(msg)\n    print('-='*30)\nmensagem('Sistemas de alunos') # tudo que tiver entre ' ' sera substituido pala MSG\nmensagem('Aprenda Python')\nmensagem('Bom Domingo')\n#=====================================================================================================================================\ndef soma(a, b):\n    s = a + b",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def soma(a, b):\n    s = a + b\n    print(s)\n#programa principal \nsoma(4, 5)\nsoma(8, 9)\nsoma(2, 1)\n#=====================================================================================================================================\ndef soma(a, b):\n    print(f'A = {a} B = {b}')",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def soma(a, b):\n    print(f'A = {a} B = {b}')\n    s = a + b\n    print(f'A sama A + B = {s}')\n#programa principal \nsoma(a=4, b=5) # dessa forma vc explicita o valor que vai para cada parametro\n#=====================================================================================================================================\ndef contador(* num): # * quanto nao souber os taanhos dos parametros | ele vai pegar todos osvalores e colocar em num \n    for valor in num:\n        print(f'{valor}', end=' ')",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def contador(* num): # * quanto nao souber os taanhos dos parametros | ele vai pegar todos osvalores e colocar em num \n    for valor in num:\n        print(f'{valor}', end=' ')\n    print('fim')\ncontador(2, 1, 7)\ncontador(8, 0)\ncontador(4, 4, 7, 6, 2)\n#=====================================================================================================================================\ndef contador(* num): # * quanto nao souber os taanhos dos parametros | ele vai pegar todos osvalores e colocar em num \n    tama = len(num) # len para mediar o tamanho de dupla",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def contador(* num): # * quanto nao souber os taanhos dos parametros | ele vai pegar todos osvalores e colocar em num \n    tama = len(num) # len para mediar o tamanho de dupla\n    print(f'recebi o valor {num} e tem {tama} numeros')\ncontador(2, 1, 7)\ncontador(8, 0)\ncontador(4, 4, 7, 6, 2)\n#=====================================================================================================================================\ndef dobra(ist):\n    pos = 0\n    while pos < len(ist): # enquanto o valor pos for menor que o valor do meu parametro ele vai dobrar o valor ",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "dobra",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def dobra(ist):\n    pos = 0\n    while pos < len(ist): # enquanto o valor pos for menor que o valor do meu parametro ele vai dobrar o valor \n        ist[pos]*=2  # parabre *= 2 \n        pos +=1\nvalores = [7, 2, 5, 0, 4]\ndobra(valores) \nprint(valores)\n#=====================================================================================================================================\ndef soma(*num): # * para colocar varios parametros ",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "def soma(*num): # * para colocar varios parametros \n    s = 0                                  # DESEMPACOTAMENTO DE CPACOTES \n    for i in num: # para cada numero em num\n        s += i # aomar ele \n    print(f'Somando os valor {num} da {s}')\nsoma(5, 2)\nsoma(4, 5, 6)",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "valores",
        "kind": 5,
        "importPath": "Curso Python #20 - funções (parte 1",
        "description": "Curso Python #20 - funções (parte 1",
        "peekOfCode": "valores = [7, 2, 5, 0, 4]\ndobra(valores) \nprint(valores)\n#=====================================================================================================================================\ndef soma(*num): # * para colocar varios parametros \n    s = 0                                  # DESEMPACOTAMENTO DE CPACOTES \n    for i in num: # para cada numero em num\n        s += i # aomar ele \n    print(f'Somando os valor {num} da {s}')\nsoma(5, 2)",
        "detail": "Curso Python #20 - funções (parte 1",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def contador(i, f, p):\n    c = 0\n    while c <= f:\n        print(f'{c}', end='')\n        c += p\n    print('FIM')\nhelp(contador)\n#==================================================================================\ndef contador(i, f, p):\n    \"\"\" # tris aspas e clicar no enter  para criar um manual da fnçao criana ",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "contador",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def contador(i, f, p):\n    \"\"\" # tris aspas e clicar no enter  para criar um manual da fnçao criana \n    Faz uma contagem na tema \n    contador(i, f, p):\n        i : Inicio\n        f : Fim\n        p : Passos\n    criado por Tiago Viana Da Cruz\n    \"\"\"\n    c = 0",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def soma(a, b, c=0): # caso nao o C nao receba valr ele sera ignorado com c=0\n    s = a+b+c   \n    print(f'A soma vale {s}')\nsoma(3, 2, 5)\nsoma(9, 5)\n#==================================================================================\ndef soma(a=0, b=0, c=0): # tambem pode ser feito em todos para preencher todas as posibilidades \n    s = a+b+c   \n    print(f'A soma vale {s}')\nsoma(3, 2, 5)",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def soma(a=0, b=0, c=0): # tambem pode ser feito em todos para preencher todas as posibilidades \n    s = a+b+c   \n    print(f'A soma vale {s}')\nsoma(3, 2, 5)\nsoma(9, 5)\nsoma()\n#==================================================================================\ndef soma(a=0, b=0, c=0): # caso nao o C nao receba valr ele sera ignorado com c=0\n    s = a+b+c   \n    print(f'A soma vale {s}',end='\\n') # end com \\n dentro quebra a linha ",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "soma",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def soma(a=0, b=0, c=0): # caso nao o C nao receba valr ele sera ignorado com c=0\n    s = a+b+c   \n    print(f'A soma vale {s}',end='\\n') # end com \\n dentro quebra a linha \nsoma(a=3, c=2) # pode atribuir os valore dessa forma \n#==================================================================================\ndef test():\n    x = 8  # o valor de X so vale dentro do def  | Variavel Local\n    print(f'Na função teste, n vale {n}')\n    print(f'Na função teste, x vale {x}')\n#programa principal ",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def test():\n    x = 8  # o valor de X so vale dentro do def  | Variavel Local\n    print(f'Na função teste, n vale {n}')\n    print(f'Na função teste, x vale {x}')\n#programa principal \nn = 2 # O N ja vai fuincionar em todo contigo | Variavel Global \nprint(f'No programa pricipal, n vale {n}')\ntest()\n#==================================================================================\ndef teste(b):",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "teste",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def teste(b):\n    a = 8 # Variavel local\n    b += 4  # b RECEBE O VALOR DE A QUE E 5 \n    c = 2  # VALOR LOCAL\n    print(f'A dentro vale {a}')\n    print(f'B dentro vale {b}')\n    print(f'C dentro vale {c}')\na = 5 # variavel global\nteste(a)\nprint(f'A Fora vale {a}')",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "funçao",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def funçao():\n    n1 = 4 # valor local so vale dentro do def\n    print(f'h1 Local vale {n1}')\nn1 = 2 # valor global funciona dentro da cuinçao \nfunçao()\nprint(f'h1 Global vale {n1}')\n#==================================================================================\ndef teste(b):\n    global a # quando coloca Global o valor 5 e substituido por 8 que o novo valor passado\n    a = 8 # Variavel local",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "teste",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def teste(b):\n    global a # quando coloca Global o valor 5 e substituido por 8 que o novo valor passado\n    a = 8 # Variavel local\n    b += 4  # b RECEBE O VALOR DE A QUE E 5 \n    c = 2  # VALOR LOCAL\n    print(f'A dentro vale {a}')\n    print(f'B dentro vale {b}')\n    print(f'C dentro vale {c}')\na = 5 # variavel global\nteste(a)",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "somar",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def somar(a=0, b=0, c=0):\n    s = a + b + c\n    return s # A variavel S vai para o valor de dentro do print\nprint(somar(3, 2, 5))  # valor de return s\n#==================================================================================\ndef somar(a=0, b=0, c=0):\n    s = a + b + c\n    return s # A variavel S vai para o valor de dentro do print\nn1 = somar(3, 2, 5) # dando o valor da funçao prar uma variavel para que possa ter vsarios formados de prints \nn2 = somar(2, 2)",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "somar",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def somar(a=0, b=0, c=0):\n    s = a + b + c\n    return s # A variavel S vai para o valor de dentro do print\nn1 = somar(3, 2, 5) # dando o valor da funçao prar uma variavel para que possa ter vsarios formados de prints \nn2 = somar(2, 2)\nn3 = somar(6)\nprint(f'Meus calculos deral {n1}, {n2}. {n3}')\n#==================================================================================\ndef factorial(num=1): # se num for igual a 0 recebe 1\n    t = 1",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "factorial",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def factorial(num=1): # se num for igual a 0 recebe 1\n    t = 1\n    for c in range(num, 0, -1):\n        t *= c\n    return t \nf1 = factorial(5)\nf2 = factorial(4)\nf3 = factorial()\nprint(f'Os resultados são {f1}, {f2}, {f3}')\n#==================================================================================",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "par",
        "kind": 2,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "def par(n=0):\n    if n % 2 == 0:\n        return True # se for par ele retorna True\n    else:\n        return False # se nao for ele da false\nnum = int(input('Digite um numero: '))\nprint(par(num)) # par e a funçao \nif par(num):\n    print('E par ')\nelse:",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "n = 2 # O N ja vai fuincionar em todo contigo | Variavel Global \nprint(f'No programa pricipal, n vale {n}')\ntest()\n#==================================================================================\ndef teste(b):\n    a = 8 # Variavel local\n    b += 4  # b RECEBE O VALOR DE A QUE E 5 \n    c = 2  # VALOR LOCAL\n    print(f'A dentro vale {a}')\n    print(f'B dentro vale {b}')",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "a = 5 # variavel global\nteste(a)\nprint(f'A Fora vale {a}')\n#==================================================================================\ndef funçao():\n    n1 = 4 # valor local so vale dentro do def\n    print(f'h1 Local vale {n1}')\nn1 = 2 # valor global funciona dentro da cuinçao \nfunçao()\nprint(f'h1 Global vale {n1}')",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "n1 = 2 # valor global funciona dentro da cuinçao \nfunçao()\nprint(f'h1 Global vale {n1}')\n#==================================================================================\ndef teste(b):\n    global a # quando coloca Global o valor 5 e substituido por 8 que o novo valor passado\n    a = 8 # Variavel local\n    b += 4  # b RECEBE O VALOR DE A QUE E 5 \n    c = 2  # VALOR LOCAL\n    print(f'A dentro vale {a}')",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "a = 5 # variavel global\nteste(a)\nprint(f'A Fora vale {a}') \n#==================================================================================\ndef somar(a=0, b=0, c=0):\n    s = a + b + c\n    return s # A variavel S vai para o valor de dentro do print\nprint(somar(3, 2, 5))  # valor de return s\n#==================================================================================\ndef somar(a=0, b=0, c=0):",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "n1",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "n1 = somar(3, 2, 5) # dando o valor da funçao prar uma variavel para que possa ter vsarios formados de prints \nn2 = somar(2, 2)\nn3 = somar(6)\nprint(f'Meus calculos deral {n1}, {n2}. {n3}')\n#==================================================================================\ndef factorial(num=1): # se num for igual a 0 recebe 1\n    t = 1\n    for c in range(num, 0, -1):\n        t *= c\n    return t ",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "n2",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "n2 = somar(2, 2)\nn3 = somar(6)\nprint(f'Meus calculos deral {n1}, {n2}. {n3}')\n#==================================================================================\ndef factorial(num=1): # se num for igual a 0 recebe 1\n    t = 1\n    for c in range(num, 0, -1):\n        t *= c\n    return t \nf1 = factorial(5)",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "n3",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "n3 = somar(6)\nprint(f'Meus calculos deral {n1}, {n2}. {n3}')\n#==================================================================================\ndef factorial(num=1): # se num for igual a 0 recebe 1\n    t = 1\n    for c in range(num, 0, -1):\n        t *= c\n    return t \nf1 = factorial(5)\nf2 = factorial(4)",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "f1",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "f1 = factorial(5)\nf2 = factorial(4)\nf3 = factorial()\nprint(f'Os resultados são {f1}, {f2}, {f3}')\n#==================================================================================\ndef par(n=0):\n    if n % 2 == 0:\n        return True # se for par ele retorna True\n    else:\n        return False # se nao for ele da false",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "f2",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "f2 = factorial(4)\nf3 = factorial()\nprint(f'Os resultados são {f1}, {f2}, {f3}')\n#==================================================================================\ndef par(n=0):\n    if n % 2 == 0:\n        return True # se for par ele retorna True\n    else:\n        return False # se nao for ele da false\nnum = int(input('Digite um numero: '))",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "f3",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "f3 = factorial()\nprint(f'Os resultados são {f1}, {f2}, {f3}')\n#==================================================================================\ndef par(n=0):\n    if n % 2 == 0:\n        return True # se for par ele retorna True\n    else:\n        return False # se nao for ele da false\nnum = int(input('Digite um numero: '))\nprint(par(num)) # par e a funçao ",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Curso Python #21 - funções (parte 2",
        "description": "Curso Python #21 - funções (parte 2",
        "peekOfCode": "num = int(input('Digite um numero: '))\nprint(par(num)) # par e a funçao \nif par(num):\n    print('E par ')\nelse:\n    print('Nao e par ')",
        "detail": "Curso Python #21 - funções (parte 2",
        "documentation": {}
    },
    {
        "label": "fatorial",
        "kind": 2,
        "importPath": "Curso Python #22 – Módulos e Pacotes",
        "description": "Curso Python #22 – Módulos e Pacotes",
        "peekOfCode": "def fatorial(n): # valor N e substituido por num\n    f = 1\n    for c in range(1,n,-1):\n        f *= c\n    return f\nnum = int(input(\"Digite um valor: \"))\nprint(fatorial(num)) \n#print(f\"O fatorial de {num} é {f}\")",
        "detail": "Curso Python #22 – Módulos e Pacotes",
        "documentation": {}
    },
    {
        "label": "num",
        "kind": 5,
        "importPath": "Curso Python #22 – Módulos e Pacotes",
        "description": "Curso Python #22 – Módulos e Pacotes",
        "peekOfCode": "num = int(input(\"Digite um valor: \"))\nprint(fatorial(num)) \n#print(f\"O fatorial de {num} é {f}\")",
        "detail": "Curso Python #22 – Módulos e Pacotes",
        "documentation": {}
    },
    {
        "label": "leiadinheiro",
        "kind": 2,
        "importPath": "dado",
        "description": "dado",
        "peekOfCode": "def leiadinheiro(msg):\n    valido = False # ok começa como false = Falso\n    while not valido:\n        entrada = str(input(msg))\n        if entrada.isalpha(msg): # .isalpha para verificar se e alfanumeico | caso nao seja numerico  \n            print(f'\\\"{Entrada}\\\" é um preço invalido!!') # \\\" para forçar a chamada da chave \n        else:\n            valido = True\n            return float(entrada)\ndef leiaint(*msg):",
        "detail": "dado",
        "documentation": {}
    },
    {
        "label": "leiaint",
        "kind": 2,
        "importPath": "dado",
        "description": "dado",
        "peekOfCode": "def leiaint(*msg):\n    ok = False # ok começa como false = Falso\n    valor = 0\n    while True:\n        n = str(input(msg))  # na variavel local recebe STR\n        if n.isnumeric(): # isnumeric() para verificar se e numerico\n            valor = int(n) # se for valor que começa com 0 recebe valor int de n \n            ok = True # se for numero OK vira True = Verdadeiro \n        else: # se N nao for numero \n            print(\"\\033[0;31mERRO digite um numero inteiro valido!!!\\033[m\")",
        "detail": "dado",
        "documentation": {}
    },
    {
        "label": "GetPassWarning",
        "kind": 6,
        "importPath": "getpass",
        "description": "getpass",
        "peekOfCode": "class GetPassWarning(UserWarning): pass\ndef unix_getpass(prompt='Password: ', stream=None):\n    \"\"\"Solicita uma senha, com o eco desligado.\n    Argumentos:\n      prompt: Escrito no fluxo para solicitar a entrada. Senha padrão: '\n      stream: Um objeto de arquivo gravável para exibir o prompt. O padrão é\n              o tty. Se nenhum tty estiver disponível, o padrão será sys.stderr.\n    Retorna:\n      A entrada seKr3t.\n    Levanta:",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "unix_getpass",
        "kind": 2,
        "importPath": "getpass",
        "description": "getpass",
        "peekOfCode": "def unix_getpass(prompt='Password: ', stream=None):\n    \"\"\"Solicita uma senha, com o eco desligado.\n    Argumentos:\n      prompt: Escrito no fluxo para solicitar a entrada. Senha padrão: '\n      stream: Um objeto de arquivo gravável para exibir o prompt. O padrão é\n              o tty. Se nenhum tty estiver disponível, o padrão será sys.stderr.\n    Retorna:\n      A entrada seKr3t.\n    Levanta:\n      EOFError: Se nossa entrada tty ou stdin foi fechada.",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "win_getpass",
        "kind": 2,
        "importPath": "getpass",
        "description": "getpass",
        "peekOfCode": "def win_getpass(prompt='Password: ', stream=None):\n    \"\"\"Prompt for password with echo off, using Windows getwch().\"\"\"\n    if sys.stdin is not sys.__stdin__:\n        return fallback_getpass(prompt, stream)\n    for c in prompt:\n        msvcrt.putwch(c)\n    pw = \"\"\n    while 1:\n        c = msvcrt.getwch()\n        if c == '\\r' or c == '\\n':",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "fallback_getpass",
        "kind": 2,
        "importPath": "getpass",
        "description": "getpass",
        "peekOfCode": "def fallback_getpass(prompt='Password: ', stream=None):\n    warnings.warn(\"Can not control echo on the terminal.\", GetPassWarning,\n                  stacklevel=2)\n    if not stream:\n        stream = sys.stderr\n    print(\"Warning: Password input may be echoed.\", file=stream)\n    return _raw_input(prompt, stream)\ndef _raw_input(prompt=\"\", stream=None, input=None):\n    # Isso não salva a string no histórico da linha de leitura GNU.\n    if not stream:",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "getuser",
        "kind": 2,
        "importPath": "getpass",
        "description": "getpass",
        "peekOfCode": "def getuser():\n    \"\"\"\n    Obtenha o nome de usuário do banco de dados de ambiente ou senha.\n    Primeiro tente várias variáveis ​​de ambiente, então a senha\n    base de dados. Isso funciona no Windows, desde que USERNAME esteja definido.\n    \"\"\"\n    for name in ('LOGNAME', 'USER', 'LNAME', 'USERNAME'):\n        user = os.environ.get(name)\n        if user:\n            return user",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "getpass",
        "description": "getpass",
        "peekOfCode": "__all__ = [\"getpass\",\"getuser\",\"GetPassWarning\"]\nclass GetPassWarning(UserWarning): pass\ndef unix_getpass(prompt='Password: ', stream=None):\n    \"\"\"Solicita uma senha, com o eco desligado.\n    Argumentos:\n      prompt: Escrito no fluxo para solicitar a entrada. Senha padrão: '\n      stream: Um objeto de arquivo gravável para exibir o prompt. O padrão é\n              o tty. Se nenhum tty estiver disponível, o padrão será sys.stderr.\n    Retorna:\n      A entrada seKr3t.",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "metade",
        "kind": 2,
        "importPath": "moeda",
        "description": "moeda",
        "peekOfCode": "def metade(num, sit=False):\n    h = num / 2\n    if sit:\n        s = (f'{h:.2f}')\n        return s\n    else:\n        return h\ndef dobro(num, sit=False):\n    h = num * 2\n    if sit:",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "dobro",
        "kind": 2,
        "importPath": "moeda",
        "description": "moeda",
        "peekOfCode": "def dobro(num, sit=False):\n    h = num * 2\n    if sit:\n        s = (f'{h:.2f}')\n        return s\n    else:\n        return h\ndef aumenta(num, meta=0, sit=False ):\n    n = (num * meta) / 100\n    if sit:",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "aumenta",
        "kind": 2,
        "importPath": "moeda",
        "description": "moeda",
        "peekOfCode": "def aumenta(num, meta=0, sit=False ):\n    n = (num * meta) / 100\n    if sit:\n        s = (f'{n + num:.2f}')\n        return s\n    else:\n        return n\ndef diminuir(num, dimi=0, sit=False):\n    n = (num * dimi) / 100\n    c = num - n",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "diminuir",
        "kind": 2,
        "importPath": "moeda",
        "description": "moeda",
        "peekOfCode": "def diminuir(num, dimi=0, sit=False):\n    n = (num * dimi) / 100\n    c = num - n\n    if sit:\n        s = (f'{c:.2f}')\n        return s\n    else:\n        return c\ndef moeda(num, format=True):\n    n = (f'{num:.2f}')",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "moeda",
        "kind": 2,
        "importPath": "moeda",
        "description": "moeda",
        "peekOfCode": "def moeda(num, format=True):\n    n = (f'{num:.2f}')\n    return n\ndef resumo(num=0, au=0, re=0):\n    import moeda\n    print(\"-\"*30)\n    print(\"       Rezumo do valor\")\n    print(\"-\"*30)\n    dici = dict() \n    dici['Preço Analizado'] = num",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "resumo",
        "kind": 2,
        "importPath": "moeda",
        "description": "moeda",
        "peekOfCode": "def resumo(num=0, au=0, re=0):\n    import moeda\n    print(\"-\"*30)\n    print(\"       Rezumo do valor\")\n    print(\"-\"*30)\n    dici = dict() \n    dici['Preço Analizado'] = num\n    dici['Dobro do preço'] = moeda.dobro(num)\n    dici['Metade do preço'] = moeda.metade(num)\n    dici['80 % de aumento'] = moeda.aumenta(num,au)+num ",
        "detail": "moeda",
        "documentation": {}
    },
    {
        "label": "navegador",
        "kind": 5,
        "importPath": "Selenium",
        "description": "Selenium",
        "peekOfCode": "navegador = webdriver.Chrome() # para abrir o .Chrome\nnavegador.get('https://www.youtube.com/watch?v=kCazaXjQGuw') # comando .get para ir pra um pagina\ntime.sleep(50)\nnavegador.find_element(By.XPATH,'//*[@id=\"Form1\"]/header/div/div/div/div[2]/ul/li[3]/a').click # click para clicar # para encontrar o elemento Copia o xpath\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support.expected_conditions import presence_of_element_located\nwith webdriver.Chrome() as driver:",
        "detail": "Selenium",
        "documentation": {}
    },
    {
        "label": "cadastrar_pessoa",
        "kind": 2,
        "importPath": "sistema",
        "description": "sistema",
        "peekOfCode": "def cadastrar_pessoa():\n    nome = input(\"Digite o nome da pessoa: \")\n    idade = input(\"Digite a idade da pessoa: \")\n    with open('pessoas.txt', 'a') as file:\n        file.write(f\"{nome},{idade}\\n\")\n    print('\\033[32m-'*40)\n    print(\"Pessoa cadastrada com sucesso!\")\n    print('\\033[32m-\\033[m'*40)\ndef listar_pessoas():\n    with open('pessoas.txt', 'r') as file:",
        "detail": "sistema",
        "documentation": {}
    },
    {
        "label": "listar_pessoas",
        "kind": 2,
        "importPath": "sistema",
        "description": "sistema",
        "peekOfCode": "def listar_pessoas():\n    with open('pessoas.txt', 'r') as file:\n        pessoas = file.readlines()\n        if pessoas:\n            print(\"Pessoas cadastradas:\")\n            for idx, pessoa in enumerate(pessoas, start=1):\n                nome, idade = pessoa.strip().split(',')\n                print(f\"{idx}.Nome:{nome}, Idade:{idade}\")\n        else:\n            print(\"Nenhuma pessoa cadastrada.\")",
        "detail": "sistema",
        "documentation": {}
    },
    {
        "label": "remover_pessoa",
        "kind": 2,
        "importPath": "sistema",
        "description": "sistema",
        "peekOfCode": "def remover_pessoa():\n    listar_pessoas()\n    try:\n        indice = int(input(\"Digite o número da pessoa que deseja remover: \")) - 1\n        with open('pessoas.txt', 'r') as file:\n            pessoas = file.readlines()\n        if 0 <= indice < len(pessoas):\n            pessoa_removida = pessoas.pop(indice)\n            with open('pessoas.txt', 'w') as file:\n                file.writelines(pessoas)",
        "detail": "sistema",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "sistema",
        "description": "sistema",
        "peekOfCode": "def main():\n    while True:\n        print(\"\\nOpções:\")\n        print(\"1. Cadastrar nova pessoa\")\n        print(\"2. Listar todas as pessoas cadastradas\")\n        print(\"3. Remover uma pessoa da lista\")\n        print(\"4. Sair\")\n        opcao = input(\"Digite o número da opção desejada: \")\n        print()\n        if opcao == '1':",
        "detail": "sistema",
        "documentation": {}
    }
]